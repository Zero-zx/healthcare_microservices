This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.cursor/rules/prev-run-task.mdc
.gitignore
create_patients_table.sql
docker-compose.yml
frontend/.gitignore
frontend/package.json
frontend/public/index.html
frontend/public/manifest.json
frontend/public/robots.txt
frontend/README.md
frontend/src/App.css
frontend/src/App.test.tsx
frontend/src/App.tsx
frontend/src/components/auth/Login.tsx
frontend/src/components/auth/Register.tsx
frontend/src/components/Chatbot.tsx
frontend/src/components/Layout.tsx
frontend/src/components/UserForm.tsx
frontend/src/config/api.ts
frontend/src/hooks/useApi.ts
frontend/src/hooks/useAppDispatch.ts
frontend/src/hooks/useAppointments.ts
frontend/src/hooks/useAppSelector.ts
frontend/src/hooks/useAuth.ts
frontend/src/hooks/useDoctors.ts
frontend/src/hooks/useError.ts
frontend/src/hooks/useFormValidation.ts
frontend/src/hooks/useLabResults.ts
frontend/src/hooks/useLoading.ts
frontend/src/hooks/useNotification.ts
frontend/src/hooks/usePagination.ts
frontend/src/hooks/usePatients.ts
frontend/src/hooks/useProtectedRoute.ts
frontend/src/hooks/useSearch.ts
frontend/src/hooks/useSorting.ts
frontend/src/hooks/useTheme.ts
frontend/src/hooks/useUsers.ts
frontend/src/index.css
frontend/src/index.tsx
frontend/src/logo.svg
frontend/src/pages/Appointments.tsx
frontend/src/pages/ChatbotPage.tsx
frontend/src/pages/DoctorManagement.tsx
frontend/src/pages/Home.tsx
frontend/src/pages/Login.tsx
frontend/src/pages/PatientManagement.tsx
frontend/src/pages/Prediction.tsx
frontend/src/react-app-env.d.ts
frontend/src/reportWebVitals.ts
frontend/src/services/appointmentService.ts
frontend/src/services/authService.ts
frontend/src/services/doctorService.ts
frontend/src/services/patientService.ts
frontend/src/services/userService.ts
frontend/src/setupTests.ts
frontend/src/store/index.ts
frontend/src/store/slices/appointmentSlice.ts
frontend/src/store/slices/authSlice.ts
frontend/src/store/slices/doctorSlice.ts
frontend/src/store/slices/labSlice.ts
frontend/src/store/slices/patientSlice.ts
frontend/src/store/slices/themeSlice.ts
frontend/src/store/slices/userSlice.ts
frontend/src/theme.ts
frontend/src/types/appointment.ts
frontend/src/types/auth.ts
frontend/src/types/notistack.d.ts
frontend/src/types/user.ts
frontend/tsconfig.json
gateway/Dockerfile
gateway/src/nginx.conf
healthcare_microservices.postman_collection.json
init.sql
package.json
readme.md
seed_data.sql
services/admin_service/admin_service/asgi.py
services/admin_service/admin_service/settings.py
services/admin_service/admin_service/urls.py
services/admin_service/admin_service/wsgi.py
services/admin_service/Dockerfile
services/admin_service/manage.py
services/admin_service/requirements.txt
services/appointment_service/appointment_service/__init__.py
services/appointment_service/appointment_service/asgi.py
services/appointment_service/appointment_service/migrations/0001_initial.py
services/appointment_service/appointment_service/models.py
services/appointment_service/appointment_service/serializers.py
services/appointment_service/appointment_service/settings.py
services/appointment_service/appointment_service/urls.py
services/appointment_service/appointment_service/views.py
services/appointment_service/appointment_service/wsgi.py
services/appointment_service/Dockerfile
services/appointment_service/manage.py
services/appointment_service/README.md
services/appointment_service/requirements.txt
services/chatbot_service/app/__init__.py
services/chatbot_service/app/urls.py
services/chatbot_service/app/views.py
services/chatbot_service/chatbot_core/asgi.py
services/chatbot_service/chatbot_core/conversation.py
services/chatbot_service/chatbot_core/diagnosis.py
services/chatbot_service/chatbot_core/settings.py
services/chatbot_service/chatbot_core/urls.py
services/chatbot_service/chatbot_core/wsgi.py
services/chatbot_service/chatbot_service/settings.py
services/chatbot_service/chatbot_service/urls.py
services/chatbot_service/Dockerfile
services/chatbot_service/kb/diseases.json
services/chatbot_service/manage.py
services/chatbot_service/requirements.txt
services/doctor_service/Dockerfile
services/doctor_service/doctor_service/asgi.py
services/doctor_service/doctor_service/settings.py
services/doctor_service/doctor_service/urls.py
services/doctor_service/doctor_service/wsgi.py
services/doctor_service/doctor/admin.py
services/doctor_service/doctor/apps.py
services/doctor_service/doctor/management/__init__.py
services/doctor_service/doctor/management/commands/__init__.py
services/doctor_service/doctor/management/commands/load_fake_data.py
services/doctor_service/doctor/managers.py
services/doctor_service/doctor/migrations/0001_initial.py
services/doctor_service/doctor/migrations/0002_alter_doctor_id_alter_doctor_user_id_alter_user_id.py
services/doctor_service/doctor/migrations/0003_doctor_name.py
services/doctor_service/doctor/models.py
services/doctor_service/doctor/serializers.py
services/doctor_service/doctor/tests.py
services/doctor_service/doctor/urls.py
services/doctor_service/doctor/views.py
services/doctor_service/manage.py
services/doctor_service/requirements.txt
services/laboratory_service/disease_prediction/__init__.py
services/laboratory_service/disease_prediction/ai_models/__init__.py
services/laboratory_service/disease_prediction/ai_models/predictor.py
services/laboratory_service/disease_prediction/apps.py
services/laboratory_service/disease_prediction/migrations/__init__.py
services/laboratory_service/disease_prediction/models/__init__.py
services/laboratory_service/disease_prediction/models/prediction.py
services/laboratory_service/disease_prediction/serializers/__init__.py
services/laboratory_service/disease_prediction/serializers/prediction.py
services/laboratory_service/disease_prediction/views/__init__.py
services/laboratory_service/disease_prediction/views/prediction.py
services/laboratory_service/Dockerfile
services/laboratory_service/laboratory_service/__init__.py
services/laboratory_service/laboratory_service/asgi.py
services/laboratory_service/laboratory_service/settings.py
services/laboratory_service/laboratory_service/urls.py
services/laboratory_service/laboratory_service/wsgi.py
services/laboratory_service/manage.py
services/laboratory_service/readme.md
services/laboratory_service/requirements.txt
services/laboratory_service/setup.sh
services/patient_service/Dockerfile
services/patient_service/manage.py
services/patient_service/patient_service/asgi.py
services/patient_service/patient_service/settings.py
services/patient_service/patient_service/urls.py
services/patient_service/patient_service/wsgi.py
services/patient_service/patients/apps.py
services/patient_service/patients/fixtures/fake_data.sql
services/patient_service/patients/management/commands/load_fake_data.py
services/patient_service/patients/migrations/0001_initial.py
services/patient_service/patients/migrations/0002_alter_patient_id_alter_patient_user_id_alter_user_id.py
services/patient_service/patients/models.py
services/patient_service/patients/serializers.py
services/patient_service/patients/urls.py
services/patient_service/patients/views.py
services/patient_service/README.md
services/patient_service/requirements.txt
services/user_service/Dockerfile
services/user_service/manage.py
services/user_service/requirements.txt
services/user_service/user_service/settings.py
services/user_service/user_service/urls.py
services/user_service/user_service/wsgi.py
services/user_service/users/apps.py
services/user_service/users/migrations/0001_initial.py
services/user_service/users/models.py
services/user_service/users/serializers.py
services/user_service/users/urls.py
services/user_service/users/views.py
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="frontend/src/config/api.ts">
const GATEWAY_URL = process.env.REACT_APP_GATEWAY_URL || 'http://localhost:8000';

export const API_ENDPOINTS = {
    // Auth endpoints
    AUTH: {
        LOGIN: `${GATEWAY_URL}/api/users/login/`,
        REGISTER: `${GATEWAY_URL}/api/users/register/`,
        REFRESH: `${GATEWAY_URL}/api/users/token/refresh/`,
    },
    // User endpoints
    USERS: {
        BASE: `${GATEWAY_URL}/api/users/`,
        PROFILE: `${GATEWAY_URL}/api/users/profile/`,
    },
    // Doctor endpoints
    DOCTORS: {
        BASE: `${GATEWAY_URL}/api/doctors/`,
    },
    // Patient endpoints
    PATIENTS: {
        BASE: `${GATEWAY_URL}/api/patients/`,
    },
    // Appointment endpoints
    APPOINTMENTS: {
        BASE: `${GATEWAY_URL}/api/appointments/`,
    },
    // Laboratory endpoints
    LABORATORY: {
        BASE: `${GATEWAY_URL}/api/laboratory/`,
        PREDICT: `${GATEWAY_URL}/api/predict/`,
    },
    // Chatbot endpoints
    CHATBOT: {
        BASE: `${GATEWAY_URL}/api/chatbot/`,
    },
};
</file>

<file path="frontend/src/services/appointmentService.ts">
import axios from 'axios';
import { API_ENDPOINTS } from '../config/api';
import { Appointment } from '../types/appointment';

const appointmentService = {
    getAll: async (token: string): Promise<Appointment[]> => {
        const response = await axios.get(API_ENDPOINTS.APPOINTMENTS.BASE, {
            headers: { Authorization: `Bearer ${token}` }
        });
        return response.data.results || response.data;
    },

    getById: async (id: string, token: string): Promise<Appointment> => {
        const response = await axios.get(`${API_ENDPOINTS.APPOINTMENTS.BASE}${id}/`, {
            headers: { Authorization: `Bearer ${token}` }
        });
        return response.data;
    },

    create: async (data: Partial<Appointment>, token: string): Promise<Appointment> => {
        const response = await axios.post(API_ENDPOINTS.APPOINTMENTS.BASE, data, {
            headers: { Authorization: `Bearer ${token}` }
        });
        return response.data;
    },

    update: async (id: string, data: Partial<Appointment>, token: string): Promise<Appointment> => {
        const response = await axios.put(`${API_ENDPOINTS.APPOINTMENTS.BASE}${id}/`, data, {
            headers: { Authorization: `Bearer ${token}` }
        });
        return response.data;
    },

    delete: async (id: string, token: string): Promise<void> => {
        await axios.delete(`${API_ENDPOINTS.APPOINTMENTS.BASE}${id}/`, {
            headers: { Authorization: `Bearer ${token}` }
        });
    }
};

export default appointmentService;
</file>

<file path="frontend/src/services/doctorService.ts">
import axios from 'axios';
import { API_ENDPOINTS } from '../config/api';
import { CreateDoctorDto, UpdateDoctorDto, Doctor } from '../types/user';

// Configure axios defaults
axios.defaults.withCredentials = true;
axios.defaults.headers.common['Content-Type'] = 'application/json';
axios.defaults.headers.common['Accept'] = 'application/json';

// Doctor Services
const doctorService = {
    getAll: async (token: string): Promise<Doctor[]> => {
        const response = await axios.get(API_ENDPOINTS.DOCTORS.BASE, {
            headers: { Authorization: `Bearer ${token}` }
        });
        return response.data;
    },

    getById: async (id: string, token: string): Promise<Doctor> => {
        const response = await axios.get(`${API_ENDPOINTS.DOCTORS.BASE}${id}/`, {
            headers: { Authorization: `Bearer ${token}` }
        });
        return response.data;
    },

    create: async (data: CreateDoctorDto, token: string): Promise<Doctor> => {
        const response = await axios.post(API_ENDPOINTS.DOCTORS.BASE, data, {
            headers: { Authorization: `Bearer ${token}` }
        });
        return response.data;
    },

    update: async (id: string, data: UpdateDoctorDto, token: string): Promise<Doctor> => {
        const response = await axios.put(`${API_ENDPOINTS.DOCTORS.BASE}${id}/`, data, {
            headers: { Authorization: `Bearer ${token}` }
        });
        return response.data;
    },

    delete: async (id: string, token: string): Promise<void> => {
        await axios.delete(`${API_ENDPOINTS.DOCTORS.BASE}${id}/`, {
            headers: { Authorization: `Bearer ${token}` }
        });
    }
};

export default doctorService;
</file>

<file path="frontend/src/services/patientService.ts">
import axios from 'axios';
import { API_ENDPOINTS } from '../config/api';
import { CreatePatientDto, UpdatePatientDto, Patient } from '../types/user';

const patientService = {
    getAll: async (token: string): Promise<Patient[]> => {
        const response = await axios.get(API_ENDPOINTS.PATIENTS.BASE, {
            headers: { Authorization: `Bearer ${token}` }
        });
        return response.data;
    },

    getById: async (id: string, token: string): Promise<Patient> => {
        const response = await axios.get(`${API_ENDPOINTS.PATIENTS.BASE}${id}/`, {
            headers: { Authorization: `Bearer ${token}` }
        });
        return response.data;
    },

    create: async (data: CreatePatientDto, token: string): Promise<Patient> => {
        const response = await axios.post(API_ENDPOINTS.PATIENTS.BASE, data, {
            headers: { Authorization: `Bearer ${token}` }
        });
        return response.data;
    },

    update: async (id: string, data: UpdatePatientDto, token: string): Promise<Patient> => {
        const response = await axios.put(`${API_ENDPOINTS.PATIENTS.BASE}${id}/`, data, {
            headers: { Authorization: `Bearer ${token}` }
        });
        return response.data;
    },

    delete: async (id: string, token: string): Promise<void> => {
        await axios.delete(`${API_ENDPOINTS.PATIENTS.BASE}${id}/`, {
            headers: { Authorization: `Bearer ${token}` }
        });
    }
};

export default patientService;
</file>

<file path="healthcare_microservices.postman_collection.json">
{
  "info": {
    "_postman_id": "healthcare-microservices-collection",
    "name": "Healthcare Microservices API Gateway Test",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "User Service",
      "item": [
        {
          "name": "Get All Users",
          "request": {
            "method": "GET",
            "url": "http://localhost:8000/api/users/"
          }
        },
        {
          "name": "Register User",
          "request": {
            "method": "POST",
            "url": "http://localhost:8000/api/users/register/",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"testuser\",\n  \"password\": \"testpass\",\n  \"email\": \"test@example.com\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          }
        }
      ]
    },
    {
      "name": "Doctor Service",
      "item": [
        {
          "name": "Get All Doctors",
          "request": {
            "method": "GET",
            "url": "http://localhost:8000/api/doctors/"
          }
        },
        {
          "name": "Get Doctor By ID",
          "request": {
            "method": "GET",
            "url": "http://localhost:8000/api/doctors/1/"
          }
        }
      ]
    },
    {
      "name": "Patient Service",
      "item": [
        {
          "name": "Get All Patients",
          "request": {
            "method": "GET",
            "url": "http://localhost:8000/api/patients/"
          }
        },
        {
          "name": "Get Patient By ID",
          "request": {
            "method": "GET",
            "url": "http://localhost:8000/api/patients/1/"
          }
        }
      ]
    },
    {
      "name": "Appointment Service",
      "item": [
        {
          "name": "Get All Appointments",
          "request": {
            "method": "GET",
            "url": "http://localhost:8000/api/appointments/"
          }
        },
        {
          "name": "Create Appointment",
          "request": {
            "method": "POST",
            "url": "http://localhost:8000/api/appointments/",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"patient\": 1,\n  \"doctor\": 1,\n  \"date\": \"2024-07-01\",\n  \"time\": \"10:00\",\n  \"reason\": \"Checkup\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          }
        }
      ]
    },
    {
      "name": "Laboratory Service",
      "item": [
        {
          "name": "Get All Lab Results",
          "request": {
            "method": "GET",
            "url": "http://localhost:8000/api/laboratory/"
          }
        }
      ]
    },
    {
      "name": "Notification Service",
      "item": [
        {
          "name": "Send Notification",
          "request": {
            "method": "POST",
            "url": "http://localhost:8000/api/notifications/send/",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"to\": \"user@example.com\",\n  \"subject\": \"Test Notification\",\n  \"message\": \"This is a test notification.\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          }
        }
      ]
    },
    {
      "name": "Chatbot Service",
      "item": [
        {
          "name": "Chat with Bot",
          "request": {
            "method": "POST",
            "url": "http://localhost:8000/api/chatbot/chat/",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"message\": \"Hello!\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          }
        }
      ]
    }
  ]
}
</file>

<file path="services/appointment_service/appointment_service/migrations/0001_initial.py">
# Generated by Django 3.2.23 on 2025-06-10 07:31

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('id', models.CharField(max_length=64, primary_key=True, serialize=False)),
                ('patient_id', models.CharField(max_length=64)),
                ('doctor_id', models.CharField(max_length=64)),
                ('date', models.DateField()),
                ('time', models.TimeField()),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('confirmed', 'Confirmed'), ('cancelled', 'Cancelled'), ('completed', 'Completed')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('service_type', models.CharField(max_length=100)),
                ('duration', models.IntegerField(default=30, validators=[django.core.validators.MinValueValidator(15), django.core.validators.MaxValueValidator(240)])),
            ],
            options={
                'ordering': ['date', 'time'],
            },
        ),
        migrations.AddIndex(
            model_name='appointment',
            index=models.Index(fields=['patient_id'], name='appointment_patient_06997f_idx'),
        ),
        migrations.AddIndex(
            model_name='appointment',
            index=models.Index(fields=['doctor_id'], name='appointment_doctor__422124_idx'),
        ),
        migrations.AddIndex(
            model_name='appointment',
            index=models.Index(fields=['date', 'time'], name='appointment_date_f01182_idx'),
        ),
        migrations.AddIndex(
            model_name='appointment',
            index=models.Index(fields=['status'], name='appointment_status_e5f18c_idx'),
        ),
    ]
</file>

<file path="services/chatbot_service/chatbot_core/conversation.py">
from typing import Dict, List, Optional
from .diagnosis import DiagnosisState

class ConversationState:
    def __init__(self):
        self.diagnosis_state = DiagnosisState()
        self.is_booking = False
        self.booking_step = 'ask_booking'  # ask_booking, select_patient, select_doctor, select_date, select_time, confirm
        self.patient_id = None
        self.doctor_id = None
        self.appointment_date = None
        self.appointment_time = None

class ConversationManager:
    def __init__(self):
        self.conversations: Dict[str, ConversationState] = {}
    
    def get_conversation(self, session_id: str) -> ConversationState:
        """Lấy hoặc tạo mới trạng thái cuộc hội thoại"""
        if session_id not in self.conversations:
            self.conversations[session_id] = ConversationState()
        return self.conversations[session_id]
    
    def reset_conversation(self, session_id: str) -> None:
        """Reset trạng thái cuộc hội thoại"""
        self.conversations[session_id] = ConversationState()
    
    def update_booking_state(self, session_id: str, is_booking: bool) -> None:
        """Cập nhật trạng thái đặt lịch"""
        state = self.get_conversation(session_id)
        state.is_booking = is_booking
        if not is_booking:
            state.booking_step = 'ask_booking'
            state.patient_id = None
            state.doctor_id = None
            state.appointment_date = None
            state.appointment_time = None
</file>

<file path="services/chatbot_service/chatbot_core/diagnosis.py">
import json
import os
from typing import Dict, Set, List, Tuple, Optional

# Đường dẫn tới file KB
KB_PATH = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'kb', 'diseases.json')

# Load knowledge base
with open(KB_PATH, encoding='utf-8') as f:
    KB = json.load(f)

# Tập hợp tất cả các triệu chứng
ALL_SYMPTOMS = set()
for disease in KB.values():
    ALL_SYMPTOMS.update(disease['symptoms'])

class DiagnosisState:
    def __init__(self):
        self.current_disease: Optional[str] = None
        self.asked_symptoms: Set[str] = set()
        self.confirmed_symptoms: Set[str] = set()
        self.disease_probabilities: Dict[str, float] = {}
        self.step: str = 'initial'  # initial, asking_symptoms, diagnosis
        self.current_symptom: Optional[str] = None

def process_initial_symptoms(user_text: str) -> Set[str]:
    """Xử lý câu trả lời đầu tiên của user về triệu chứng"""
    words = user_text.lower().split()
    found_symptoms = set()
    for word in words:
        for symptom in ALL_SYMPTOMS:
            if word in symptom or symptom in word:
                found_symptoms.add(symptom)
    return found_symptoms

def calculate_disease_probability(disease: str, confirmed_symptoms: Set[str]) -> float:
    """Tính xác suất bệnh dựa trên các triệu chứng đã xác nhận"""
    disease_symptoms = set(KB[disease]['symptoms'])
    if not disease_symptoms:
        return 0
    matching_symptoms = len(confirmed_symptoms.intersection(disease_symptoms))
    return (matching_symptoms / len(disease_symptoms)) * 100

def get_next_symptom_to_ask(disease: str, asked_symptoms: Set[str]) -> Optional[str]:
    """Chọn triệu chứng tiếp theo cần hỏi"""
    disease_symptoms = set(KB[disease]['symptoms'])
    remaining_symptoms = disease_symptoms - asked_symptoms
    if not remaining_symptoms:
        return None
    # Ưu tiên các triệu chứng phổ biến hơn
    return max(remaining_symptoms, key=lambda s: len([d for d in KB.values() if s in d['symptoms']]))

def get_diagnosis_response(state: DiagnosisState) -> Tuple[str, bool]:
    """Tạo câu trả lời dựa trên trạng thái hiện tại"""
    if state.step == 'initial':
        return "Bạn có thể mô tả các triệu chứng của mình không?", False
    
    # Kiểm tra nếu có bệnh nào > 70%
    max_prob_disease = max(state.disease_probabilities.items(), key=lambda x: x[1])
    if max_prob_disease[1] > 70:
        disease_info = KB[max_prob_disease[0]]
        response = f"Dựa trên các triệu chứng, bạn có thể bị {disease_info['name']}.\n"
        response += f"Triệu chứng: {', '.join(disease_info['symptoms'])}\n"
        response += f"Điều trị: {disease_info['treatment']}"
        if 'description' in disease_info:
            response += f"\n\nMô tả: {disease_info['description']}"
        return response, True
    
    # Nếu chưa đủ, chọn triệu chứng tiếp theo
    next_symptom = get_next_symptom_to_ask(state.current_disease, state.asked_symptoms)
    if next_symptom:
        state.current_symptom = next_symptom
        state.asked_symptoms.add(next_symptom)
        return f"Bạn có bị {next_symptom} không?", False
    
    # Nếu đã hỏi hết triệu chứng của bệnh hiện tại
    state.step = 'initial'
    return "Bạn có thể mô tả thêm các triệu chứng khác không?", False

def update_diagnosis_state(state: DiagnosisState, user_message: str) -> None:
    """Cập nhật trạng thái chẩn đoán dựa trên câu trả lời của user"""
    if state.step == 'initial':
        # Xử lý câu trả lời đầu tiên
        found_symptoms = process_initial_symptoms(user_message)
        if found_symptoms:
            state.confirmed_symptoms.update(found_symptoms)
            state.step = 'asking_symptoms'
            # Tính xác suất cho tất cả bệnh
            for disease in KB:
                prob = calculate_disease_probability(disease, state.confirmed_symptoms)
                state.disease_probabilities[disease] = prob
            
            # Chọn bệnh có xác suất cao nhất để hỏi thêm
            max_prob_disease = max(state.disease_probabilities.items(), key=lambda x: x[1])
            state.current_disease = max_prob_disease[0]
    
    elif state.step == 'asking_symptoms':
        # Xử lý câu trả lời yes/no
        if user_message.lower() in ['có', 'vâng', 'đúng', 'yes', 'y']:
            if state.current_symptom:
                state.confirmed_symptoms.add(state.current_symptom)
                # Cập nhật xác suất
                for disease in KB:
                    prob = calculate_disease_probability(disease, state.confirmed_symptoms)
                    state.disease_probabilities[disease] = prob
</file>

<file path="services/chatbot_service/chatbot_service/urls.py">
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('app.urls')),  # Bỏ prefix api/chatbot/ vì đã được xử lý bởi nginx
]
</file>

<file path="services/doctor_service/doctor/migrations/0002_alter_doctor_id_alter_doctor_user_id_alter_user_id.py">
# Generated by Django 4.2.21 on 2025-06-10 07:05

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('doctor', '0001_initial'),
    ]

    operations = [
        migrations.AlterField(
            model_name='doctor',
            name='id',
            field=models.CharField(max_length=64, primary_key=True, serialize=False),
        ),
        migrations.AlterField(
            model_name='doctor',
            name='user_id',
            field=models.CharField(max_length=64, unique=True),
        ),
        migrations.AlterField(
            model_name='user',
            name='id',
            field=models.CharField(max_length=64, primary_key=True, serialize=False),
        ),
    ]
</file>

<file path="services/doctor_service/doctor/migrations/0003_doctor_name.py">
# Generated by Django 4.2.21 on 2025-06-10 07:17

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('doctor', '0002_alter_doctor_id_alter_doctor_user_id_alter_user_id'),
    ]

    operations = [
        migrations.AddField(
            model_name='doctor',
            name='name',
            field=models.CharField(default='Unknown', max_length=100),
        ),
    ]
</file>

<file path="services/patient_service/patients/migrations/0002_alter_patient_id_alter_patient_user_id_alter_user_id.py">
# Generated by Django 4.2.22 on 2025-06-10 07:05

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('patients', '0001_initial'),
    ]

    operations = [
        migrations.AlterField(
            model_name='patient',
            name='id',
            field=models.CharField(max_length=64, primary_key=True, serialize=False),
        ),
        migrations.AlterField(
            model_name='patient',
            name='user_id',
            field=models.CharField(max_length=64, unique=True),
        ),
        migrations.AlterField(
            model_name='user',
            name='id',
            field=models.CharField(max_length=64, primary_key=True, serialize=False),
        ),
    ]
</file>

<file path="services/user_service/Dockerfile">
FROM python:3.9-slim

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    postgresql-client \
    && rm -rf /var/lib/apt/lists/*

# Install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy project files
COPY . .

# Run migrations and start server
CMD ["sh", "-c", "python manage.py migrate && python manage.py runserver 0.0.0.0:8000"]
</file>

<file path="services/user_service/manage.py">
#!/usr/bin/env python
import os
import sys

if __name__ == "__main__":
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "user_service.settings")
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)
</file>

<file path="services/user_service/requirements.txt">
Django==4.2.0
djangorestframework==3.14.0
djangorestframework-simplejwt==5.2.2
django-cors-headers==4.1.0
psycopg2-binary==2.9.6
requests==2.31.0
python-dotenv==1.0.0
</file>

<file path="services/user_service/user_service/settings.py">
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-your-secret-key-here'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',
    'users',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'user_service.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'user_service.wsgi.application'

# Database
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('POSTGRES_DB', 'user_service'),
        'USER': os.environ.get('POSTGRES_USER', 'postgres'),
        'PASSWORD': os.environ.get('POSTGRES_PASSWORD', 'postgres'),
        'HOST': os.environ.get('POSTGRES_HOST', 'localhost'),
        'PORT': os.environ.get('POSTGRES_PORT', '5432'),
    }
}

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
STATIC_URL = 'static/'

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Custom user model
AUTH_USER_MODEL = 'users.User'

# REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
}

# CORS settings
CORS_ALLOW_ALL_ORIGINS = True  # Only for development
CORS_ALLOW_CREDENTIALS = True

# JWT settings
from datetime import timedelta
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,
}
</file>

<file path="services/user_service/user_service/wsgi.py">
import os
from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'user_service.settings')

application = get_wsgi_application()
</file>

<file path="services/user_service/users/apps.py">
from django.apps import AppConfig

class UsersConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'users'
</file>

<file path="services/user_service/users/migrations/0001_initial.py">
# Generated by Django 4.2 on 2025-06-10 03:40

from django.db import migrations, models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('username', models.CharField(max_length=150, unique=True)),
                ('role', models.CharField(choices=[('patient', 'Patient'), ('doctor', 'Doctor'), ('admin', 'Admin')], max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
</file>

<file path="services/user_service/users/models.py">
from django.db import models

class User(models.Model):
    email = models.EmailField(unique=True)
    first_name = models.CharField(max_length=100)
    last_name = models.CharField(max_length=100)
    phone_number = models.CharField(max_length=20)
    address = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"{self.first_name} {self.last_name}"

    class Meta:
        db_table = 'users'
</file>

<file path="services/user_service/users/serializers.py">
from rest_framework import serializers
from django.contrib.auth.password_validation import validate_password
from .models import User

class UserSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        fields = ['id', 'email', 'first_name', 'last_name', 'phone_number', 'address', 'created_at', 'updated_at']
        read_only_fields = ['id', 'created_at', 'updated_at']

class RegisterSerializer(serializers.ModelSerializer):
    password = serializers.CharField(write_only=True, required=True, validators=[validate_password])
    password2 = serializers.CharField(write_only=True, required=True)
    role = serializers.ChoiceField(choices=User.ROLE_CHOICES)

    class Meta:
        model = User
        fields = ('email', 'username', 'password', 'password2', 'role')

    def validate(self, attrs):
        if attrs['password'] != attrs['password2']:
            raise serializers.ValidationError({"password": "Password fields didn't match."})
        return attrs

    def create(self, validated_data):
        validated_data.pop('password2')
        user = User.objects.create_user(**validated_data)
        return user

class UserProfileSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        fields = ('id', 'email', 'username', 'role', 'is_active', 'created_at', 'updated_at')
        read_only_fields = ('id', 'email', 'role', 'created_at', 'updated_at')

class CreateUserSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        fields = ['email', 'first_name', 'last_name', 'phone_number', 'address']

class UpdateUserSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        fields = ['email', 'first_name', 'last_name', 'phone_number', 'address']
        extra_kwargs = {
            'email': {'required': False},
            'first_name': {'required': False},
            'last_name': {'required': False},
            'phone_number': {'required': False},
            'address': {'required': False}
        }
</file>

<file path="services/user_service/users/urls.py">
from django.urls import path, include
from rest_framework.routers import DefaultRouter
from .views import UserViewSet

router = DefaultRouter()
router.register(r'users', UserViewSet)

urlpatterns = [
    path('', include(router.urls)),
]
</file>

<file path="services/user_service/users/views.py">
from rest_framework import viewsets, permissions
from .models import User
from .serializers import UserSerializer, CreateUserSerializer, UpdateUserSerializer

class UserViewSet(viewsets.ModelViewSet):
    queryset = User.objects.all()
    permission_classes = [permissions.AllowAny]

    def get_serializer_class(self):
        if self.action == 'create':
            return CreateUserSerializer
        elif self.action in ['update', 'partial_update']:
            return UpdateUserSerializer
        return UserSerializer
</file>

<file path=".gitignore">
# Created by https://www.gitignore.io
.idea/

### OSX ###
.DS_Store
.AppleDouble
.LSOverride

# Icon must end with two \r
Icon


# Thumbnails
._*

# Files that might appear on external disk
.Spotlight-V100
.Trashes

# Directories potentially created on remote AFP share
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk


### Python ###
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]

# C extensions
*.so

# Distribution / packaging
.Python
env/
build/
develop-eggs/
dist/
downloads/
eggs/
lib/
lib64/
parts/
sdist/
var/
*.egg-info/
.installed.cfg
*.egg

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.coverage
.cache
nosetests.xml
coverage.xml

# Translations
*.mo
*.pot

# Sphinx documentation
docs/_build/

# PyBuilder
target/


### Django ###
*.log
*.pot
*.pyc
__pycache__/
local_settings.py

.env
db.sqlite3

# Staticfiles
**/staticfiles/

# MySQL / InnoDB files
db/*
</file>

<file path="create_patients_table.sql">
USE patient_db;

CREATE TABLE IF NOT EXISTS patients_patient (
    user_id CHAR(36) PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    age INT NOT NULL,
    gender VARCHAR(10) NOT NULL,
    phone VARCHAR(15) NOT NULL,
    email VARCHAR(255) NOT NULL UNIQUE,
    address TEXT NOT NULL,
    medical_history TEXT,
    created_at DATETIME NOT NULL,
    updated_at DATETIME NOT NULL
); 

INSERT INTO patients_patient (user_id, name, age, gender, phone, email, address, medical_history, created_at, updated_at) VALUES
('1', 'John Doe', 30, 'Male', '1234567890', 'john.doe@example.com', '123 Main St, Anytown, USA', 'No medical history', NOW(), NOW());

INSERT INTO patients_patient (user_id, name, age, gender, phone, email, address, medical_history, created_at, updated_at) VALUES
('2', 'Jane Smith', 25, 'Female', '9876543210', 'jane.smith@example.com', '456 Oak Ave, Anytown, USA', 'No medical history', NOW(), NOW());

INSERT INTO patients_patient (user_id, name, age, gender, phone, email, address, medical_history, created_at, updated_at) VALUES
('3', 'Michael Brown', 40, 'Male', '5551234567', 'michael.brown@example.com', '789 Maple St, Anytown, USA', 'No medical history', NOW(), NOW());

INSERT INTO patients_patient (user_id, name, age, gender, phone, email, address, medical_history, created_at, updated_at) VALUES
('4', 'Emily Davis', 35, 'Female', '5557890123', 'emily.davis@example.com', '101 Pine St, Anytown, USA', 'No medical history', NOW(), NOW());
</file>

<file path="frontend/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*
</file>

<file path="frontend/public/index.html">
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>
</file>

<file path="frontend/public/manifest.json">
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}
</file>

<file path="frontend/public/robots.txt">
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:
</file>

<file path="frontend/README.md">
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in the browser.

The page will reload if you make edits.\
You will also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can’t go back!**

If you aren’t satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you’re on your own.

You don’t have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn’t feel obligated to use this feature. However we understand that this tool wouldn’t be useful if you couldn’t customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).
</file>

<file path="frontend/src/App.css">
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}
</file>

<file path="frontend/src/App.test.tsx">
import React from 'react';
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});
</file>

<file path="frontend/src/components/auth/Login.tsx">
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { Box, Button, TextField, Typography, Container, Paper } from '@mui/material';
import { userService } from '../../services/userService';

const Login: React.FC = () => {
    const navigate = useNavigate();
    const [email, setEmail] = useState('');
    const [error, setError] = useState('');

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        try {
            const users = await userService.getAll();
            const user = users.find(u => u.email === email);
            if (user) {
                navigate('/dashboard');
            } else {
                setError('User not found');
            }
        } catch (err) {
            setError('Login failed. Please try again.');
        }
    };

    return (
        <Container component="main" maxWidth="xs">
            <Paper elevation={3} sx={{ p: 4, mt: 8 }}>
                <Typography component="h1" variant="h5" align="center" gutterBottom>
                    Login
                </Typography>
                {error && (
                    <Typography color="error" align="center" gutterBottom>
                        {error}
                    </Typography>
                )}
                <Box component="form" onSubmit={handleSubmit} sx={{ mt: 1 }}>
                    <TextField
                        margin="normal"
                        required
                        fullWidth
                        id="email"
                        label="Email Address"
                        name="email"
                        autoComplete="email"
                        autoFocus
                        value={email}
                        onChange={(e) => setEmail(e.target.value)}
                    />
                    <Button
                        type="submit"
                        fullWidth
                        variant="contained"
                        sx={{ mt: 3, mb: 2 }}
                    >
                        Login
                    </Button>
                    <Button
                        fullWidth
                        variant="text"
                        onClick={() => navigate('/register')}
                    >
                        Don't have an account? Register
                    </Button>
                </Box>
            </Paper>
        </Container>
    );
};

export default Login;
</file>

<file path="frontend/src/components/Chatbot.tsx">
import React, { useState, useRef, useEffect } from 'react';
import {
  Box,
  Paper,
  Typography,
  TextField,
  Button,
  Avatar,
  AppBar,
  Toolbar,
  IconButton,
  Stack,
  Fade,
  CircularProgress
} from '@mui/material';
import RestartAltIcon from '@mui/icons-material/RestartAlt';
import SendIcon from '@mui/icons-material/Send';
import PersonIcon from '@mui/icons-material/Person';
import SmartToyIcon from '@mui/icons-material/SmartToy';
import axios from 'axios';

interface Message {
  sender: 'user' | 'bot';
  text: string;
  answer?: string; // chỉ dùng cho user trả lời Có/Không
}

const API_URL = 'http://localhost:8000/api/chatbot/chat/';
const NOT_FOUND_SYMPTOM = 'Tôi chưa từng nghe triệu chứng đó, bạn còn gặp triệu chứng nào khác không?';

function speak(text: string) {
  const utter = new window.SpeechSynthesisUtterance(text);
  utter.lang = 'vi-VN';
  window.speechSynthesis.speak(utter);
}

const Chatbot: React.FC = () => {
  const [messages, setMessages] = useState<Message[]>([]);
  const [input, setInput] = useState('');
  const [waiting, setWaiting] = useState(false);
  const inputRef = useRef<HTMLInputElement>(null);
  const chatBodyRef = useRef<HTMLDivElement>(null);
  const lastBotMsgRef = useRef<string | null>(null);

  // Gửi hội thoại lên backend
  const sendMessage = async (msg?: Message, questionText?: string, answer?: string) => {
    let history = [...messages];
    if (msg) {
      history = [...messages, msg];
    }
    // Nếu là trả lời Có/Không, gửi thêm object có answer cho backend
    if (questionText && answer) {
      history = [...messages, { sender: 'user', text: questionText, answer }];
    }
    setWaiting(true);
    try {
      const res = await fetch(API_URL, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ history }),
      });
      const data = await res.json();
      setMessages([...history, { sender: 'bot', text: data.reply }]);
      setWaiting(false);
    } catch (e) {
      setMessages([...history, { sender: 'bot', text: 'Lỗi kết nối server.' }]);
      setWaiting(false);
    }
  };

  // Xử lý gửi triệu chứng đầu tiên
  const handleSend = async () => {
    if (!input.trim()) return;

    const userMessage: Message = { text: input, sender: 'user' };
    setMessages((prev) => [...prev, userMessage]);
    setInput('');
    setWaiting(true);

    try {
      const response = await axios.post(API_URL, {
        message: input,
        session_id: 'anonymous',
        history: messages.map(msg => ({
          sender: msg.sender,
          text: msg.text
        }))
      }, {
        headers: {
          'Content-Type': 'application/json',
        },
      });

      console.log('API Response:', response.data);

      const botMessage: Message = {
        text: response.data.response,
        sender: 'bot',
      };
      setMessages((prev) => [...prev, botMessage]);
    } catch (error) {
      console.error('Error:', error);
      const botMessage: Message = {
        text: 'Sorry, I encountered an error. Please try again.',
        sender: 'bot',
      };
      setMessages((prev) => [...prev, botMessage]);
    } finally {
      setWaiting(false);
    }
  };

  // Xử lý trả lời Có/Không cho các câu hỏi bot
  const handleAnswer = (answer: string) => {
    const lastBotMsg = messages[messages.length - 1];
    if (!lastBotMsg || lastBotMsg.sender !== 'bot') return;
    // Không hiển thị lại tin nhắn user, chỉ gửi cho backend
    sendMessage(undefined, lastBotMsg.text, answer);
  };

  // Khi load lần đầu, tự động hỏi triệu chứng
  useEffect(() => {
    if (messages.length === 0) {
      sendMessage({ sender: 'user', text: '' });
    }
    // eslint-disable-next-line
  }, []);

  // Tự động scroll xuống cuối khi có tin nhắn mới
  useEffect(() => {
    if (chatBodyRef.current) {
      chatBodyRef.current.scrollTop = chatBodyRef.current.scrollHeight;
    }
  }, [messages]);

  // Phát âm thanh chỉ khi có tin nhắn bot mới thực sự (không phát lại khi F5)
  useEffect(() => {
    if (messages.length > 0) {
      const lastMsg = messages[messages.length - 1];
      if (lastMsg.sender === 'bot' && lastMsg.text !== lastBotMsgRef.current) {
        speak(lastMsg.text);
        lastBotMsgRef.current = lastMsg.text;
      }
    }
  }, [messages]);

  // Kiểm tra có phải đang ở câu hỏi đầu tiên không
  const isFirstBotQuestion =
    messages.length > 0 &&
    messages[messages.length - 1].sender === 'bot' &&
    messages[messages.length - 1].text === 'Triệu chứng bạn gặp phải là gì?';

  // Nếu bot trả về "Tôi chưa từng nghe triệu chứng đó..." thì cho nhập lại
  const isNotFoundSymptom =
    messages.length > 0 &&
    messages[messages.length - 1].sender === 'bot' &&
    messages[messages.length - 1].text === NOT_FOUND_SYMPTOM;

  // Hàm reset hội thoại
  const handleReset = () => {
    setMessages([]);
    setInput('');
    setWaiting(false);
    inputRef.current?.focus();
  };

  // Khi messages rỗng (sau reset), tự động gửi lại câu hỏi đầu tiên
  useEffect(() => {
    if (messages.length === 0 && !waiting) {
      sendMessage({ sender: 'user', text: '' });
    }
    // eslint-disable-next-line
  }, [messages]);

  return (
    <Box maxWidth={480} mx="auto" mt={6}>
      <Paper elevation={6} sx={{ borderRadius: 2, overflow: 'hidden', boxShadow: 8, p: 0 }}>
        <AppBar position="static" color="primary" elevation={0} sx={{ borderRadius: 0, background: 'linear-gradient(90deg, #1976d2 0%, #ff4081 100%)', boxShadow: 'none' }}>
          <Toolbar variant="dense" sx={{ minHeight: 48 }}>
            <SmartToyIcon sx={{ mr: 1 }} />
            <Typography variant="h6" sx={{ flexGrow: 1, fontWeight: 600, fontSize: 18 }}>
              Healthcare Chatbot
            </Typography>
            <IconButton color="inherit" onClick={handleReset} size="small">
              <RestartAltIcon />
            </IconButton>
          </Toolbar>
        </AppBar>
        <Box ref={chatBodyRef} sx={{
          minHeight: 320,
          maxHeight: 400,
          overflowY: 'auto',
          background: 'linear-gradient(135deg, #e3f2fd 0%, #fce4ec 100%)',
          px: 2, py: 2,
          display: 'flex', flexDirection: 'column', gap: 1.5
        }}>
          {messages.map((msg, idx) => (
            <Fade in key={idx} timeout={400}>
              <Box display="flex" justifyContent={msg.sender === 'user' ? 'flex-end' : 'flex-start'} alignItems="flex-end">
                {msg.sender === 'bot' && (
                  <Avatar sx={{ bgcolor: 'primary.main', width: 32, height: 32, mr: 1 }}>
                    <SmartToyIcon fontSize="small" />
                  </Avatar>
                )}
                <Box
                  sx={{
                    bgcolor: msg.sender === 'user' ? 'primary.light' : 'grey.100',
                    color: 'text.primary',
                    px: 2,
                    py: 1,
                    borderRadius: 3,
                    maxWidth: 280,
                    boxShadow: 1,
                    fontSize: 16,
                    wordBreak: 'break-word',
                  }}
                >
                  {msg.text}
                </Box>
                {msg.sender === 'user' && (
                  <Avatar sx={{ bgcolor: 'secondary.main', width: 32, height: 32, ml: 1 }}>
                    <PersonIcon fontSize="small" />
                  </Avatar>
                )}
              </Box>
            </Fade>
          ))}
          {waiting && (
            <Box display="flex" justifyContent="center" alignItems="center" mt={1}>
              <CircularProgress size={24} color="primary" />
            </Box>
          )}
        </Box>
        {/* Nếu bot vừa hỏi "Bạn có bị ... không?" thì hiện nút Có/Không */}
        {messages.length > 0 && messages[messages.length - 1].sender === 'bot' && messages[messages.length - 1].text.startsWith('Bạn có bị') && (
          <Stack direction="row" spacing={2} justifyContent="center" sx={{ p: 2 }}>
            <Button variant="contained" color="success" size="large" onClick={() => handleAnswer('có')} disabled={waiting} sx={{ borderRadius: 3, minWidth: 100 }}>
              Có
            </Button>
            <Button variant="contained" color="error" size="large" onClick={() => handleAnswer('không')} disabled={waiting} sx={{ borderRadius: 3, minWidth: 100 }}>
              Không
            </Button>
          </Stack>
        )}
        {/* Chỉ hiển thị input nhập tự do ở câu hỏi đầu tiên hoặc khi không nhận diện được triệu chứng */}
        {(isFirstBotQuestion || isNotFoundSymptom) && (
          <Box sx={{ display: 'flex', gap: 1, p: 2, borderTop: '1px solid #eee', background: '#fff' }}>
            <TextField
              inputRef={inputRef}
              value={input}
              onChange={e => setInput(e.target.value)}
              onKeyDown={e => e.key === 'Enter' && handleSend()}
              placeholder="Nhập triệu chứng..."
              disabled={waiting}
              fullWidth
              size="small"
              sx={{ borderRadius: 3, bgcolor: 'grey.50' }}
            />
            <Button
              variant="contained"
              color="primary"
              endIcon={<SendIcon />}
              onClick={handleSend}
              disabled={waiting || !input.trim()}
              sx={{ borderRadius: 3, minWidth: 48 }}
            >
              Gửi
            </Button>
          </Box>
        )}
      </Paper>
    </Box>
  );
};

export default Chatbot;
</file>

<file path="frontend/src/hooks/useApi.ts">
import { useState, useCallback } from 'react';
import axios, { AxiosRequestConfig, AxiosError } from 'axios';

interface UseApiReturn<T> {
  data: T | null;
  loading: boolean;
  error: string | null;
  execute: (config: AxiosRequestConfig) => Promise<void>;
}

export const useApi = <T>(): UseApiReturn<T> => {
  const [data, setData] = useState<T | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const execute = useCallback(async (config: AxiosRequestConfig) => {
    try {
      setLoading(true);
      setError(null);
      const response = await axios(config);
      setData(response.data);
    } catch (err) {
      const error = err as AxiosError;
      setError(error.message || 'An error occurred');
    } finally {
      setLoading(false);
    }
  }, []);

  return { data, loading, error, execute };
};
</file>

<file path="frontend/src/hooks/useAppDispatch.ts">
import { useDispatch } from 'react-redux';
import type { AppDispatch } from '../store';

export const useAppDispatch = () => useDispatch<AppDispatch>();
</file>

<file path="frontend/src/hooks/useAppSelector.ts">
import { useSelector, TypedUseSelectorHook } from 'react-redux';
import type { RootState } from '../store';

export const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;
</file>

<file path="frontend/src/hooks/useError.ts">
import { useState, useCallback } from 'react';
import { useNotification } from './useNotification';

export const useError = () => {
  const [error, setError] = useState<string | null>(null);
  const { showError } = useNotification();

  const handleError = useCallback((error: unknown) => {
    let errorMessage = 'An unexpected error occurred';

    if (error instanceof Error) {
      errorMessage = error.message;
    } else if (typeof error === 'string') {
      errorMessage = error;
    }

    setError(errorMessage);
    showError(errorMessage);
  }, [showError]);

  const clearError = useCallback(() => {
    setError(null);
  }, []);

  const withErrorHandling = useCallback(async <T>(callback: () => Promise<T>): Promise<T | null> => {
    try {
      clearError();
      return await callback();
    } catch (error) {
      handleError(error);
      return null;
    }
  }, [clearError, handleError]);

  return {
    error,
    handleError,
    clearError,
    withErrorHandling,
  };
};
</file>

<file path="frontend/src/hooks/useFormValidation.ts">
import { useFormik } from 'formik';
import * as Yup from 'yup';

interface ValidationSchemas {
  login: typeof loginSchema;
  register: typeof registerSchema;
  appointment: typeof appointmentSchema;
  doctor: typeof doctorSchema;
  patient: typeof patientSchema;
  labResult: typeof labResultSchema;
}

const loginSchema = Yup.object().shape({
  email: Yup.string()
    .email('Invalid email address')
    .required('Email is required'),
  password: Yup.string()
    .min(8, 'Password must be at least 8 characters')
    .required('Password is required'),
});

const registerSchema = Yup.object().shape({
  name: Yup.string()
    .min(2, 'Name must be at least 2 characters')
    .required('Name is required'),
  email: Yup.string()
    .email('Invalid email address')
    .required('Email is required'),
  password: Yup.string()
    .min(8, 'Password must be at least 8 characters')
    .required('Password is required'),
  confirmPassword: Yup.string()
    .oneOf([Yup.ref('password')], 'Passwords must match')
    .required('Confirm password is required'),
  role: Yup.string()
    .oneOf(['patient', 'doctor'], 'Invalid role')
    .required('Role is required'),
});

const appointmentSchema = Yup.object().shape({
  doctorId: Yup.string()
    .required('Doctor is required'),
  date: Yup.date()
    .min(new Date(), 'Date cannot be in the past')
    .required('Date is required'),
  time: Yup.string()
    .required('Time is required'),
});

const doctorSchema = Yup.object().shape({
  name: Yup.string()
    .min(2, 'Name must be at least 2 characters')
    .required('Name is required'),
  email: Yup.string()
    .email('Invalid email address')
    .required('Email is required'),
  specialization: Yup.string()
    .required('Specialization is required'),
  phone: Yup.string()
    .matches(/^\+?[\d\s-]+$/, 'Invalid phone number')
    .required('Phone number is required'),
  address: Yup.string()
    .required('Address is required'),
});

const patientSchema = Yup.object().shape({
  name: Yup.string()
    .min(2, 'Name must be at least 2 characters')
    .required('Name is required'),
  email: Yup.string()
    .email('Invalid email address')
    .required('Email is required'),
  phone: Yup.string()
    .matches(/^\+?[\d\s-]+$/, 'Invalid phone number')
    .required('Phone number is required'),
  address: Yup.string()
    .required('Address is required'),
  dateOfBirth: Yup.date()
    .max(new Date(), 'Date of birth cannot be in the future')
    .required('Date of birth is required'),
  gender: Yup.string()
    .oneOf(['male', 'female', 'other'], 'Invalid gender')
    .required('Gender is required'),
});

const labResultSchema = Yup.object().shape({
  patientId: Yup.string()
    .required('Patient is required'),
  testName: Yup.string()
    .required('Test name is required'),
  testDate: Yup.date()
    .required('Test date is required'),
  result: Yup.string()
    .required('Result is required'),
  notes: Yup.string(),
});

export const useFormValidation = <T extends keyof ValidationSchemas>(
  formType: T,
  initialValues: any,
  onSubmit: (values: any) => void,
) => {
  const schemas: ValidationSchemas = {
    login: loginSchema,
    register: registerSchema,
    appointment: appointmentSchema,
    doctor: doctorSchema,
    patient: patientSchema,
    labResult: labResultSchema,
  };

  const formik = useFormik({
    initialValues,
    validationSchema: schemas[formType],
    onSubmit,
  });

  return formik;
};
</file>

<file path="frontend/src/hooks/useLabResults.ts">
export {};
</file>

<file path="frontend/src/hooks/useLoading.ts">
import { useState, useCallback } from 'react';

export const useLoading = (initialState = false) => {
  const [isLoading, setIsLoading] = useState(initialState);

  const startLoading = useCallback(() => {
    setIsLoading(true);
  }, []);

  const stopLoading = useCallback(() => {
    setIsLoading(false);
  }, []);

  const withLoading = useCallback(async <T>(callback: () => Promise<T>): Promise<T> => {
    try {
      startLoading();
      return await callback();
    } finally {
      stopLoading();
    }
  }, [startLoading, stopLoading]);

  return {
    isLoading,
    startLoading,
    stopLoading,
    withLoading,
  };
};
</file>

<file path="frontend/src/hooks/useNotification.ts">
import { useCallback } from 'react';
import { useSnackbar, OptionsObject } from 'notistack';

type NotificationType = 'success' | 'error' | 'warning' | 'info';

export const useNotification = () => {
  const { enqueueSnackbar } = useSnackbar();

  const showNotification = useCallback((message: string, type: NotificationType = 'info', options?: Partial<OptionsObject>) => {
    enqueueSnackbar(message, {
      variant: type,
      anchorOrigin: {
        vertical: 'top',
        horizontal: 'right',
      },
      ...options,
    });
  }, [enqueueSnackbar]);

  const showSuccess = useCallback((message: string, options?: Partial<OptionsObject>) => {
    showNotification(message, 'success', options);
  }, [showNotification]);

  const showError = useCallback((message: string, options?: Partial<OptionsObject>) => {
    showNotification(message, 'error', options);
  }, [showNotification]);

  const showWarning = useCallback((message: string, options?: Partial<OptionsObject>) => {
    showNotification(message, 'warning', options);
  }, [showNotification]);

  const showInfo = useCallback((message: string, options?: Partial<OptionsObject>) => {
    showNotification(message, 'info', options);
  }, [showNotification]);

  return {
    showNotification,
    showSuccess,
    showError,
    showWarning,
    showInfo,
  };
};
</file>

<file path="frontend/src/hooks/usePagination.ts">
import { useState, useCallback, useMemo } from 'react';

interface PaginationOptions {
  initialPage?: number;
  initialRowsPerPage?: number;
  rowsPerPageOptions?: number[];
}

export const usePagination = <T>({
  initialPage = 0,
  initialRowsPerPage = 10,
  rowsPerPageOptions = [5, 10, 25, 50],
}: PaginationOptions = {}) => {
  const [page, setPage] = useState(initialPage);
  const [rowsPerPage, setRowsPerPage] = useState(initialRowsPerPage);

  const handleChangePage = useCallback((_event: unknown, newPage: number) => {
    setPage(newPage);
  }, []);

  const handleChangeRowsPerPage = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {
    setRowsPerPage(parseInt(event.target.value, 10));
    setPage(0);
  }, []);

  const paginateData = useCallback((data: T[]) => {
    const startIndex = page * rowsPerPage;
    const endIndex = startIndex + rowsPerPage;
    return data.slice(startIndex, endIndex);
  }, [page, rowsPerPage]);

  const paginationProps = useMemo(() => ({
    page,
    rowsPerPage,
    rowsPerPageOptions,
    onPageChange: handleChangePage,
    onRowsPerPageChange: handleChangeRowsPerPage,
  }), [page, rowsPerPage, rowsPerPageOptions, handleChangePage, handleChangeRowsPerPage]);

  return {
    page,
    rowsPerPage,
    handleChangePage,
    handleChangeRowsPerPage,
    paginateData,
    paginationProps,
  };
};
</file>

<file path="frontend/src/hooks/usePatients.ts">
import { useCallback } from 'react';
import { useAppDispatch } from './useAppDispatch';
import { useAppSelector } from './useAppSelector';
import { RootState } from '../store';
import {
  setPatients,
  addPatient,
  updatePatient,
  deletePatient,
  setLoading,
  setError,
} from '../store/slices/patientSlice';
import axios from 'axios';
import { Patient } from '../types/user';

interface PatientState {
  patients: Patient[];
  loading: boolean;
  error: string | null;
}

const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8004';

export const usePatients = () => {
  const dispatch = useAppDispatch();
  const patients = useAppSelector((state: RootState) => (state.patients as PatientState).patients);
  const loading = useAppSelector((state: RootState) => (state.patients as PatientState).loading);
  const error = useAppSelector((state: RootState) => (state.patients as PatientState).error);

  const fetchPatients = useCallback(async () => {
    try {
      dispatch(setLoading(true));
      const token = localStorage.getItem('token');
      const response = await axios.get(`${API_URL}/api/patients/`, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });
      if (response.data) {
        dispatch(setPatients(response.data));
      }
    } catch (error) {
      dispatch(setError('Failed to fetch patients'));
      console.error('Error fetching patients:', error);
    } finally {
      dispatch(setLoading(false));
    }
  }, [dispatch]);

  const createPatient = useCallback(async (patientData: Omit<Patient, 'id'>) => {
    try {
      dispatch(setLoading(true));
      const token = localStorage.getItem('token');
      const response = await axios.post(`${API_URL}/api/patients/`, patientData, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });
      if (response.data) {
        dispatch(addPatient(response.data));
      }
    } catch (error) {
      dispatch(setError('Failed to create patient'));
      console.error('Error creating patient:', error);
    } finally {
      dispatch(setLoading(false));
    }
  }, [dispatch]);

  const updatePatientById = useCallback(async (id: string, patientData: Partial<Patient>) => {
    try {
      dispatch(setLoading(true));
      const token = localStorage.getItem('token');
      const response = await axios.put(`${API_URL}/api/patients/${id}/`, patientData, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });
      if (response.data) {
        dispatch(updatePatient(response.data));
      }
    } catch (error) {
      dispatch(setError('Failed to update patient'));
      console.error('Error updating patient:', error);
    } finally {
      dispatch(setLoading(false));
    }
  }, [dispatch]);

  const deletePatientById = useCallback(async (id: string) => {
    try {
      dispatch(setLoading(true));
      const token = localStorage.getItem('token');
      await axios.delete(`${API_URL}/api/patients/${id}/`, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });
      dispatch(deletePatient(id));
    } catch (error) {
      dispatch(setError('Failed to delete patient'));
      console.error('Error deleting patient:', error);
    } finally {
      dispatch(setLoading(false));
    }
  }, [dispatch]);

  return {
    patients,
    loading,
    error,
    fetchPatients,
    createPatient,
    updatePatient: updatePatientById,
    deletePatient: deletePatientById,
  };
};
</file>

<file path="frontend/src/hooks/useProtectedRoute.ts">
export {};
</file>

<file path="frontend/src/hooks/useSearch.ts">
import { useState, useCallback, useMemo } from 'react';

interface SearchOptions<T> {
  searchableFields?: (keyof T)[];
  initialSearchTerm?: string;
}

export const useSearch = <T extends Record<string, any>>({
  searchableFields,
  initialSearchTerm = ''
}: SearchOptions<T> = {}) => {
  const [searchTerm, setSearchTerm] = useState(initialSearchTerm);

  const handleSearchChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {
    setSearchTerm(event.target.value);
  }, []);

  const searchData = useCallback(
    (data: T[]) => {
      if (!searchTerm) return data;
      if (!searchableFields) return data;

      return data.filter((item) =>
        searchableFields.some((field) => {
          const value = item[field];
          if (typeof value === 'string') {
            return value.toLowerCase().includes(searchTerm.toLowerCase());
          }
          return false;
        })
      );
    },
    [searchTerm, searchableFields]
  );

  const searchProps = useMemo(
    () => ({
      value: searchTerm,
      onChange: handleSearchChange,
      placeholder: 'Search...'
    }),
    [searchTerm, handleSearchChange]
  );

  return {
    searchTerm,
    handleSearchChange,
    searchData,
    searchProps
  };
};

export {};
</file>

<file path="frontend/src/hooks/useSorting.ts">
import { useState, useCallback, useMemo } from 'react';

type Order = 'asc' | 'desc';

interface SortingOptions<T> {
  initialOrderBy?: keyof T;
  initialOrder?: Order;
}

export const useSorting = <T extends Record<string, any>>({
  initialOrderBy,
  initialOrder = 'asc',
}: SortingOptions<T> = {}) => {
  const [orderBy, setOrderBy] = useState<keyof T | undefined>(initialOrderBy);
  const [order, setOrder] = useState<Order>(initialOrder);

  const handleRequestSort = useCallback((property: keyof T) => {
    const isAsc = orderBy === property && order === 'asc';
    setOrder(isAsc ? 'desc' : 'asc');
    setOrderBy(property);
  }, [order, orderBy]);

  const sortData = useCallback((data: T[]) => {
    if (!orderBy) {
      return data;
    }

    return [...data].sort((a, b) => {
      const aValue = a[orderBy];
      const bValue = b[orderBy];

      if (aValue === bValue) {
        return 0;
      }

      if (aValue === null || aValue === undefined) {
        return order === 'asc' ? -1 : 1;
      }

      if (bValue === null || bValue === undefined) {
        return order === 'asc' ? 1 : -1;
      }

      if (typeof aValue === 'string' && typeof bValue === 'string') {
        return order === 'asc'
          ? aValue.localeCompare(bValue)
          : bValue.localeCompare(aValue);
      }

      return order === 'asc'
        ? aValue < bValue ? -1 : 1
        : bValue < aValue ? -1 : 1;
    });
  }, [order, orderBy]);

  const sortingProps = useMemo(() => ({
    order,
    orderBy,
    onRequestSort: handleRequestSort,
  }), [order, orderBy, handleRequestSort]);

  return {
    order,
    orderBy,
    handleRequestSort,
    sortData,
    sortingProps,
  };
};
</file>

<file path="frontend/src/hooks/useTheme.ts">
import { useCallback } from 'react';
import { useAppDispatch } from './useAppDispatch';
import { useAppSelector } from './useAppSelector';
import { RootState } from '../store';
import { setTheme as setThemeAction } from '../store/slices/themeSlice';

type ThemeMode = 'light' | 'dark';

export const useTheme = () => {
  const dispatch = useAppDispatch();
  const theme = useAppSelector((state: RootState) => state.theme.mode);

  const toggleTheme = useCallback(() => {
    const newTheme = theme === 'light' ? 'dark' : 'light';
    localStorage.setItem('theme', newTheme);
    dispatch(setThemeAction(newTheme));
  }, [dispatch, theme]);

  const setTheme = useCallback((newTheme: ThemeMode) => {
    localStorage.setItem('theme', newTheme);
    dispatch(setThemeAction(newTheme));
  }, [dispatch]);

  return {
    theme,
    toggleTheme,
    setTheme,
  };
};
</file>

<file path="frontend/src/hooks/useUsers.ts">
import { useCallback } from 'react';
import { useAppDispatch } from './useAppDispatch';
import { useAppSelector } from './useAppSelector';
import { useApi } from './useApi';
import { RootState } from '../store';
import {
  setUsers,
  addUser,
  updateUser,
  deleteUser,
  setLoading,
  setError,
} from '../store/slices/userSlice';
import axios from 'axios';

interface User {
  id: string;
  name: string;
  email: string;
  role: 'admin' | 'doctor' | 'patient';
  status: 'active' | 'inactive';
}

interface ApiResponse<T> {
  status: number;
  data: T;
}

interface UserState {
  users: User[];
  loading: boolean;
  error: string | null;
}

export const useUsers = () => {
  const dispatch = useAppDispatch();
  const { execute: usersApi } = useApi<User[]>();
  const users = useAppSelector((state: RootState) => (state.users as UserState).users);
  const loading = useAppSelector((state: RootState) => (state.users as UserState).loading);
  const error = useAppSelector((state: RootState) => (state.users as UserState).error);

  const fetchUsers = useCallback(async () => {
    try {
      const token = localStorage.getItem('token');
      const response = await axios.get<ApiResponse<User[]>>('/api/users', {
        headers: {
          Authorization: `Bearer ${token}`
        }
      });
      if (response.data.status === 200) {
        dispatch(setUsers(response.data.data));
      }
    } catch (error) {
      dispatch(setError('Failed to fetch users'));
    }
  }, [dispatch]);

  const createUser = useCallback(async (userData: Omit<User, 'id'>) => {
    try {
      const token = localStorage.getItem('token');
      const response = await axios.post<ApiResponse<User>>('/api/users', userData, {
        headers: {
          Authorization: `Bearer ${token}`
        }
      });
      if (response.data.status === 201) {
        dispatch(addUser(response.data.data));
      }
    } catch (error) {
      dispatch(setError('Failed to create user'));
    }
  }, [dispatch]);

  const updateUserById = useCallback(async (id: string, userData: Partial<User>) => {
    try {
      const token = localStorage.getItem('token');
      const response = await axios.put<ApiResponse<User>>(`/api/users/${id}`, userData, {
        headers: {
          Authorization: `Bearer ${token}`
        }
      });
      if (response.data.status === 200) {
        dispatch(updateUser(response.data.data));
      }
    } catch (error) {
      dispatch(setError('Failed to update user'));
    }
  }, [dispatch]);

  const deleteUserById = useCallback(async (id: string) => {
    try {
      dispatch(setLoading(true));
      await usersApi({
        method: 'DELETE',
        url: `/api/users/${id}`,
      });
      dispatch(deleteUser(id));
    } catch (error) {
      dispatch(setError('Failed to delete user'));
    } finally {
      dispatch(setLoading(false));
    }
  }, [dispatch, usersApi]);

  return {
    users,
    loading,
    error,
    fetchUsers,
    createUser,
    updateUser: updateUserById,
    deleteUser: deleteUserById,
  };
};
</file>

<file path="frontend/src/index.css">
body {
  margin: 0;
  padding: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  box-sizing: border-box;
  background: none;
}

*, *::before, *::after {
  box-sizing: inherit;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}
</file>

<file path="frontend/src/logo.svg">
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>
</file>

<file path="frontend/src/pages/ChatbotPage.tsx">
import React from 'react';
import Chatbot from '../components/Chatbot';

const ChatbotPage: React.FC = () => <Chatbot />;
 
export default ChatbotPage;
</file>

<file path="frontend/src/pages/Home.tsx">
import React from 'react';
import { useNavigate } from 'react-router-dom';
import {
  Box,
  Container,
  Card,
  CardContent,
  Typography,
  Button,
  Grid,
  Avatar
} from '@mui/material';
import CalendarMonthIcon from '@mui/icons-material/CalendarMonth';
import AssignmentIcon from '@mui/icons-material/Assignment';
import QueryStatsIcon from '@mui/icons-material/QueryStats';
import ChatIcon from '@mui/icons-material/Chat';

const features = [
  {
    title: 'Appointments',
    desc: 'Manage your appointments and schedule new ones.',
    icon: <CalendarMonthIcon fontSize="large" color="primary" />,
    btn: 'Book Now',
    to: '/appointments',
  },
  {
    title: 'Medical Records',
    desc: 'Access and update your medical records.',
    icon: <AssignmentIcon fontSize="large" color="secondary" />,
    btn: 'View Records',
    to: '/records',
    disabled: true,
  },
  {
    title: 'Health Predictions',
    desc: 'Get AI-powered health predictions and insights.',
    icon: <QueryStatsIcon fontSize="large" color="success" />,
    btn: 'Check Symptoms',
    to: '/prediction',
  },
  {
    title: 'Healthcare Assistant',
    desc: 'Chat with our AI assistant for medical advice and information.',
    icon: <ChatIcon fontSize="large" color="info" />,
    btn: 'Start Chat',
    to: '/chatbot',
  },
];

const Home: React.FC = () => {
  const navigate = useNavigate();

  return (
    <Container maxWidth="lg">
      <Box sx={{ mt: 6, mb: 4, textAlign: 'center' }}>
        <Avatar
          src="https://cdn-icons-png.flaticon.com/512/3774/3774299.png"
          sx={{ width: 96, height: 96, mx: 'auto', mb: 2, boxShadow: 3 }}
        />
        <Typography variant="h2" fontWeight={700} color="primary.main" gutterBottom>
          Welcome to Healthcare Portal
        </Typography>
        <Typography variant="h5" color="text.secondary" mb={4}>
          Smart, modern, and friendly healthcare management for everyone
        </Typography>
        <Grid container spacing={4} justifyContent="center">
          {features.map((f, idx) => (
            <Grid item xs={12} sm={6} md={3} key={f.title}>
              <Card
                sx={{
                  p: 2,
                  borderRadius: 2,
                  boxShadow: 4,
                  transition: 'transform 0.2s, box-shadow 0.2s',
                  '&:hover': {
                    transform: 'translateY(-8px) scale(1.03)',
                    boxShadow: 8,
                  },
                  opacity: f.disabled ? 0.5 : 1,
                  cursor: f.disabled ? 'not-allowed' : 'pointer',
                }}
                onClick={() => !f.disabled && navigate(f.to)}
              >
                <Box sx={{ display: 'flex', justifyContent: 'center', mb: 2 }}>
                  {f.icon}
                </Box>
                <CardContent sx={{ p: 2, borderRadius: 2 }}>
                  <Typography variant="h5" fontWeight={600} gutterBottom>
                    {f.title}
                  </Typography>
                  <Typography variant="body1" color="text.secondary" mb={2}>
                    {f.desc}
                  </Typography>
                  <Button
                    variant="contained"
                    color="primary"
                    size="large"
                    fullWidth
                    disabled={f.disabled}
                    sx={{ fontWeight: 600, borderRadius: 2 }}
                  >
                    {f.btn}
                  </Button>
                </CardContent>
              </Card>
            </Grid>
          ))}
        </Grid>
      </Box>
    </Container>
  );
};

export default Home;
</file>

<file path="frontend/src/react-app-env.d.ts">
/// <reference types="react-scripts" />
</file>

<file path="frontend/src/reportWebVitals.ts">
import { ReportHandler } from 'web-vitals';

const reportWebVitals = (onPerfEntry?: ReportHandler) => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;
</file>

<file path="frontend/src/setupTests.ts">
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';
</file>

<file path="frontend/src/store/index.ts">
import { configureStore } from '@reduxjs/toolkit';
import appointmentReducer from './slices/appointmentSlice';
import doctorReducer from './slices/doctorSlice';
import patientReducer from './slices/patientSlice';
import userReducer from './slices/userSlice';
import authReducer from './slices/authSlice';
import labReducer from './slices/labSlice';
import themeReducer from './slices/themeSlice';

export const store = configureStore({
  reducer: {
    auth: authReducer,
    appointments: appointmentReducer,
    doctors: doctorReducer,
    patients: patientReducer,
    users: userReducer,
    lab: labReducer,
    theme: themeReducer,
  },
});

export type RootState = ReturnType<typeof store.getState>;
export type AppDispatch = typeof store.dispatch;
</file>

<file path="frontend/src/store/slices/appointmentSlice.ts">
import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import { Appointment } from '../../types/appointment';

interface AppointmentState {
  appointments: Appointment[];
  loading: boolean;
  error: string | null;
}

const initialState: AppointmentState = {
  appointments: [],
  loading: false,
  error: null,
};

const appointmentSlice = createSlice({
  name: 'appointments',
  initialState,
  reducers: {
    setAppointments: (state: AppointmentState, action: PayloadAction<Appointment[]>) => {
      state.appointments = action.payload;
    },
    addAppointment: (state: AppointmentState, action: PayloadAction<Appointment>) => {
      state.appointments.push(action.payload);
    },
    updateAppointment: (state: AppointmentState, action: PayloadAction<Appointment>) => {
      const index = state.appointments.findIndex((a: Appointment) => a.id === action.payload.id);
      if (index !== -1) {
        state.appointments[index] = action.payload;
      }
    },
    deleteAppointment: (state: AppointmentState, action: PayloadAction<string>) => {
      state.appointments = state.appointments.filter((a: Appointment) => a.id !== action.payload);
    },
    setLoading: (state: AppointmentState, action: PayloadAction<boolean>) => {
      state.loading = action.payload;
    },
    setError: (state: AppointmentState, action: PayloadAction<string | null>) => {
      state.error = action.payload;
    },
  },
});

export const {
  setAppointments,
  addAppointment,
  updateAppointment,
  deleteAppointment,
  setLoading,
  setError,
} = appointmentSlice.actions;

export default appointmentSlice.reducer;
</file>

<file path="frontend/src/store/slices/doctorSlice.ts">
import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import { Doctor } from '../../types/user';

interface DoctorState {
  doctors: Doctor[];
  loading: boolean;
  error: string | null;
}

const initialState: DoctorState = {
  doctors: [],
  loading: false,
  error: null,
};

const doctorSlice = createSlice({
  name: 'doctors',
  initialState,
  reducers: {
    setDoctors: (state, action: PayloadAction<Doctor[]>) => {
      state.doctors = action.payload;
    },
    addDoctor: (state, action: PayloadAction<Doctor>) => {
      state.doctors.push(action.payload);
    },
    updateDoctor: (state, action: PayloadAction<Doctor>) => {
      const index = state.doctors.findIndex(doctor => doctor.id === action.payload.id);
      if (index !== -1) {
        state.doctors[index] = action.payload;
      }
    },
    deleteDoctor: (state, action: PayloadAction<string>) => {
      state.doctors = state.doctors.filter(doctor => doctor.id !== action.payload);
    },
    setLoading: (state, action: PayloadAction<boolean>) => {
      state.loading = action.payload;
    },
    setError: (state, action: PayloadAction<string | null>) => {
      state.error = action.payload;
    },
  },
});

export const {
  setDoctors,
  addDoctor,
  updateDoctor,
  deleteDoctor,
  setLoading,
  setError,
} = doctorSlice.actions;

export default doctorSlice.reducer;
</file>

<file path="frontend/src/store/slices/labSlice.ts">
import { createSlice, PayloadAction } from '@reduxjs/toolkit';

interface LabResult {
  id: string;
  patientId: string;
  testName: string;
  testDate: string;
  result: string;
  status: 'pending' | 'completed';
  notes: string;
}

interface LabState {
  results: LabResult[];
  loading: boolean;
  error: string | null;
}

const initialState: LabState = {
  results: [],
  loading: false,
  error: null,
};

const labSlice = createSlice({
  name: 'lab',
  initialState,
  reducers: {
    setResults: (state, action: PayloadAction<LabResult[]>) => {
      state.results = action.payload;
    },
    addResult: (state, action: PayloadAction<LabResult>) => {
      state.results.push(action.payload);
    },
    updateResult: (state, action: PayloadAction<LabResult>) => {
      const index = state.results.findIndex(r => r.id === action.payload.id);
      if (index !== -1) {
        state.results[index] = action.payload;
      }
    },
    deleteResult: (state, action: PayloadAction<string>) => {
      state.results = state.results.filter(r => r.id !== action.payload);
    },
    setLoading: (state, action: PayloadAction<boolean>) => {
      state.loading = action.payload;
    },
    setError: (state, action: PayloadAction<string | null>) => {
      state.error = action.payload;
    },
  },
});

export const {
  setResults,
  addResult,
  updateResult,
  deleteResult,
  setLoading,
  setError,
} = labSlice.actions;

export default labSlice.reducer;
</file>

<file path="frontend/src/store/slices/patientSlice.ts">
import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import { Patient } from '../../types/user';

interface PatientState {
  patients: Patient[];
  loading: boolean;
  error: string | null;
}

const initialState: PatientState = {
  patients: [],
  loading: false,
  error: null,
};

const patientSlice = createSlice({
  name: 'patients',
  initialState,
  reducers: {
    setPatients: (state, action: PayloadAction<Patient[]>) => {
      state.patients = action.payload;
    },
    addPatient: (state, action: PayloadAction<Patient>) => {
      state.patients.push(action.payload);
    },
    updatePatient: (state, action: PayloadAction<Patient>) => {
      const index = state.patients.findIndex(patient => patient.id === action.payload.id);
      if (index !== -1) {
        state.patients[index] = action.payload;
      }
    },
    deletePatient: (state, action: PayloadAction<string>) => {
      state.patients = state.patients.filter(patient => patient.id !== action.payload);
    },
    setLoading: (state, action: PayloadAction<boolean>) => {
      state.loading = action.payload;
    },
    setError: (state, action: PayloadAction<string | null>) => {
      state.error = action.payload;
    },
  },
});

export const {
  setPatients,
  addPatient,
  updatePatient,
  deletePatient,
  setLoading,
  setError,
} = patientSlice.actions;

export default patientSlice.reducer;
</file>

<file path="frontend/src/store/slices/themeSlice.ts">
import { createSlice, PayloadAction } from '@reduxjs/toolkit';

type ThemeMode = 'light' | 'dark';

interface ThemeState {
  mode: ThemeMode;
}

const initialState: ThemeState = {
  mode: (localStorage.getItem('theme') as ThemeMode) || 'light',
};

const themeSlice = createSlice({
  name: 'theme',
  initialState,
  reducers: {
    setTheme: (state, action: PayloadAction<ThemeMode>) => {
      state.mode = action.payload;
    },
  },
});

export const { setTheme } = themeSlice.actions;

export default themeSlice.reducer;
</file>

<file path="frontend/src/store/slices/userSlice.ts">
import { createSlice, PayloadAction } from '@reduxjs/toolkit';

interface User {
  id: string;
  name: string;
  email: string;
  role: 'admin' | 'doctor' | 'patient';
  status: 'active' | 'inactive';
}

interface UserState {
  currentUser: User | null;
  users: User[];
  loading: boolean;
  error: string | null;
}

const initialState: UserState = {
  currentUser: null,
  users: [],
  loading: false,
  error: null,
};

const userSlice = createSlice({
  name: 'users',
  initialState,
  reducers: {
    setCurrentUser: (state, action: PayloadAction<User | null>) => {
      state.currentUser = action.payload;
    },
    setUsers: (state, action: PayloadAction<User[]>) => {
      state.users = action.payload;
    },
    addUser: (state, action: PayloadAction<User>) => {
      state.users.push(action.payload);
    },
    updateUser: (state, action: PayloadAction<User>) => {
      const index = state.users.findIndex(u => u.id === action.payload.id);
      if (index !== -1) {
        state.users[index] = action.payload;
      }
      if (state.currentUser?.id === action.payload.id) {
        state.currentUser = action.payload;
      }
    },
    deleteUser: (state, action: PayloadAction<string>) => {
      state.users = state.users.filter(u => u.id !== action.payload);
      if (state.currentUser?.id === action.payload) {
        state.currentUser = null;
      }
    },
    setLoading: (state, action: PayloadAction<boolean>) => {
      state.loading = action.payload;
    },
    setError: (state, action: PayloadAction<string | null>) => {
      state.error = action.payload;
    },
  },
});

export const {
  setCurrentUser,
  setUsers,
  addUser,
  updateUser,
  deleteUser,
  setLoading,
  setError,
} = userSlice.actions;

export default userSlice.reducer;
</file>

<file path="frontend/src/theme.ts">
import { createTheme } from '@mui/material/styles';

const theme = createTheme({
  palette: {
    primary: {
      main: '#1976d2',
      light: '#63a4ff',
      dark: '#004ba0',
      contrastText: '#fff',
    },
    secondary: {
      main: '#ff4081',
      light: '#ff79b0',
      dark: '#c60055',
      contrastText: '#fff',
    },
    background: {
      default: 'linear-gradient(135deg, #e3f2fd 0%, #fce4ec 100%)',
      paper: '#ffffff',
    },
    success: {
      main: '#4caf50',
      contrastText: '#fff',
    },
    error: {
      main: '#f44336',
      contrastText: '#fff',
    },
    warning: {
      main: '#ff9800',
      contrastText: '#fff',
    },
    info: {
      main: '#2196f3',
      contrastText: '#fff',
    },
  },
  typography: {
    fontFamily: 'Poppins, Roboto, Helvetica, Arial, sans-serif',
    h1: {
      fontSize: '2.8rem',
      fontWeight: 700,
      letterSpacing: '-1px',
    },
    h2: {
      fontSize: '2.2rem',
      fontWeight: 600,
    },
    h3: {
      fontSize: '1.8rem',
      fontWeight: 600,
    },
    h4: {
      fontSize: '1.4rem',
      fontWeight: 500,
    },
    h5: {
      fontSize: '1.1rem',
      fontWeight: 500,
    },
    h6: {
      fontSize: '1rem',
      fontWeight: 500,
    },
    button: {
      textTransform: 'none',
      fontWeight: 600,
      letterSpacing: '0.5px',
    },
  },
  shape: {
    borderRadius: 16,
  },
  components: {
    MuiButton: {
      styleOverrides: {
        root: {
          borderRadius: 12,
          boxShadow: '0 2px 8px rgba(25, 118, 210, 0.08)',
          fontWeight: 600,
          transition: 'all 0.2s',
        },
      },
    },
    MuiCard: {
      styleOverrides: {
        root: {
          borderRadius: 20,
          boxShadow: '0 6px 24px rgba(25, 118, 210, 0.10)',
          transition: 'box-shadow 0.3s',
          '&:hover': {
            boxShadow: '0 12px 32px rgba(25, 118, 210, 0.18)',
          },
        },
      },
    },
    MuiPaper: {
      styleOverrides: {
        root: {
          borderRadius: 18,
        },
      },
    },
    MuiAppBar: {
      styleOverrides: {
        root: {
          background: 'linear-gradient(90deg, #1976d2 0%, #ff4081 100%)',
          boxShadow: '0 2px 8px rgba(25, 118, 210, 0.10)',
        },
      },
    },
  },
});

export default theme;
</file>

<file path="frontend/src/types/notistack.d.ts">
declare module 'notistack' {
  import { SnackbarProps } from '@mui/material/Snackbar';
  import { AlertProps } from '@mui/material/Alert';

  export interface OptionsObject {
    variant?: 'default' | 'error' | 'success' | 'warning' | 'info';
    autoHideDuration?: number;
    anchorOrigin?: {
      vertical: 'top' | 'bottom';
      horizontal: 'left' | 'center' | 'right';
    };
    onClose?: () => void;
    action?: React.ReactNode;
    content?: React.ReactNode;
    persist?: boolean;
    preventDuplicate?: boolean;
    style?: React.CSSProperties;
    className?: string;
    SnackbarProps?: Partial<SnackbarProps>;
    AlertProps?: Partial<AlertProps>;
  }

  export interface ProviderContext {
    enqueueSnackbar: (message: string | React.ReactNode, options?: OptionsObject) => string | number;
    closeSnackbar: (key?: string | number) => void;
  }

  export const useSnackbar: () => ProviderContext;

  export const SnackbarProvider: React.ComponentType<{
    children: React.ReactNode;
    maxSnack?: number;
    preventDuplicate?: boolean;
    dense?: boolean;
    iconVariant?: Record<string, React.ReactNode>;
    hideIconVariant?: boolean;
    anchorOrigin?: OptionsObject['anchorOrigin'];
    classes?: Record<string, string>;
    style?: React.CSSProperties;
    className?: string;
  }>;
}
</file>

<file path="frontend/tsconfig.json">
{
  "compilerOptions": {
    "target": "es5",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noFallthroughCasesInSwitch": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx"
  },
  "include": [
    "src"
  ]
}
</file>

<file path="gateway/Dockerfile">
FROM nginx:alpine

COPY src/ /etc/nginx/conf.d/

EXPOSE 80
</file>

<file path="init.sql">
-- Create databases
CREATE DATABASE IF NOT EXISTS admin_db;
CREATE DATABASE IF NOT EXISTS doctor_db;
CREATE DATABASE IF NOT EXISTS patient_db;
CREATE DATABASE IF NOT EXISTS chatbot_db;

-- Create user if not exists and grant privileges
CREATE USER IF NOT EXISTS 'user'@'%' IDENTIFIED BY '123456';
GRANT ALL PRIVILEGES ON admin_db.* TO 'user'@'%';
GRANT ALL PRIVILEGES ON doctor_db.* TO 'user'@'%';
GRANT ALL PRIVILEGES ON patient_db.* TO 'user'@'%';
GRANT ALL PRIVILEGES ON chatbot_db.* TO 'user'@'%';
GRANT ALL PRIVILEGES ON user_db.* TO 'user'@'%';

FLUSH PRIVILEGES;
</file>

<file path="package.json">
{
  "dependencies": {
    "@mui/material": "^5.15.0"
  }
}
</file>

<file path="readme.md">
# Healthcare Microservices

A microservices-based healthcare management system with features for managing doctors, patients, appointments, and more.

## Prerequisites

- Docker and Docker Compose
- Node.js (v14 or higher) for frontend development
- Git

## Project Structure

```
.
├── frontend/           # React frontend application
├── gateway/           # Nginx API Gateway
├── services/          # Backend microservices
│   ├── user_service/
│   ├── doctor_service/
│   ├── patient_service/
│   ├── appointment_service/
│   ├── laboratory_service/
│   └── chatbot_service/
└── docker-compose.yml # Docker configuration
```

## Quick Start

1. Clone the repository:
   ```bash
   git clone <repository-url>
   cd healthcare_microservices
   ```

2. Start all services using Docker Compose:
   ```bash
   docker-compose up -d
   ```

3. Access the application:
   - Frontend: http://localhost:3000
   - API Gateway: http://localhost:8000
   - Individual services:
     - User Service: http://localhost:8001
     - Doctor Service: http://localhost:8002
     - Patient Service: http://localhost:8003
     - Appointment Service: http://localhost:8004
     - Laboratory Service: http://localhost:8005
     - Chatbot Service: http://localhost:8006

> docker exec -it doctor_service python manage.py makemigrations
> docker exec -it patient-service python manage.py makemigrations
## Database Setup

The project uses multiple databases:
- MySQL (for doctor, patient, and chatbot services)
- MongoDB (for appointment service)
- PostgreSQL (for user service)

Database initialization scripts are automatically run when the containers start.

## Development

### Frontend Development

1. Navigate to the frontend directory:
   ```bash
   cd frontend
   ```

2. Install dependencies:
   ```bash
   npm install
   ```

3. Start the development server:
   ```bash
   npm start
   ```

### Backend Development

Each service is containerized and can be developed independently. The services are:
- User Service (Django + PostgreSQL)
- Doctor Service (Django + MySQL)
- Patient Service (Django + MySQL)
- Appointment Service (Django + MongoDB)
- Laboratory Service (Django)
- Chatbot Service (Django + MySQL)

## API Documentation

API documentation is available at:
- Swagger UI: http://localhost:8000/api/docs/
- ReDoc: http://localhost:8000/api/redoc/

## Environment Variables

The following environment variables are used in the project:

### MySQL Database
- MYSQL_ROOT_PASSWORD: root
- MYSQL_DATABASE: user_db
- MYSQL_USER: user
- MYSQL_PASSWORD: 123456

### PostgreSQL Database
- POSTGRES_DB: user_service
- POSTGRES_USER: postgres
- POSTGRES_PASSWORD: postgres

## Troubleshooting

1. If services fail to start, check the logs:
   ```bash
   docker-compose logs <service-name>
   ```

2. To restart a specific service:
   ```bash
   docker-compose restart <service-name>
   ```

3. To rebuild and restart all services:
   ```bash
   docker-compose down
   docker-compose up -d --build
   ```

## Contributing

1. Fork the repository
2. Create your feature branch (`git checkout -b feature/amazing-feature`)
3. Commit your changes (`git commit -m 'Add some amazing feature'`)
4. Push to the branch (`git push origin feature/amazing-feature`)
5. Open a Pull Request

## License

This project is licensed under the MIT License - see the LICENSE file for details.
</file>

<file path="services/admin_service/admin_service/asgi.py">
"""
ASGI config for admin_service project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'admin_service.settings')

application = get_asgi_application()
</file>

<file path="services/admin_service/admin_service/settings.py">
"""
Django settings for admin_service project.

Generated by 'django-admin startproject' using Django 3.1.12.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'g$#5gen-&9(ifelwr7n_hb-tv!%x%03$vtb_jpexh2i^w&(69f'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'rest_framework',
    'drf_yasg',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'admin_service.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'admin_service.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'user_db',
        'USER': 'user',
        'PASSWORD': '123456',
        'HOST': 'mysql_db',
        'PORT': '3306',
        'OPTIONS': {
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
            'charset': 'utf8mb4',
        },
    }
}



# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
</file>

<file path="services/admin_service/admin_service/urls.py">
"""admin_service URL Configuration

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/3.1/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path, re_path
from drf_yasg.views import get_schema_view
from drf_yasg import openapi
from rest_framework import permissions

schema_view = get_schema_view(
    openapi.Info(
        title="Admin service Docs",
        default_version='v1',
        description="API documentation",
    ),
    public=True,
    permission_classes=(permissions.AllowAny,),
)

urlpatterns = [
    path('admin/', admin.site.urls),
    # DRF Yasg URLs
    re_path(r'^swagger(?P<format>\.json|\.yaml)$', schema_view.without_ui(cache_timeout=0), name='schema-json'),
    path('swagger/', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'),
    path('redoc/', schema_view.with_ui('redoc', cache_timeout=0), name='schema-redoc'),
]
</file>

<file path="services/admin_service/admin_service/wsgi.py">
"""
WSGI config for admin_service project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'admin_service.settings')

application = get_wsgi_application()
</file>

<file path="services/admin_service/Dockerfile">
FROM python:3.11.9

ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

WORKDIR /app

COPY requirements.txt /app/
RUN pip install -r requirements.txt
RUN mkdir -p /app/staticfiles

COPY . /app/
</file>

<file path="services/admin_service/manage.py">
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'admin_service.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()
</file>

<file path="services/admin_service/requirements.txt">
Django>=4.2,<5.0
djangorestframework>=3.14.0
mysqlclient>=2.1.0
django-environ>=0.10.0
drf-yasg==1.21.5
pyyaml>=6.0
uritemplate>=4.1.1
</file>

<file path="services/appointment_service/appointment_service/__init__.py">

</file>

<file path="services/appointment_service/appointment_service/asgi.py">
"""
ASGI config for appointment_service project.
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'appointment_service.settings')

application = get_asgi_application()
</file>

<file path="services/appointment_service/appointment_service/urls.py">
from django.contrib import admin
from django.urls import path, include
from rest_framework.routers import DefaultRouter
from drf_yasg.views import get_schema_view
from drf_yasg import openapi
from rest_framework import permissions
from .views import AppointmentViewSet

router = DefaultRouter()
router.register(r'appointments', AppointmentViewSet, basename='appointment')

schema_view = get_schema_view(
   openapi.Info(
      title="Appointment Service API",
      default_version='v1',
      description="API documentation for the Appointment Service",
      terms_of_service="https://www.google.com/policies/terms/",
      contact=openapi.Contact(email="contact@example.com"),
      license=openapi.License(name="BSD License"),
   ),
   public=True,
   permission_classes=(permissions.AllowAny,),
)

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/', include(router.urls)),
    path('swagger/', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'),
    path('redoc/', schema_view.with_ui('redoc', cache_timeout=0), name='schema-redoc'),
]
</file>

<file path="services/appointment_service/appointment_service/views.py">
from rest_framework import viewsets, status
from rest_framework.response import Response
from rest_framework.decorators import action
from .models import Appointment
from .serializers import AppointmentSerializer

class AppointmentViewSet(viewsets.ModelViewSet):
    queryset = Appointment.objects.all()
    serializer_class = AppointmentSerializer

    @action(detail=True, methods=['post'])
    def confirm(self, request, pk=None):
        appointment = self.get_object()
        appointment.status = 'confirmed'
        appointment.save()
        return Response({'status': 'appointment confirmed'})

    @action(detail=True, methods=['post'])
    def cancel(self, request, pk=None):
        appointment = self.get_object()
        appointment.status = 'cancelled'
        appointment.save()
        return Response({'status': 'appointment cancelled'})

    @action(detail=True, methods=['post'])
    def complete(self, request, pk=None):
        appointment = self.get_object()
        appointment.status = 'completed'
        appointment.save()
        return Response({'status': 'appointment completed'})
</file>

<file path="services/appointment_service/appointment_service/wsgi.py">
"""
WSGI config for appointment_service project.
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'appointment_service.settings')

application = get_wsgi_application()
</file>

<file path="services/appointment_service/Dockerfile">
FROM python:3.9-slim

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Create directory for static files
RUN mkdir -p /app/staticfiles

# Copy requirements first to leverage Docker cache
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy the rest of the application
COPY . .

# Expose the port the app runs on
EXPOSE 8000

# Command to run the application
CMD ["python", "manage.py", "runserver", "0.0.0.0:8000"]
</file>

<file path="services/appointment_service/manage.py">
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'appointment_service.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()
</file>

<file path="services/appointment_service/README.md">
# Appointment Service

This service manages appointments between patients and doctors in the healthcare system.

## API Endpoints

### Get All Appointments
- **URL**: `/api/appointments/`
- **Method**: `GET`
- **Response**: List of all appointments

### Get Appointment by ID
- **URL**: `/api/appointments/<uuid:id>/`
- **Method**: `GET`
- **Response**: Appointment details

### Create New Appointment
- **URL**: `/api/appointments/`
- **Method**: `POST`
- **Body**:
  ```json
  {
    "patient_id": "uuid",
    "doctor_id": "uuid",
    "date": "YYYY-MM-DD",
    "time": "HH:MM:SS",
    "service_type": "string",
    "duration": "integer",
    "notes": "string (optional)"
  }
  ```

### Update Appointment
- **URL**: `/api/appointments/<uuid:id>/`
- **Method**: `PUT`
- **Body**: Same as create, but all fields are optional

### Confirm Appointment
- **URL**: `/api/appointments/<uuid:id>/confirm/`
- **Method**: `POST`
- **Response**: Confirmation status

### Cancel Appointment
- **URL**: `/api/appointments/<uuid:id>/cancel/`
- **Method**: `POST`
- **Response**: Cancellation status

### Complete Appointment
- **URL**: `/api/appointments/<uuid:id>/complete/`
- **Method**: `POST`
- **Response**: Completion status

## API Documentation
- Swagger UI: `/swagger/`
- ReDoc: `/redoc/`

## Development
1. Install dependencies:
   ```bash
   pip install -r requirements.txt
   ```

2. Run migrations:
   ```bash
   python manage.py makemigrations
   python manage.py migrate
   ```

3. Start the development server:
   ```bash
   python manage.py runserver
   ```

4. Access the service at: `http://localhost:8000`
</file>

<file path="services/appointment_service/requirements.txt">
Django==3.2.23
djangorestframework==3.14.0
djongo==1.3.6
pymongo==3.12.3
python-dotenv==1.0.0
sqlparse==0.2.4
drf-yasg==1.21.7
django-cors-headers
</file>

<file path="services/chatbot_service/app/__init__.py">

</file>

<file path="services/chatbot_service/chatbot_core/asgi.py">
"""
ASGI config for chatbot_core project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'chatbot_core.settings')

application = get_asgi_application()
</file>

<file path="services/chatbot_service/chatbot_core/urls.py">
"""
URL configuration for chatbot_core project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/4.2/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/', include('app.urls')),
]
</file>

<file path="services/chatbot_service/chatbot_core/wsgi.py">
"""
WSGI config for chatbot_core project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'chatbot_core.settings')

application = get_wsgi_application()
</file>

<file path="services/chatbot_service/chatbot_service/settings.py">
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-your-secret-key'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'app',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.common.AppendOrRemoveSlashMiddleware',
]

ROOT_URLCONF = 'chatbot_service.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'chatbot_service.wsgi.application'

# Database
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
STATIC_URL = 'static/'

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# CORS settings
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
]

CORS_ALLOW_CREDENTIALS = True

CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

# URL Configuration
APPEND_SLASH = True
REMOVE_SLASH_IF_MATCHES = True
</file>

<file path="services/chatbot_service/kb/diseases.json">
{
  "flu": {
    "name": "Cúm mùa",
    "symptoms": ["sốt", "ho", "đau đầu", "mệt mỏi"],
    "treatment": "Nghỉ ngơi, uống nước, uống paracetamol 500mg mỗi 6h"
  },
  "dengue": {
    "name": "Sốt xuất huyết",
    "symptoms": ["sốt", "đau đầu", "phát ban", "đau sau mắt"],
    "treatment": "Uống nhiều nước, không dùng ibuprofen, theo dõi tiểu cầu"
  },
  "covid19": {
    "name": "COVID-19",
    "symptoms": [
      "sốt",
      "ho",
      "mệt mỏi",
      "mất vị giác",
      "khó thở",
      "đau họng",
      "đau đầu",
      "chảy nước mũi",
      "đau nhức cơ thể",
      "tiêu chảy",
      "nôn",
      "mất khứu giác"
    ],
    "treatment": "Cách ly, nghỉ ngơi, uống nhiều nước, dùng thuốc hạ sốt nếu cần, liên hệ y tế nếu khó thở."
  },
  "allergy": {
    "name": "Dị ứng",
    "symptoms": [
      "ngứa",
      "phát ban",
      "hắt hơi",
      "chảy nước mũi",
      "ngứa mũi",
      "ngứa mắt",
      "ngứa vòm miệng",
      "nghẹt mũi",
      "chảy nước mắt",
      "sưng môi",
      "sưng lưỡi",
      "sưng mặt",
      "sưng cổ họng",
      "nổi mề đay",
      "sốc phản vệ",
      "sưng/phù to tại vết đốt",
      "ho",
      "tức ngực",
      "thở khò khè",
      "khó thở",
      "ngứa da",
      "phát ban da",
      "nổi mụn nước",
      "đóng vảy da",
      "tróc vảy da"
    ],
    "treatment": "Tránh tiếp xúc dị nguyên, dùng thuốc kháng histamin, glucocorticoid, epinephrine khi sốc phản vệ, liệu pháp miễn dịch nếu cần, đến bác sĩ nếu triệu chứng nặng.",
    "description": "Dị ứng xảy ra khi hệ miễn dịch nhầm lẫn một chất vô hại thành mối đe dọa, tạo kháng thể IgE và giải phóng histamin gây triệu chứng. Dị ứng có thể do phấn hoa, thực phẩm, côn trùng, thuốc, mủ cao su... Sốc phản vệ là biến chứng nguy hiểm nhất, có thể đe dọa tính mạng.",
    "risk_factors": "Người có tiền sử gia đình dị ứng, hen suyễn, trẻ em, người từng bị dị ứng hoặc hen suyễn.",
    "diagnosis": "Chẩn đoán dựa vào thử nghiệm da, xét nghiệm máu tìm IgE đặc hiệu, khai thác tiền sử tiếp xúc dị nguyên.",
    "immunotherapy": "Có thể dùng liệu pháp miễn dịch tiêm hoặc ngậm dưới lưỡi để giảm nhạy cảm dị nguyên."
  },
  "asthma": {
    "name": "Hen phế quản",
    "symptoms": ["khó thở", "ho", "khò khè", "tức ngực"],
    "treatment": "Dùng thuốc giãn phế quản, tránh dị nguyên, đến bệnh viện nếu khó thở nặng."
  },
  "pneumonia": {
    "name": "Viêm phổi",
    "symptoms": ["sốt", "ho", "đau ngực", "khó thở", "ớn lạnh"],
    "treatment": "Khám bác sĩ, dùng kháng sinh theo chỉ định, nghỉ ngơi, uống nhiều nước."
  },
  "migraine": {
    "name": "Đau nửa đầu",
    "symptoms": ["đau đầu", "buồn nôn", "nhạy cảm ánh sáng", "chóng mặt"],
    "treatment": "Nghỉ ngơi nơi yên tĩnh, dùng thuốc giảm đau, tránh căng thẳng."
  },
  "gastritis": {
    "name": "Viêm dạ dày",
    "symptoms": [
      "đau bụng",
      "buồn nôn",
      "ợ nóng",
      "đầy hơi",
      "khó tiêu",
      "cồn cào dạ dày",
      "nóng rát dạ dày",
      "đầy bụng trên",
      "nôn ra máu",
      "đi ngoài ra máu"
    ],
    "treatment": "Ăn nhẹ, tránh đồ cay nóng, dùng thuốc theo chỉ định bác sĩ. Nếu do H.pylori: dùng kháng sinh. Nếu do NSAID/rượu: ngưng sử dụng. Có thể dùng thuốc ức chế bơm proton, chẹn H2, kháng acid. Bổ sung vitamin B12 nếu thiếu. Tuân thủ điều trị và tái khám định kỳ.",
    "description": "Viêm dạ dày là tình trạng niêm mạc dạ dày bị viêm nhiễm, kích ứng, có thể cấp tính hoặc mạn tính. Bệnh gây đau, khó chịu vùng bụng trên, ảnh hưởng sinh hoạt và ăn uống.",
    "causes": "Tổn thương hàng rào bảo vệ niêm mạc, tăng tiết acid, nhiễm khuẩn (H.pylori), dùng thuốc NSAID kéo dài, viêm dạ dày tự miễn, rượu bia, stress, bệnh lý khác.",
    "risk_factors": "Người lớn tuổi, bệnh tự miễn, nhiễm trùng, dùng NSAID dài ngày, nghiện rượu, stress, sau hóa trị/xạ trị, bệnh lý khác (HIV/AIDS, Crohn, Celiac, ký sinh trùng, trào ngược mật).",
    "complications": "Có thể gây loét, xuất huyết, thủng dạ dày, tăng nguy cơ ung thư dạ dày nếu mạn tính.",
    "diagnosis": "Nội soi tiêu hóa, xét nghiệm H.pylori (phân, máu, test hơi thở), xét nghiệm máu ẩn trong phân, chụp X quang, sinh thiết niêm mạc.",
    "prevention": "Không uống rượu bia, bỏ thuốc lá, dùng thuốc giảm đau theo chỉ định, ăn uống lành mạnh, tránh thực phẩm cay nóng/dầu mỡ, kiểm soát stress, tuân thủ điều trị và tái khám."
  },
  "hypertension": {
    "name": "Tăng huyết áp",
    "symptoms": [
      "đau đầu",
      "chóng mặt",
      "mờ mắt",
      "mệt mỏi",
      "đau ngực",
      "khó thở",
      "tiểu máu",
      "liệt nửa người"
    ],
    "treatment": "Ăn nhạt, tập thể dục, dùng thuốc hạ áp theo chỉ định, kiểm tra huyết áp định kỳ, không tự ý bỏ thuốc. Các nhóm thuốc: chẹn kênh calci, ức chế men chuyển, ức chế thụ thể, chẹn beta, lợi tiểu. Mục tiêu huyết áp <140/90mmHg.",
    "description": "Tăng huyết áp là tình trạng huyết áp tâm thu ≥140mmHg và/hoặc tâm trương ≥90mmHg. Bệnh diễn biến thầm lặng, có thể gây biến chứng nguy hiểm như nhồi máu cơ tim, đột quỵ, suy thận nếu không điều trị.",
    "causes": "90% là tăng huyết áp vô căn (không rõ nguyên nhân). 10% do bệnh thận, nội tiết, tim mạch, thuốc, ngộ độc thai nghén, rối loạn thần kinh.",
    "risk_factors": "Nam giới, nữ mãn kinh, tiền sử gia đình, béo phì, ít vận động, hút thuốc, ăn mặn, stress, uống nhiều rượu bia, bệnh thận mạn, đái tháo đường, ngừng thở khi ngủ.",
    "prevention": "Ăn giảm muối, nhiều rau xanh, ít mỡ động vật, tập thể dục đều, bỏ thuốc lá, giảm cân, hạn chế rượu bia, kiểm soát stress, duy trì BMI và vòng bụng hợp lý.",
    "diagnosis": "Đo huyết áp tại phòng khám, tại nhà hoặc bằng Holter 24h. Tăng huyết áp khi huyết áp ≥140/90mmHg (phòng khám), ≥135/85mmHg (tại nhà).",
    "complications": "Nhồi máu cơ tim, đột quỵ, suy thận, tổn thương võng mạc, lóc tách động mạch chủ, suy tim.",
    "emergency": "Cơn tăng huyết áp: huyết áp >180/120mmHg, có hoặc không có tổn thương cơ quan đích. Cần điều trị cấp cứu nếu có dấu hiệu tổn thương cơ quan đích."
  },
  "chickenpox": {
    "name": "Thủy đậu",
    "symptoms": ["sốt", "phát ban", "ngứa", "mụn nước"],
    "treatment": "Nghỉ ngơi, giữ vệ sinh da, tránh gãi, dùng thuốc giảm ngứa."
  },
  "hepatitis": {
    "name": "Viêm gan",
    "symptoms": [
      "mệt mỏi",
      "vàng da",
      "nước tiểu sẫm",
      "buồn nôn",
      "sốt",
      "không ngon miệng",
      "đau bụng",
      "nôn",
      "đau cơ",
      "đau khớp",
      "ngứa",
      "mất tập trung",
      "trí nhớ kém",
      "bầm tím",
      "chảy máu"
    ],
    "treatment": "Nghỉ ngơi, ăn uống lành mạnh, tránh rượu bia, điều trị nguyên nhân (virus, tự miễn, độc chất), dùng thuốc theo chỉ định bác sĩ, ghép gan nếu suy gan nặng.",
    "description": "Viêm gan là tình trạng các tế bào gan bị tổn thương và viêm, có thể do virus, rượu, thuốc, tự miễn hoặc nhiễm trùng khác. Bệnh tiến triển thầm lặng, có thể gây xơ gan, ung thư gan nếu không điều trị.",
    "causes": "Virus viêm gan (A, B, C, D, E), rượu, thuốc, bệnh tự miễn, nhiễm trùng khác, độc chất.",
    "types": "Viêm gan A, E lây qua đường tiêu hóa; B, C, D lây qua máu, tình dục, mẹ sang con. B, C có thể thành mạn tính, gây xơ gan, ung thư gan.",
    "risk_factors": "Tiêm chích, truyền máu, quan hệ không an toàn, sống nơi vệ sinh kém, tiếp xúc máu/mẫu bệnh phẩm, dùng chung kim tiêm, bệnh tự miễn, uống rượu nhiều.",
    "prevention": "Tiêm vắc-xin (A, B), không dùng chung kim tiêm, ăn chín uống sôi, quan hệ an toàn, hạn chế rượu bia, duy trì lối sống lành mạnh.",
    "diagnosis": "Xét nghiệm máu (men gan, Bilirubin, PCR, kháng thể), siêu âm gan, CT, MRI, sinh thiết gan.",
    "complications": "Xơ gan, suy gan, ung thư gan, xuất huyết tiêu hóa, tử vong nếu không điều trị."
  }
}
</file>

<file path="services/chatbot_service/manage.py">
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'chatbot_core.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()
</file>

<file path="services/doctor_service/Dockerfile">
FROM python:3.11.9

ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

WORKDIR /app

COPY requirements.txt /app/
RUN pip install -r requirements.txt
RUN mkdir -p /app/staticfiles

COPY . /app/
</file>

<file path="services/doctor_service/doctor_service/asgi.py">
"""
ASGI config for doctor_service project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'doctor_service.settings')

application = get_asgi_application()
</file>

<file path="services/doctor_service/doctor_service/wsgi.py">
"""
WSGI config for doctor_service project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'doctor_service.settings')

application = get_wsgi_application()
</file>

<file path="services/doctor_service/doctor/admin.py">
from django.contrib import admin

# Register your models here.
</file>

<file path="services/doctor_service/doctor/apps.py">
from django.apps import AppConfig


class DoctorConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'doctor'
</file>

<file path="services/doctor_service/doctor/management/__init__.py">

</file>

<file path="services/doctor_service/doctor/management/commands/__init__.py">

</file>

<file path="services/doctor_service/doctor/management/commands/load_fake_data.py">
from django.core.management.base import BaseCommand
from django.contrib.auth import get_user_model
from doctor.models import Doctor, Schedule
import uuid
import json

User = get_user_model()

class Command(BaseCommand):
    help = 'Loads fake data for doctors and their schedules'

    def handle(self, *args, **kwargs):
        self.stdout.write('Clearing existing data...')
        Doctor.objects.all().delete()
        User.objects.filter(role='doctor').delete()

        self.stdout.write('Creating users...')
        doctors_data = [
            {
                'email': 'dr.smith@hospital.com',
                'username': 'drsmith',
                'password': 'doctorpass123',
                'name': 'Dr. John Smith',
                'specialty': 'Cardiology',
                'license': 'MD123456',
                'phone': '+1234567890',
                'email': 'dr.smith@hospital.com',
                'schedule': {
                    'day_of_week': 'Monday',
                    'time_slots': [
                        {'start': '09:00', 'end': '10:00'},
                        {'start': '10:30', 'end': '11:30'},
                        {'start': '14:00', 'end': '15:00'}
                    ]
                }
            },
            {
                'email': 'dr.johnson@hospital.com',
                'username': 'drjohnson',
                'password': 'doctorpass123',
                'name': 'Dr. Sarah Johnson',
                'specialty': 'Pediatrics',
                'license': 'MD789012',
                'phone': '+1234567891',
                'email': 'dr.johnson@hospital.com',
                'schedule': {
                    'day_of_week': 'Tuesday',
                    'time_slots': [
                        {'start': '09:30', 'end': '10:30'},
                        {'start': '11:00', 'end': '12:00'},
                        {'start': '15:00', 'end': '16:00'}
                    ]
                }
            },
            {
                'email': 'dr.williams@hospital.com',
                'username': 'drwilliams',
                'password': 'doctorpass123',
                'name': 'Dr. Michael Williams',
                'specialty': 'Neurology',
                'license': 'MD345678',
                'phone': '+1234567892',
                'email': 'dr.williams@hospital.com',
                'schedule': {
                    'day_of_week': 'Wednesday',
                    'time_slots': [
                        {'start': '10:00', 'end': '11:00'},
                        {'start': '11:30', 'end': '12:30'},
                        {'start': '14:30', 'end': '15:30'}
                    ]
                }
            }
        ]

        for doctor_data in doctors_data:
            # Create user
            user = User.objects.create_user(
                email=doctor_data['email'],
                username=doctor_data['username'],
                password=doctor_data['password'],
                role='doctor'
            )

            # Create doctor
            doctor = Doctor.objects.create(
                user=user,
                name=doctor_data['name'],
                specialty=doctor_data['specialty'],
                license=doctor_data['license'],
                phone=doctor_data['phone'],
                email=doctor_data['email']
            )

            # Create schedule
            schedule_data = doctor_data['schedule']
            Schedule.objects.create(
                doctor=doctor,
                day_of_week=schedule_data['day_of_week'],
                time_slots=schedule_data['time_slots']
            )

        self.stdout.write(self.style.SUCCESS('Successfully loaded fake data'))
</file>

<file path="services/doctor_service/doctor/managers.py">
from django.contrib.auth.models import BaseUserManager

class UserManager(BaseUserManager):
    def create_user(self, email, username, password=None, role=None, **extra_fields):
        if not email:
            raise ValueError('The Email field must be set')
        if not username:
            raise ValueError('The Username field must be set')
        if not role:
            raise ValueError('The Role field must be set')
        email = self.normalize_email(email)
        user = self.model(email=email, username=username, role=role, **extra_fields)
        user.set_password(password)
        user.save(using=self._db)
        return user

    def create_superuser(self, email, username, password=None, **extra_fields):
        extra_fields.setdefault('is_staff', True)
        extra_fields.setdefault('is_superuser', True)
        extra_fields.setdefault('role', 'admin')
        return self.create_user(email, username, password, **extra_fields)
</file>

<file path="services/doctor_service/doctor/tests.py">
from django.test import TestCase

# Create your tests here.
</file>

<file path="services/doctor_service/manage.py">
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'doctor_service.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()
</file>

<file path="services/laboratory_service/disease_prediction/__init__.py">
# This file is intentionally left empty to mark the directory as a Python package.
</file>

<file path="services/laboratory_service/disease_prediction/ai_models/__init__.py">
# This file is intentionally left empty to mark the directory as a Python package.
</file>

<file path="services/laboratory_service/disease_prediction/ai_models/predictor.py">
import numpy as np
from sklearn.ensemble import RandomForestClassifier
import joblib
import os

class DiseasePredictor:
    def __init__(self):
        self.model = RandomForestClassifier(n_estimators=100, random_state=42)
        self.model_path = os.path.join(os.path.dirname(__file__), 'disease_model.joblib')
        
        # Load model if it exists, otherwise create a new one
        if os.path.exists(self.model_path):
            self.model = joblib.load(self.model_path)
        else:
            # Initialize with training data for multiple diseases
            # Features: [age, gender, fever, cough, fatigue, headache, sore_throat, 
            #           runny_nose, body_ache, nausea, vomiting, diarrhea, 
            #           shortness_breath, chest_pain, rash, joint_pain]
            X = np.array([
                # Flu cases
                [25, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0],
                [30, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0],
                
                # COVID-19 cases
                [35, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0],
                [40, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0],
                
                # Common Cold cases
                [20, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
                [45, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
                
                # Dengue Fever cases
                [28, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1],
                [32, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1],
                
                # Malaria cases
                [38, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0],
                [42, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0],
                
                # Typhoid cases
                [22, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0],
                [27, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0],
                
                # Pneumonia cases
                [50, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0],
                [55, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0],
                
                # Bronchitis cases
                [33, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0],
                [37, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0],
                
                # Gastroenteritis cases
                [29, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0],
                [31, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0],
                
                # Arthritis cases
                [60, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
                [65, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
            ])
            
            y = np.array([
                'Flu', 'Flu',
                'COVID-19', 'COVID-19',
                'Common Cold', 'Common Cold',
                'Dengue Fever', 'Dengue Fever',
                'Malaria', 'Malaria',
                'Typhoid', 'Typhoid',
                'Pneumonia', 'Pneumonia',
                'Bronchitis', 'Bronchitis',
                'Gastroenteritis', 'Gastroenteritis',
                'Arthritis', 'Arthritis'
            ])
            
            self.model.fit(X, y)
            joblib.dump(self.model, self.model_path)

    def predict(self, age, gender, symptoms, lab_results):
        # Convert gender to numeric (1 for male, 0 for female)
        gender_numeric = 1 if gender.lower() == 'male' else 0
        
        # Convert symptoms to numeric features, ensuring all 16 features are present
        features = [
            age,
            gender_numeric,
            symptoms.get('fever', 0),
            symptoms.get('cough', 0),
            symptoms.get('fatigue', 0),
            symptoms.get('headache', 0),
            symptoms.get('sore_throat', 0),
            symptoms.get('runny_nose', 0),
            symptoms.get('body_ache', 0),
            symptoms.get('nausea', 0),
            symptoms.get('vomiting', 0),
            symptoms.get('diarrhea', 0),
            symptoms.get('shortness_breath', 0),
            symptoms.get('chest_pain', 0),
            symptoms.get('rash', 0),
            symptoms.get('joint_pain', 0)
        ]
        
        # Make prediction
        prediction = self.model.predict([features])[0]
        confidence = np.max(self.model.predict_proba([features])[0])
        
        return prediction, confidence
</file>

<file path="services/laboratory_service/disease_prediction/apps.py">
from django.apps import AppConfig


class DiseasePredictionConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'disease_prediction'
</file>

<file path="services/laboratory_service/disease_prediction/migrations/__init__.py">
# This file is intentionally left empty to mark the directory as a Python package.
</file>

<file path="services/laboratory_service/disease_prediction/models/__init__.py">
# This file is intentionally left empty to mark the directory as a Python package.
</file>

<file path="services/laboratory_service/disease_prediction/models/prediction.py">
from django.db import models

class DiseasePrediction(models.Model):
    patient_id = models.CharField(max_length=100)
    age = models.IntegerField()
    gender = models.CharField(max_length=10)
    symptoms = models.JSONField()
    lab_results = models.JSONField()
    predicted_disease = models.CharField(max_length=100)
    confidence_score = models.FloatField()
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        db_table = 'disease_predictions'
</file>

<file path="services/laboratory_service/disease_prediction/serializers/__init__.py">
# This file is intentionally left empty to mark the directory as a Python package.
</file>

<file path="services/laboratory_service/disease_prediction/serializers/prediction.py">
from rest_framework import serializers
from disease_prediction.models.prediction import DiseasePrediction

class DiseasePredictionSerializer(serializers.ModelSerializer):
    class Meta:
        model = DiseasePrediction
        fields = '__all__'
        read_only_fields = ('created_at', 'updated_at')
</file>

<file path="services/laboratory_service/disease_prediction/views/__init__.py">
# This file is intentionally left empty to mark the directory as a Python package.
</file>

<file path="services/laboratory_service/disease_prediction/views/prediction.py">
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from disease_prediction.serializers.prediction import DiseasePredictionSerializer
from disease_prediction.models.prediction import DiseasePrediction
from disease_prediction.ai_models.predictor import DiseasePredictor
from drf_yasg.utils import swagger_auto_schema
from drf_yasg import openapi

class DiseasePredictionView(APIView):
    @swagger_auto_schema(
        operation_description="Predict disease based on patient data",
        request_body=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            required=['patient_id', 'age', 'gender'],
            properties={
                'patient_id': openapi.Schema(type=openapi.TYPE_STRING, description='Patient ID'),
                'age': openapi.Schema(type=openapi.TYPE_INTEGER, description='Patient age'),
                'gender': openapi.Schema(type=openapi.TYPE_STRING, description='Patient gender (male/female)'),
                'symptoms': openapi.Schema(
                    type=openapi.TYPE_OBJECT,
                    properties={
                        'fever': openapi.Schema(type=openapi.TYPE_BOOLEAN, description='Has fever'),
                        'cough': openapi.Schema(type=openapi.TYPE_BOOLEAN, description='Has cough'),
                        'fatigue': openapi.Schema(type=openapi.TYPE_BOOLEAN, description='Has fatigue'),
                        'headache': openapi.Schema(type=openapi.TYPE_BOOLEAN, description='Has headache'),
                        'sore_throat': openapi.Schema(type=openapi.TYPE_BOOLEAN, description='Has sore throat'),
                        'runny_nose': openapi.Schema(type=openapi.TYPE_BOOLEAN, description='Has runny nose'),
                        'body_ache': openapi.Schema(type=openapi.TYPE_BOOLEAN, description='Has body ache'),
                        'nausea': openapi.Schema(type=openapi.TYPE_BOOLEAN, description='Has nausea'),
                        'vomiting': openapi.Schema(type=openapi.TYPE_BOOLEAN, description='Has vomiting'),
                        'diarrhea': openapi.Schema(type=openapi.TYPE_BOOLEAN, description='Has diarrhea'),
                        'shortness_breath': openapi.Schema(type=openapi.TYPE_BOOLEAN, description='Has shortness of breath'),
                        'chest_pain': openapi.Schema(type=openapi.TYPE_BOOLEAN, description='Has chest pain'),
                        'rash': openapi.Schema(type=openapi.TYPE_BOOLEAN, description='Has rash'),
                        'joint_pain': openapi.Schema(type=openapi.TYPE_BOOLEAN, description='Has joint pain'),
                    }
                ),
                'lab_results': openapi.Schema(
                    type=openapi.TYPE_OBJECT,
                    properties={
                        'wbc_count': openapi.Schema(type=openapi.TYPE_NUMBER, description='White blood cell count'),
                        'rbc_count': openapi.Schema(type=openapi.TYPE_NUMBER, description='Red blood cell count'),
                        'hemoglobin': openapi.Schema(type=openapi.TYPE_NUMBER, description='Hemoglobin level'),
                    }
                ),
            },
        ),
        responses={
            201: DiseasePredictionSerializer,
            400: 'Bad Request - Missing required fields',
        }
    )
    def post(self, request):
        # Get data from request
        patient_id = request.data.get('patient_id')
        age = request.data.get('age')
        gender = request.data.get('gender')
        symptoms = request.data.get('symptoms', {})
        lab_results = request.data.get('lab_results', {})

        # Validate required fields
        if not all([patient_id, age, gender]):
            return Response(
                {'error': 'Missing required fields: patient_id, age, gender'},
                status=status.HTTP_400_BAD_REQUEST
            )

        # Get prediction from AI model
        predictor = DiseasePredictor()
        predicted_disease, confidence_score = predictor.predict(age, gender, symptoms, lab_results)

        # Create prediction record
        prediction = DiseasePrediction.objects.create(
            patient_id=patient_id,
            age=age,
            gender=gender,
            symptoms=symptoms,
            lab_results=lab_results,
            predicted_disease=predicted_disease,
            confidence_score=confidence_score
        )

        # Serialize and return response
        serializer = DiseasePredictionSerializer(prediction)
        return Response(serializer.data, status=status.HTTP_201_CREATED)
</file>

<file path="services/laboratory_service/Dockerfile">
FROM python:3.9-slim

WORKDIR /app

COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

COPY . .

EXPOSE 8000

# Create a startup script
RUN echo '#!/bin/bash\n\
python manage.py migrate\n\
python manage.py runserver 0.0.0.0:8000' > /app/start.sh && \
chmod +x /app/start.sh

CMD ["/app/start.sh"]
</file>

<file path="services/laboratory_service/laboratory_service/__init__.py">
# This file is intentionally left empty to mark the directory as a Python package.
</file>

<file path="services/laboratory_service/laboratory_service/asgi.py">
"""
ASGI config for laboratory_service project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'laboratory_service.settings')

application = get_asgi_application()
</file>

<file path="services/laboratory_service/laboratory_service/settings.py">
import os
from pathlib import Path

BASE_DIR = Path(__file__).resolve().parent.parent

SECRET_KEY = 'django-insecure-your-secret-key-here'

DEBUG = True

ALLOWED_HOSTS = ['*']

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'drf_yasg',
    'corsheaders',
    'disease_prediction.apps.DiseasePredictionConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'laboratory_service.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'laboratory_service.wsgi.application'

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

STATIC_URL = 'static/'
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10
}

# Swagger settings
SWAGGER_SETTINGS = {
    'SECURITY_DEFINITIONS': {
        'Bearer': {
            'type': 'apiKey',
            'name': 'Authorization',
            'in': 'header'
        }
    },
    'USE_SESSION_AUTH': False,
}

REDOC_SETTINGS = {
    'LAZY_RENDERING': False,
}

# CORS settings
CORS_ALLOW_ALL_ORIGINS = True  # For development only
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",  # React frontend
    "http://127.0.0.1:3000",  # React frontend alternative
]
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

# Disable APPEND_SLASH to prevent redirect issues with POST requests
APPEND_SLASH = False
</file>

<file path="services/laboratory_service/laboratory_service/urls.py">
from django.contrib import admin
from django.urls import path, re_path
from disease_prediction.views.prediction import DiseasePredictionView
from rest_framework import permissions
from drf_yasg.views import get_schema_view
from drf_yasg import openapi

schema_view = get_schema_view(
   openapi.Info(
      title="Laboratory Service API",
      default_version='v1',
      description="API documentation for the Laboratory Service",
      terms_of_service="https://www.google.com/policies/terms/",
      contact=openapi.Contact(email="contact@laboratory.com"),
      license=openapi.License(name="BSD License"),
   ),
   public=True,
   permission_classes=(permissions.AllowAny,),
)

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/predict/', DiseasePredictionView.as_view(), name='predict-disease'),
    
    # Swagger documentation URLs
    re_path(r'^swagger(?P<format>\.json|\.yaml)$', schema_view.without_ui(cache_timeout=0), name='schema-json'),
    path('swagger/', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'),
    path('redoc/', schema_view.with_ui('redoc', cache_timeout=0), name='schema-redoc'),
]
</file>

<file path="services/laboratory_service/laboratory_service/wsgi.py">
"""
WSGI config for laboratory_service project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'laboratory_service.settings')

application = get_wsgi_application()
</file>

<file path="services/laboratory_service/manage.py">
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'laboratory_service.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()
</file>

<file path="services/laboratory_service/readme.md">
1. Flu:
```json
{
    "patient_id": "FLU001",
    "age": 30,
    "gender": "male",
    "symptoms": {
        "fever": true,
        "cough": true,
        "fatigue": true,
        "headache": true,
        "sore_throat": true,
        "runny_nose": true,
        "body_ache": true,
        "nausea": false,
        "vomiting": false,
        "diarrhea": false,
        "shortness_breath": false,
        "chest_pain": false,
        "rash": false,
        "joint_pain": false
    },
    "lab_results": {
        "wbc_count": 12000,
        "rbc_count": 4.5,
        "hemoglobin": 14.5
    }
}
```

2. COVID-19
```json
{
    "patient_id": "COVID001",
    "age": 35,
    "gender": "female",
    "symptoms": {
        "fever": true,
        "cough": true,
        "fatigue": true,
        "headache": true,
        "sore_throat": false,
        "runny_nose": false,
        "body_ache": true,
        "nausea": false,
        "vomiting": false,
        "diarrhea": false,
        "shortness_breath": true,
        "chest_pain": true,
        "rash": false,
        "joint_pain": false
    },
    "lab_results": {
        "wbc_count": 8000,
        "rbc_count": 4.2,
        "hemoglobin": 13.8
    }
}
```

3. Common Cold
```json
{
    "patient_id": "COLD001",
    "age": 25,
    "gender": "male",
    "symptoms": {
        "fever": false,
        "cough": true,
        "fatigue": false,
        "headache": false,
        "sore_throat": true,
        "runny_nose": true,
        "body_ache": false,
        "nausea": false,
        "vomiting": false,
        "diarrhea": false,
        "shortness_breath": false,
        "chest_pain": false,
        "rash": false,
        "joint_pain": false
    },
    "lab_results": {
        "wbc_count": 9000,
        "rbc_count": 4.7,
        "hemoglobin": 15.0
    }
}
```

4. Dengue Fever
```json
{
    "patient_id": "DENG001",
    "age": 28,
    "gender": "female",
    "symptoms": {
        "fever": true,
        "cough": false,
        "fatigue": true,
        "headache": true,
        "sore_throat": false,
        "runny_nose": false,
        "body_ache": true,
        "nausea": true,
        "vomiting": true,
        "diarrhea": true,
        "shortness_breath": false,
        "chest_pain": false,
        "rash": true,
        "joint_pain": true
    },
    "lab_results": {
        "wbc_count": 3000,
        "rbc_count": 3.8,
        "hemoglobin": 12.5
    }
}
```

5. Malaria

```json
{
    "patient_id": "MAL001",
    "age": 40,
    "gender": "male",
    "symptoms": {
        "fever": true,
        "cough": false,
        "fatigue": true,
        "headache": true,
        "sore_throat": false,
        "runny_nose": false,
        "body_ache": true,
        "nausea": true,
        "vomiting": true,
        "diarrhea": false,
        "shortness_breath": false,
        "chest_pain": false,
        "rash": false,
        "joint_pain": false
    },
    "lab_results": {
        "wbc_count": 5000,
        "rbc_count": 3.5,
        "hemoglobin": 11.8
    }
}
```

6. Typhoid

```json
{
    "patient_id": "TYP001",
    "age": 22,
    "gender": "female",
    "symptoms": {
        "fever": true,
        "cough": false,
        "fatigue": true,
        "headache": true,
        "sore_throat": false,
        "runny_nose": false,
        "body_ache": true,
        "nausea": true,
        "vomiting": true,
        "diarrhea": true,
        "shortness_breath": false,
        "chest_pain": false,
        "rash": false,
        "joint_pain": false
    },
    "lab_results": {
        "wbc_count": 4000,
        "rbc_count": 3.2,
        "hemoglobin": 10.5
    }
}
```

7. Pneumonia

```json
{
    "patient_id": "PNE001",
    "age": 55,
    "gender": "male",
    "symptoms": {
        "fever": true,
        "cough": true,
        "fatigue": true,
        "headache": false,
        "sore_throat": false,
        "runny_nose": false,
        "body_ache": true,
        "nausea": false,
        "vomiting": false,
        "diarrhea": false,
        "shortness_breath": true,
        "chest_pain": true,
        "rash": false,
        "joint_pain": false
    },
    "lab_results": {
        "wbc_count": 15000,
        "rbc_count": 4.0,
        "hemoglobin": 13.0
    }
}
```

8. Bronchitis
```json
{
    "patient_id": "BRON001",
    "age": 35,
    "gender": "female",
    "symptoms": {
        "fever": true,
        "cough": true,
        "fatigue": true,
        "headache": false,
        "sore_throat": true,
        "runny_nose": true,
        "body_ache": false,
        "nausea": false,
        "vomiting": false,
        "diarrhea": false,
        "shortness_breath": true,
        "chest_pain": false,
        "rash": false,
        "joint_pain": false
    },
    "lab_results": {
        "wbc_count": 11000,
        "rbc_count": 4.3,
        "hemoglobin": 14.0
    }
}
```

9. Gastroenteritis

```json
{
    "patient_id": "GAST001",
    "age": 30,
    "gender": "male",
    "symptoms": {
        "fever": false,
        "cough": false,
        "fatigue": true,
        "headache": false,
        "sore_throat": false,
        "runny_nose": false,
        "body_ache": true,
        "nausea": true,
        "vomiting": true,
        "diarrhea": true,
        "shortness_breath": false,
        "chest_pain": false,
        "rash": false,
        "joint_pain": false
    },
    "lab_results": {
        "wbc_count": 10000,
        "rbc_count": 4.1,
        "hemoglobin": 13.5
    }
}
```

10. Arthritis

```json
{
    "patient_id": "ARTH001",
    "age": 65,
    "gender": "female",
    "symptoms": {
        "fever": false,
        "cough": false,
        "fatigue": true,
        "headache": false,
        "sore_throat": false,
        "runny_nose": false,
        "body_ache": false,
        "nausea": false,
        "vomiting": false,
        "diarrhea": false,
        "shortness_breath": false,
        "chest_pain": false,
        "rash": false,
        "joint_pain": true
    },
    "lab_results": {
        "wbc_count": 8000,
        "rbc_count": 4.0,
        "hemoglobin": 12.8
    }
}
```

---

The disease prediction system uses a Random Forest Classifier, which is a type of machine learning algorithm. Let me explain the key aspects of this AI approach:
1. Type of AI/ML:
    * This is a Supervised Machine Learning model
    * Specifically, it's a Classification model (predicts discrete categories - in this case, disease types)
    * Uses Random Forest algorithm, which is an ensemble learning method
2. Random Forest Characteristics:
    * It's an ensemble of multiple decision trees
    * Each tree makes its own prediction, and the final prediction is based on majority voting
    * The model uses 100 trees (n_estimators=100)
    * Uses a random seed of 42 (random_state=42) for reproducibility
3. Features Used:
    - 16 input features:
        * Age (numeric)
        * Gender (binary: 1 for male, 0 for female)
        * Fever (binary)
        * Cough (binary)
        * Fatigue (binary)
        * Headache (binary)
        * Sore throat (binary)
        * Runny nose (binary)
        * Body ache (binary)
        * Nausea (binary)
        * Vomiting (binary)
        * Diarrhea (binary)
        * Shortness of breath (binary)
        * Chest pain (binary)
        * Rash (binary)
        * Joint pain (binary)
    - Output: Predicts one of 10 possible diseases:
        * Flu
        * COVID-19
        * Common Cold
        * Dengue Fever
        * Malaria
        * Typhoid
        * Pneumonia
        * Bronchitis
        * Gastroenteritis
        * Arthritis
        * Also provides a confidence score (probability) for        * the prediction
    - Training Data:
        - Currently uses synthetic/simulated data
        - 20 training examples (2 examples per disease)
        - Each example has all 16 features
    - Model Persistence:
        - Uses joblib to save and load the trained model
        - Model is saved as disease_model.joblib
        - If the model file exists, it loads the saved model; otherwise, it creates a new one
</file>

<file path="services/laboratory_service/requirements.txt">
Django==4.2.7
djangorestframework==3.14.0
pymongo==4.6.1
scikit-learn==1.3.2
pandas==2.1.3
numpy==1.26.2
python-dotenv==1.0.0
gunicorn==21.2.0
drf-yasg==1.21.7
django-cors-headers==4.3.1
</file>

<file path="services/laboratory_service/setup.sh">
#!/bin/bash

# Create Django project
django-admin startproject laboratory_service .

# Create app
python manage.py startapp disease_prediction

# Create necessary directories
mkdir -p disease_prediction/models
mkdir -p disease_prediction/serializers
mkdir -p disease_prediction/views
mkdir -p disease_prediction/ai_models
</file>

<file path="services/patient_service/Dockerfile">
FROM python:3.11.9

ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

WORKDIR /app

COPY requirements.txt /app/
RUN pip install -r requirements.txt
RUN mkdir -p /app/staticfiles

COPY . /app/
</file>

<file path="services/patient_service/manage.py">
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'patient_service.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()
</file>

<file path="services/patient_service/patients/apps.py">
from django.apps import AppConfig

class PatientsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'patients'
</file>

<file path="services/patient_service/patients/fixtures/fake_data.sql">
-- Clear existing data
DELETE FROM patients_patient;
DELETE FROM patients_user;

-- Insert Users (Patients and Doctors)
INSERT INTO patients_user (id, email, password, role, is_active, created_at, updated_at)
VALUES
    -- Admin user
    ('11111111-1111-1111-1111-111111111111', 'admin@healthcare.com', 'pbkdf2_sha256$600000$hashed_password', 'admin', true, NOW(), NOW()),
    
    -- Doctor users
    ('22222222-2222-2222-2222-222222222222', 'dr.smith@healthcare.com', 'pbkdf2_sha256$600000$hashed_password', 'doctor', true, NOW(), NOW()),
    ('33333333-3333-3333-3333-333333333333', 'dr.johnson@healthcare.com', 'pbkdf2_sha256$600000$hashed_password', 'doctor', true, NOW(), NOW()),
    ('44444444-4444-4444-4444-444444444444', 'dr.williams@healthcare.com', 'pbkdf2_sha256$600000$hashed_password', 'doctor', true, NOW(), NOW()),
    
    -- Patient users
    ('55555555-5555-5555-5555-555555555555', 'john.doe@email.com', 'pbkdf2_sha256$600000$hashed_password', 'patient', true, NOW(), NOW()),
    ('66666666-6666-6666-6666-666666666666', 'jane.smith@email.com', 'pbkdf2_sha256$600000$hashed_password', 'patient', true, NOW(), NOW()),
    ('77777777-7777-7777-7777-777777777777', 'mike.johnson@email.com', 'pbkdf2_sha256$600000$hashed_password', 'patient', true, NOW(), NOW()),
    ('88888888-8888-8888-8888-888888888888', 'sarah.williams@email.com', 'pbkdf2_sha256$600000$hashed_password', 'patient', true, NOW(), NOW()),
    ('99999999-9999-9999-9999-999999999999', 'david.brown@email.com', 'pbkdf2_sha256$600000$hashed_password', 'patient', true, NOW(), NOW());

-- Insert Patient Profiles
INSERT INTO patients_patient (user_id, name, age, gender, phone, address, medical_history, patient_type, preferred_contact_method, timezone, created_at, updated_at)
VALUES
    ('55555555-5555-5555-5555-555555555555', 'John Doe', 35, 'male', '+1234567890', '123 Main St, City', 'Hypertension, Allergies', 'remote', 'email', 'America/New_York', NOW(), NOW()),
    ('66666666-6666-6666-6666-666666666666', 'Jane Smith', 28, 'female', '+1234567891', '456 Oak Ave, Town', 'Asthma', 'offline', 'phone', 'America/Chicago', NOW(), NOW()),
    ('77777777-7777-7777-7777-777777777777', 'Mike Johnson', 42, 'male', '+1234567892', '789 Pine Rd, Village', 'Diabetes Type 2', 'remote', 'video', 'America/Los_Angeles', NOW(), NOW()),
    ('88888888-8888-8888-8888-888888888888', 'Sarah Williams', 31, 'female', '+1234567893', '321 Elm St, City', 'None', 'guest', 'email', 'America/New_York', NOW(), NOW()),
    ('99999999-9999-9999-9999-999999999999', 'David Brown', 45, 'male', '+1234567894', '654 Maple Dr, Town', 'Arthritis', 'offline', 'phone', 'America/Chicago', NOW(), NOW());

-- Insert Appointments (if you have an appointments table)
-- Note: Adjust the table name and fields according to your actual appointments model
INSERT INTO appointments_appointment (patient_id, doctor_id, appointment_date, status, notes, created_at, updated_at)
VALUES
    ('55555555-5555-5555-5555-555555555555', '22222222-2222-2222-2222-222222222222', NOW() + INTERVAL '1 day', 'scheduled', 'Regular checkup', NOW(), NOW()),
    ('66666666-6666-6666-6666-666666666666', '33333333-3333-3333-3333-333333333333', NOW() + INTERVAL '2 days', 'scheduled', 'Follow-up consultation', NOW(), NOW()),
    ('77777777-7777-7777-7777-777777777777', '44444444-4444-4444-4444-444444444444', NOW() + INTERVAL '3 days', 'scheduled', 'Initial consultation', NOW(), NOW());

-- Insert Lab Results (if you have a lab results table)
-- Note: Adjust the table name and fields according to your actual lab results model
INSERT INTO lab_results_labresult (patient_id, test_name, result, test_date, notes, created_at, updated_at)
VALUES
    ('55555555-5555-5555-5555-555555555555', 'Blood Test', 'Normal', NOW() - INTERVAL '7 days', 'Regular checkup results', NOW(), NOW()),
    ('66666666-6666-6666-6666-666666666666', 'X-Ray', 'Clear', NOW() - INTERVAL '14 days', 'Chest X-Ray results', NOW(), NOW()),
    ('77777777-7777-7777-7777-777777777777', 'MRI', 'Normal', NOW() - INTERVAL '21 days', 'Brain MRI results', NOW(), NOW());

-- Insert Medical Records (if you have a medical records table)
-- Note: Adjust the table name and fields according to your actual medical records model
INSERT INTO medical_records_medicalrecord (patient_id, doctor_id, diagnosis, prescription, notes, created_at, updated_at)
VALUES
    ('55555555-5555-5555-5555-555555555555', '22222222-2222-2222-2222-222222222222', 'Hypertension', 'Lisinopril 10mg', 'Regular checkup', NOW(), NOW()),
    ('66666666-6666-6666-6666-666666666666', '33333333-3333-3333-3333-333333333333', 'Asthma', 'Albuterol inhaler', 'Follow-up', NOW(), NOW()),
    ('77777777-7777-7777-7777-777777777777', '44444444-4444-4444-4444-444444444444', 'Diabetes Type 2', 'Metformin 500mg', 'Initial diagnosis', NOW(), NOW());
</file>

<file path="services/patient_service/patients/management/commands/load_fake_data.py">
from django.core.management.base import BaseCommand
from django.contrib.auth import get_user_model
from patients.models import Patient
from django.utils import timezone
import uuid

User = get_user_model()

class Command(BaseCommand):
    help = 'Loads fake data for testing'

    def handle(self, *args, **kwargs):
        self.stdout.write('Clearing existing data...')
        Patient.objects.all().delete()
        User.objects.all().delete()

        self.stdout.write('Creating users...')
        # Create admin user
        admin = User.objects.create_superuser(
            email='admin@healthcare.com',
            password='admin123',
            role='admin'
        )

        # Create doctors
        doctors = [
            User.objects.create_user(
                email='dr.smith@healthcare.com',
                password='doctor123',
                role='doctor'
            ),
            User.objects.create_user(
                email='dr.johnson@healthcare.com',
                password='doctor123',
                role='doctor'
            ),
            User.objects.create_user(
                email='dr.williams@healthcare.com',
                password='doctor123',
                role='doctor'
            ),
        ]

        # Create patients
        patients = [
            User.objects.create_user(
                email='john.doe@email.com',
                password='patient123',
                role='patient'
            ),
            User.objects.create_user(
                email='jane.smith@email.com',
                password='patient123',
                role='patient'
            ),
            User.objects.create_user(
                email='mike.johnson@email.com',
                password='patient123',
                role='patient'
            ),
            User.objects.create_user(
                email='sarah.williams@email.com',
                password='patient123',
                role='patient'
            ),
            User.objects.create_user(
                email='david.brown@email.com',
                password='patient123',
                role='patient'
            ),
        ]

        self.stdout.write('Creating patient profiles...')
        # Create patient profiles
        Patient.objects.create(
            user=patients[0],
            name='John Doe',
            age=35,
            gender='male',
            phone='+1234567890',
            address='123 Main St, City',
            medical_history='Hypertension, Allergies',
            patient_type='remote',
            preferred_contact_method='email',
            timezone='America/New_York'
        )

        Patient.objects.create(
            user=patients[1],
            name='Jane Smith',
            age=28,
            gender='female',
            phone='+1234567891',
            address='456 Oak Ave, Town',
            medical_history='Asthma',
            patient_type='offline',
            preferred_contact_method='phone',
            timezone='America/Chicago'
        )

        Patient.objects.create(
            user=patients[2],
            name='Mike Johnson',
            age=42,
            gender='male',
            phone='+1234567892',
            address='789 Pine Rd, Village',
            medical_history='Diabetes Type 2',
            patient_type='remote',
            preferred_contact_method='video',
            timezone='America/Los_Angeles'
        )

        Patient.objects.create(
            user=patients[3],
            name='Sarah Williams',
            age=31,
            gender='female',
            phone='+1234567893',
            address='321 Elm St, City',
            medical_history='None',
            patient_type='guest',
            preferred_contact_method='email',
            timezone='America/New_York'
        )

        Patient.objects.create(
            user=patients[4],
            name='David Brown',
            age=45,
            gender='male',
            phone='+1234567894',
            address='654 Maple Dr, Town',
            medical_history='Arthritis',
            patient_type='offline',
            preferred_contact_method='phone',
            timezone='America/Chicago'
        )

        self.stdout.write(self.style.SUCCESS('Successfully loaded fake data'))
</file>

<file path="services/patient_service/README.md">
# Patient Service

This service manages patient profiles and their medical information for the healthcare system.

## API Endpoints

### Get All Patients
- **URL**: `/api/patients/`
- **Method**: `GET`
- **Response**: List of all patients

### Get Patient by ID
- **URL**: `/api/patients/<uuid:user_id>/`
- **Method**: `GET`
- **Response**: Patient details

### Create New Patient
- **URL**: `/api/patients/`
- **Method**: `POST`
- **Body**:
  ```json
  {
    "user_id": "uuid",
    "name": "string",
    "age": "integer",
    "gender": "string (male/female/other)",
    "phone": "string",
    "email": "string",
    "address": "string",
    "medical_history": "string (optional)"
  }
  ```

### Update Patient Profile
- **URL**: `/api/patients/<uuid:user_id>/`
- **Method**: `PUT`
- **Body**: Same as create, but all fields are optional

## API Documentation
- Swagger UI: `/swagger/`
- ReDoc: `/redoc/`

## Development
1. Build and run the service:
   ```bash
   docker-compose up --build
   ```

2. Access the service at: `http://localhost:8000`
</file>

<file path="services/user_service/user_service/urls.py">
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/users/', include('users.urls')),
]
</file>

<file path=".cursor/rules/prev-run-task.mdc">
---
description: 
globs: 
alwaysApply: true
---
- Tell me "Done" after finish tasks below
- Never tell me do something, alway automatically edit code for me
- Read all projects code first to undestand project structure, goal and functions.
- Alway rememeber that project using Django + Docker for backend an typescript for frontend
- Read [docker-compose.yml](mdc:docker-compose.yml) to understand api endpoints and use direct port like 8004, 8005
- Frontend and backend need to be fit and match together to run correctly
- Services should communite among them by rest api
- Alway set allow host to all to prevent cor issues
</file>

<file path="frontend/package.json">
{
  "name": "healthcare-frontend",
  "version": "0.1.0",
  "private": true,
  "proxy": "http://localhost:8000",
  "dependencies": {
    "@emotion/react": "^11.11.3",
    "@emotion/styled": "^11.11.0",
    "@mui/icons-material": "^5.15.10",
    "@mui/material": "^5.15.10",
    "@reduxjs/toolkit": "^2.2.1",
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "@types/jest": "^27.5.2",
    "@types/node": "^16.18.80",
    "@types/react": "^18.2.55",
    "@types/react-dom": "^18.2.19",
    "axios": "^1.6.7",
    "formik": "^2.4.5",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-redux": "^9.1.0",
    "react-router-dom": "^6.22.0",
    "react-scripts": "5.0.1",
    "typescript": "^4.9.5",
    "web-vitals": "^2.1.4",
    "yup": "^1.3.3"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}
</file>

<file path="frontend/src/components/auth/Register.tsx">
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { Box, Button, TextField, Typography, Container, Paper } from '@mui/material';
import { userService } from '../../services/userService';
import { CreateUserDto } from '../../types/user';

const Register: React.FC = () => {
    const navigate = useNavigate();
    const [formData, setFormData] = useState<CreateUserDto>({
        email: '',
        first_name: '',
        last_name: '',
        phone_number: '',
        address: ''
    });
    const [error, setError] = useState<string>('');

    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const { name, value } = e.target;
        setFormData(prev => ({
            ...prev,
            [name]: value
        }));
    };

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        try {
            await userService.create(formData);
            navigate('/login');
        } catch (err) {
            setError('Registration failed. Please try again.');
        }
    };

    return (
        <Container component="main" maxWidth="xs">
            <Paper elevation={3} sx={{ p: 4, mt: 8 }}>
                <Typography component="h1" variant="h5" align="center" gutterBottom>
                    Register
                </Typography>
                {error && (
                    <Typography color="error" align="center" gutterBottom>
                        {error}
                    </Typography>
                )}
                <Box component="form" onSubmit={handleSubmit} sx={{ mt: 1 }}>
                    <TextField
                        margin="normal"
                        required
                        fullWidth
                        id="email"
                        label="Email Address"
                        name="email"
                        autoComplete="email"
                        autoFocus
                        value={formData.email}
                        onChange={handleChange}
                    />
                    <TextField
                        margin="normal"
                        required
                        fullWidth
                        id="first_name"
                        label="First Name"
                        name="first_name"
                        autoComplete="given-name"
                        value={formData.first_name}
                        onChange={handleChange}
                    />
                    <TextField
                        margin="normal"
                        required
                        fullWidth
                        id="last_name"
                        label="Last Name"
                        name="last_name"
                        autoComplete="family-name"
                        value={formData.last_name}
                        onChange={handleChange}
                    />
                    <TextField
                        margin="normal"
                        required
                        fullWidth
                        id="phone_number"
                        label="Phone Number"
                        name="phone_number"
                        autoComplete="tel"
                        value={formData.phone_number}
                        onChange={handleChange}
                    />
                    <TextField
                        margin="normal"
                        required
                        fullWidth
                        id="address"
                        label="Address"
                        name="address"
                        multiline
                        rows={3}
                        value={formData.address}
                        onChange={handleChange}
                    />
                    <Button
                        type="submit"
                        fullWidth
                        variant="contained"
                        sx={{ mt: 3, mb: 2 }}
                    >
                        Register
                    </Button>
                    <Button
                        fullWidth
                        variant="text"
                        onClick={() => navigate('/login')}
                    >
                        Already have an account? Login
                    </Button>
                </Box>
            </Paper>
        </Container>
    );
};

export default Register;
</file>

<file path="frontend/src/components/Layout.tsx">
import React from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import {
  AppBar,
  Box,
  CssBaseline,
  Drawer,
  IconButton,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  Toolbar,
  Typography,
  Button,
  Avatar,
  Tooltip,
  Divider
} from '@mui/material';
import { useDispatch, useSelector } from 'react-redux';
import { RootState } from '../store';
import { logout } from '../store/slices/authSlice';
import MenuIcon from '@mui/icons-material/Menu';
import LogoutIcon from '@mui/icons-material/Logout';
import HomeIcon from '@mui/icons-material/Home';
import CalendarMonthIcon from '@mui/icons-material/CalendarMonth';
import QueryStatsIcon from '@mui/icons-material/QueryStats';
import ChatIcon from '@mui/icons-material/Chat';
import PeopleIcon from '@mui/icons-material/People';
import LocalHospitalIcon from '@mui/icons-material/LocalHospital';

const drawerWidth = 240;

const Layout: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const navigate = useNavigate();
  const location = useLocation();
  const dispatch = useDispatch();
  const { user } = useSelector((state: RootState) => state.auth);
  const [mobileOpen, setMobileOpen] = React.useState(false);

  const handleDrawerToggle = () => {
    setMobileOpen(!mobileOpen);
  };

  const handleLogout = () => {
    dispatch(logout());
    navigate('/login');
  };

  const menuItems = [
    { text: 'Home', path: '/', icon: <HomeIcon /> },
    { text: 'Appointments', path: '/appointments', icon: <CalendarMonthIcon /> },
    { text: 'Prediction', path: '/prediction', icon: <QueryStatsIcon /> },
    { text: 'Patients', path: '/patients', icon: <PeopleIcon /> },
    { text: 'Doctors', path: '/doctors', icon: <LocalHospitalIcon /> },
    { text: 'Chatbot', path: '/chatbot', icon: <ChatIcon /> },
  ];

  const drawer = (
    <Box sx={{ height: '100%', display: 'flex', flexDirection: 'column', background: 'linear-gradient(135deg, #e3f2fd 0%, #fce4ec 100%)' }}>
      <Toolbar sx={{ justifyContent: 'center', py: 3 }}>
        <Avatar sx={{ bgcolor: 'primary.main', width: 48, height: 48, mr: 1 }}>
          <LocalHospitalIcon fontSize="large" />
        </Avatar>
        <Typography variant="h6" fontWeight={700} color="primary.main">
          HealthCare
        </Typography>
      </Toolbar>
      <Divider sx={{ mb: 2 }} />
      <List sx={{ flexGrow: 1 }}>
        {menuItems.map((item) => (
          <ListItem
            key={item.text}
            button
            onClick={() => {
              navigate(item.path);
              setMobileOpen(false);
            }}
            sx={{
              backgroundColor: location.pathname === item.path ? 'primary.light' : 'inherit',
              color: location.pathname === item.path ? 'primary.contrastText' : 'text.primary',
              borderRadius: 2,
              mx: 1,
              my: 0.5,
              transition: 'background 0.2s',
              '&:hover': {
                backgroundColor: 'primary.main',
                color: 'primary.contrastText',
              },
            }}
          >
            <ListItemIcon sx={{ color: 'inherit' }}>{item.icon}</ListItemIcon>
            <ListItemText primary={item.text} />
          </ListItem>
        ))}
      </List>
      <Box sx={{ p: 2, textAlign: 'center' }}>
        <Typography variant="body2" color="text.secondary" gutterBottom>
          {user?.email}
        </Typography>
        <Tooltip title="Logout">
          <Button
            color="error"
            variant="contained"
            startIcon={<LogoutIcon />}
            onClick={handleLogout}
            sx={{ borderRadius: 3, fontWeight: 600 }}
            fullWidth
          >
            Logout
          </Button>
        </Tooltip>
      </Box>
    </Box>
  );

  return (
    <Box sx={{ display: 'flex' }}>
      <CssBaseline />
      <AppBar
        position="fixed"
        sx={{
          width: { sm: `calc(100% - ${drawerWidth}px)` },
          ml: { sm: `${drawerWidth}px` },
          bgcolor: 'background.paper',
          boxShadow: 1,
        }}
      >
        <Toolbar>
          <IconButton
            color="inherit"
            aria-label="open drawer"
            edge="start"
            onClick={handleDrawerToggle}
            sx={{ mr: 2, display: { sm: 'none' } }}
          >
            <MenuIcon />
          </IconButton>
          <Typography variant="h6" noWrap component="div" color="text.primary">
            {menuItems.find(item => item.path === location.pathname)?.text || 'Home'}
          </Typography>
        </Toolbar>
      </AppBar>
      <Box
        component="nav"
        sx={{ width: { sm: drawerWidth }, flexShrink: { sm: 0 } }}
      >
        <Drawer
          variant="temporary"
          open={mobileOpen}
          onClose={handleDrawerToggle}
          ModalProps={{
            keepMounted: true,
          }}
          sx={{
            display: { xs: 'block', sm: 'none' },
            '& .MuiDrawer-paper': { boxSizing: 'border-box', width: drawerWidth },
          }}
        >
          {drawer}
        </Drawer>
        <Drawer
          variant="permanent"
          sx={{
            display: { xs: 'none', sm: 'block' },
            '& .MuiDrawer-paper': { boxSizing: 'border-box', width: drawerWidth },
          }}
          open
        >
          {drawer}
        </Drawer>
      </Box>
      <Box
        component="main"
        sx={{
          flexGrow: 1,
          p: 3,
          width: { sm: `calc(100% - ${drawerWidth}px)` },
          minHeight: '100vh',
          bgcolor: 'background.default',
        }}
      >
        <Toolbar />
        {children}
      </Box>
    </Box>
  );
};

export default Layout;
</file>

<file path="frontend/src/components/UserForm.tsx">
import React from 'react';
import {
    Box,
    TextField,
    Button,
    Grid,
    MenuItem,
    Select,
    FormControl,
    InputLabel,
    SelectChangeEvent
} from '@mui/material';
import { CreateUserDto, CreatePatientDto, CreateDoctorDto } from '../types/user';

interface UserFormProps<T> {
    type: 'user' | 'patient' | 'doctor';
    initialData?: Partial<T>;
    onSubmit: (data: T) => void;
    onCancel: () => void;
}

type FormData = Partial<CreateUserDto & {
    specialization?: string;
    patient_type?: 'normal' | 'remote' | 'VIP';
}>;

const UserForm = <T extends CreateUserDto | CreatePatientDto | CreateDoctorDto>({
    type,
    initialData,
    onSubmit,
    onCancel
}: UserFormProps<T>) => {
    const [formData, setFormData] = React.useState<FormData>(initialData || {});

    const handleChange = (e: React.ChangeEvent<HTMLInputElement | { name?: string; value: unknown }>) => {
        const { name, value } = e.target;
        setFormData(prev => ({
            ...prev,
            [name as string]: value
        }));
    };

    const handleSelectChange = (e: SelectChangeEvent) => {
        const { name, value } = e.target;
        setFormData(prev => ({
            ...prev,
            [name]: value
        }));
    };

    const handleSubmit = (e: React.FormEvent) => {
        e.preventDefault();
        onSubmit(formData as T);
    };

    return (
        <Box component="form" onSubmit={handleSubmit} sx={{ mt: 2 }}>
            <Grid container spacing={2}>
                <Grid item xs={12} sm={6}>
                    <TextField
                        fullWidth
                        required
                        name="email"
                        label="Email"
                        type="email"
                        value={formData.email || ''}
                        onChange={handleChange}
                    />
                </Grid>
                <Grid item xs={12} sm={6}>
                    <TextField
                        fullWidth
                        required
                        name="first_name"
                        label="First Name"
                        value={formData.first_name || ''}
                        onChange={handleChange}
                    />
                </Grid>
                <Grid item xs={12} sm={6}>
                    <TextField
                        fullWidth
                        required
                        name="last_name"
                        label="Last Name"
                        value={formData.last_name || ''}
                        onChange={handleChange}
                    />
                </Grid>
                <Grid item xs={12} sm={6}>
                    <TextField
                        fullWidth
                        required
                        name="phone_number"
                        label="Phone Number"
                        value={formData.phone_number || ''}
                        onChange={handleChange}
                    />
                </Grid>
                <Grid item xs={12}>
                    <TextField
                        fullWidth
                        required
                        name="address"
                        label="Address"
                        multiline
                        rows={3}
                        value={formData.address || ''}
                        onChange={handleChange}
                    />
                </Grid>

                {type === 'doctor' && (
                    <Grid item xs={12}>
                        <TextField
                            fullWidth
                            required
                            name="specialization"
                            label="Specialization"
                            value={formData.specialization || ''}
                            onChange={handleChange}
                        />
                    </Grid>
                )}

                {type === 'patient' && (
                    <Grid item xs={12}>
                        <FormControl fullWidth required>
                            <InputLabel>Patient Type</InputLabel>
                            <Select
                                name="patient_type"
                                value={formData.patient_type || 'normal'}
                                onChange={handleSelectChange}
                                label="Patient Type"
                            >
                                <MenuItem value="normal">Normal</MenuItem>
                                <MenuItem value="remote">Remote</MenuItem>
                                <MenuItem value="VIP">VIP</MenuItem>
                            </Select>
                        </FormControl>
                    </Grid>
                )}
            </Grid>

            <Box sx={{ mt: 3, display: 'flex', justifyContent: 'flex-end', gap: 2 }}>
                <Button onClick={onCancel}>Cancel</Button>
                <Button type="submit" variant="contained" color="primary">
                    {initialData ? 'Update' : 'Create'}
                </Button>
            </Box>
        </Box>
    );
};

export default UserForm;
</file>

<file path="frontend/src/hooks/useAuth.ts">
import { useCallback } from 'react';
import { useAppDispatch } from './useAppDispatch';
import { useAppSelector } from './useAppSelector';
import { setCredentials, setError, setLoading, logout } from '../store/slices/authSlice';
import { RootState } from '../store';
import { LoginRequest, RegisterRequest, AuthResponse } from '../types/auth';
import authService from '../services/authService';

export const useAuth = () => {
    const dispatch = useAppDispatch();
    const { user, isAuthenticated, loading, error } = useAppSelector((state: RootState) => state.auth);

    const login = useCallback(async (data: LoginRequest) => {
        try {
            dispatch(setLoading(true));
            const response = await authService.login(data);
            dispatch(setCredentials(response));
            return response;
        } catch (error: any) {
            dispatch(setError(error.response?.data?.message || 'Login failed'));
            throw error;
        } finally {
            dispatch(setLoading(false));
        }
    }, [dispatch]);

    const register = useCallback(async (data: RegisterRequest) => {
        try {
            dispatch(setLoading(true));
            const response = await authService.register(data);
            dispatch(setCredentials(response));
            return response;
        } catch (error: any) {
            dispatch(setError(error.response?.data?.message || 'Registration failed'));
            throw error;
        } finally {
            dispatch(setLoading(false));
        }
    }, [dispatch]);

    const handleLogout = useCallback(() => {
        dispatch(logout());
    }, [dispatch]);

    return {
        user,
        isAuthenticated,
        loading,
        error,
        login,
        register,
        logout: handleLogout
    };
};
</file>

<file path="frontend/src/hooks/useDoctors.ts">
import { useCallback } from 'react';
import { useAppDispatch } from './useAppDispatch';
import { useAppSelector } from './useAppSelector';
import { RootState } from '../store';
import {
  setDoctors,
  addDoctor,
  updateDoctor,
  deleteDoctor,
  setLoading,
  setError,
} from '../store/slices/doctorSlice';
import axios from 'axios';
import { Doctor } from '../types/user';

interface DoctorState {
  doctors: Doctor[];
  loading: boolean;
  error: string | null;
}

const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8003';

export const useDoctors = () => {
  const dispatch = useAppDispatch();
  const doctors = useAppSelector((state: RootState) => (state.doctors as DoctorState).doctors);
  const loading = useAppSelector((state: RootState) => (state.doctors as DoctorState).loading);
  const error = useAppSelector((state: RootState) => (state.doctors as DoctorState).error);

  const fetchDoctors = useCallback(async () => {
    try {
      dispatch(setLoading(true));
      const token = localStorage.getItem('token');
      const response = await axios.get(`${API_URL}/doctor/doctors/`, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });
      if (response.data) {
        dispatch(setDoctors(response.data));
      }
    } catch (error) {
      dispatch(setError('Failed to fetch doctors'));
      console.error('Error fetching doctors:', error);
    } finally {
      dispatch(setLoading(false));
    }
  }, [dispatch]);

  const createDoctor = useCallback(async (doctorData: Omit<Doctor, 'id'>) => {
    try {
      dispatch(setLoading(true));
      const token = localStorage.getItem('token');
      const response = await axios.post(`${API_URL}/doctor/doctors/`, doctorData, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });
      if (response.data) {
        dispatch(addDoctor(response.data));
      }
    } catch (error) {
      dispatch(setError('Failed to create doctor'));
      console.error('Error creating doctor:', error);
    } finally {
      dispatch(setLoading(false));
    }
  }, [dispatch]);

  const updateDoctorById = useCallback(async (id: string, doctorData: Partial<Doctor>) => {
    try {
      dispatch(setLoading(true));
      const token = localStorage.getItem('token');
      const response = await axios.put(`${API_URL}/doctor/doctors/${id}/`, doctorData, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });
      if (response.data) {
        dispatch(updateDoctor(response.data));
      }
    } catch (error) {
      dispatch(setError('Failed to update doctor'));
      console.error('Error updating doctor:', error);
    } finally {
      dispatch(setLoading(false));
    }
  }, [dispatch]);

  const deleteDoctorById = useCallback(async (id: string) => {
    try {
      dispatch(setLoading(true));
      const token = localStorage.getItem('token');
      await axios.delete(`${API_URL}/doctor/doctors/${id}/`, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });
      dispatch(deleteDoctor(id));
    } catch (error) {
      dispatch(setError('Failed to delete doctor'));
      console.error('Error deleting doctor:', error);
    } finally {
      dispatch(setLoading(false));
    }
  }, [dispatch]);

  return {
    doctors,
    loading,
    error,
    fetchDoctors,
    createDoctor,
    updateDoctor: updateDoctorById,
    deleteDoctor: deleteDoctorById,
  };
};
</file>

<file path="frontend/src/index.tsx">
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';
import { ThemeProvider, CssBaseline } from '@mui/material';
import theme from './theme';
import { Provider } from 'react-redux';
import { store } from './store';

const root = ReactDOM.createRoot(
  document.getElementById('root') as HTMLElement
);
root.render(
  <React.StrictMode>
    <ThemeProvider theme={theme}>
      <CssBaseline />
      <Provider store={store}>
        <App />
      </Provider>
    </ThemeProvider>
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();
</file>

<file path="frontend/src/pages/DoctorManagement.tsx">
import React, { useState, useEffect } from 'react';
import {
    Box,
    Button,
    Container,
    Paper,
    Table,
    TableBody,
    TableCell,
    TableContainer,
    TableHead,
    TableRow,
    Typography,
    Dialog,
    DialogTitle,
    DialogContent,
    DialogActions,
    TextField
} from '@mui/material';
import doctorService from '../services/doctorService';
import { Doctor, CreateDoctorDto, UpdateDoctorDto } from '../types/user';
import { useAppSelector } from '../hooks/useAppSelector';
import { RootState } from '../store';

const DoctorManagement: React.FC = () => {
    const [doctors, setDoctors] = useState<Doctor[]>([]);
    const [open, setOpen] = useState(false);
    const [selectedDoctor, setSelectedDoctor] = useState<Doctor | null>(null);
    const [formData, setFormData] = useState<Partial<CreateDoctorDto>>({
        email: '',
        name: '',
        specialization: '',
        license_number: '',
        years_of_experience: 0,
        education: '',
        certifications: '',
        languages: ''
    });

    const { access } = useAppSelector((state: RootState) => state.auth);
    const token = access || 'mock-access-token';

    useEffect(() => {
        loadDoctors();
    }, []);

    const loadDoctors = async () => {
        try {
            const data = await doctorService.getAll(token);
            setDoctors(data);
        } catch (error) {
            console.error('Error loading doctors:', error);
        }
    };

    const handleOpen = (doctor?: Doctor) => {
        if (doctor) {
            setSelectedDoctor(doctor);
            setFormData({
                email: doctor.email,
                name: doctor.name,
                specialization: doctor.specialization,
                license_number: doctor.license_number,
                years_of_experience: doctor.years_of_experience,
                education: doctor.education,
                certifications: doctor.certifications,
                languages: doctor.languages
            });
        } else {
            setSelectedDoctor(null);
            setFormData({
                email: '',
                name: '',
                specialization: '',
                license_number: '',
                years_of_experience: 0,
                education: '',
                certifications: '',
                languages: ''
            });
        }
        setOpen(true);
    };

    const handleClose = () => {
        setOpen(false);
        setSelectedDoctor(null);
    };

    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const { name, value } = e.target;
        setFormData(prev => ({
            ...prev,
            [name]: name === 'years_of_experience' ? parseInt(value) || 0 : value
        }));
    };

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        try {
            if (selectedDoctor) {
                await doctorService.update(selectedDoctor.id, formData as UpdateDoctorDto, token);
            } else {
                await doctorService.create(formData as CreateDoctorDto, token);
            }
            handleClose();
            loadDoctors();
        } catch (error) {
            console.error('Error saving doctor:', error);
        }
    };

    const handleDelete = async (id: string) => {
        if (window.confirm('Are you sure you want to delete this doctor?')) {
            try {
                await doctorService.delete(id, token);
                loadDoctors();
            } catch (error) {
                console.error('Error deleting doctor:', error);
            }
        }
    };

    return (
        <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>
            <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>
                <Typography variant="h4" component="h1">
                    Doctor Management
                </Typography>
                <Button variant="contained" color="primary" onClick={() => handleOpen()}>
                    Add Doctor
                </Button>
            </Box>

            <TableContainer component={Paper}>
                <Table>
                    <TableHead>
                        <TableRow>
                            <TableCell>Name</TableCell>
                            <TableCell>Email</TableCell>
                            <TableCell>Specialization</TableCell>
                            <TableCell>Experience</TableCell>
                            <TableCell>Actions</TableCell>
                        </TableRow>
                    </TableHead>
                    <TableBody>
                        {doctors.map((doctor) => (
                            <TableRow key={doctor.id}>
                                <TableCell>{doctor.name}</TableCell>
                                <TableCell>{doctor.email}</TableCell>
                                <TableCell>{doctor.specialization}</TableCell>
                                <TableCell>{doctor.years_of_experience} years</TableCell>
                                <TableCell>
                                    <Button
                                        size="small"
                                        onClick={() => handleOpen(doctor)}
                                        sx={{ mr: 1 }}
                                    >
                                        Edit
                                    </Button>
                                    <Button
                                        size="small"
                                        color="error"
                                        onClick={() => handleDelete(doctor.id)}
                                    >
                                        Delete
                                    </Button>
                                </TableCell>
                            </TableRow>
                        ))}
                    </TableBody>
                </Table>
            </TableContainer>

            <Dialog open={open} onClose={handleClose} maxWidth="sm" fullWidth>
                <DialogTitle>
                    {selectedDoctor ? 'Edit Doctor' : 'Add Doctor'}
                </DialogTitle>
                <DialogContent>
                    <Box component="form" onSubmit={handleSubmit} sx={{ mt: 2 }}>
                        <TextField
                            fullWidth
                            label="Email"
                            name="email"
                            value={formData.email}
                            onChange={handleChange}
                            margin="normal"
                            required
                        />
                        <TextField
                            fullWidth
                            label="Name"
                            name="name"
                            value={formData.name}
                            onChange={handleChange}
                            margin="normal"
                            required
                        />
                        <TextField
                            fullWidth
                            label="Specialization"
                            name="specialization"
                            value={formData.specialization}
                            onChange={handleChange}
                            margin="normal"
                            required
                        />
                        <TextField
                            fullWidth
                            label="License Number"
                            name="license_number"
                            value={formData.license_number}
                            onChange={handleChange}
                            margin="normal"
                            required
                        />
                        <TextField
                            fullWidth
                            label="Years of Experience"
                            name="years_of_experience"
                            type="number"
                            value={formData.years_of_experience}
                            onChange={handleChange}
                            margin="normal"
                            required
                        />
                        <TextField
                            fullWidth
                            label="Education"
                            name="education"
                            value={formData.education}
                            onChange={handleChange}
                            margin="normal"
                            required
                        />
                        <TextField
                            fullWidth
                            label="Certifications"
                            name="certifications"
                            value={formData.certifications}
                            onChange={handleChange}
                            margin="normal"
                            multiline
                            rows={2}
                        />
                        <TextField
                            fullWidth
                            label="Languages"
                            name="languages"
                            value={formData.languages}
                            onChange={handleChange}
                            margin="normal"
                            required
                        />
                    </Box>
                </DialogContent>
                <DialogActions>
                    <Button onClick={handleClose}>Cancel</Button>
                    <Button onClick={handleSubmit} variant="contained" color="primary">
                        {selectedDoctor ? 'Update' : 'Create'}
                    </Button>
                </DialogActions>
            </Dialog>
        </Container>
    );
};

export default DoctorManagement;
</file>

<file path="frontend/src/pages/Login.tsx">
import React from 'react';
import { useNavigate } from 'react-router-dom';
import { useFormik } from 'formik';
import * as Yup from 'yup';
import {
  Box,
  Container,
  Paper,
  Typography,
  TextField,
  Button,
  Alert,
} from '@mui/material';
import axios from 'axios';

const validationSchema = Yup.object({
  email: Yup.string().email('Invalid email address').required('Required'),
  password: Yup.string().required('Required'),
});

const Login: React.FC = () => {
  const navigate = useNavigate();
  const [error, setError] = React.useState<string | null>(null);

  const formik = useFormik({
    initialValues: {
      email: '',
      password: '',
    },
    validationSchema,
    onSubmit: async (values) => {
      try {
        const response = await axios.post('http://localhost:8004/api/patients/login/', values);
        if (response.data.token) {
          localStorage.setItem('token', response.data.token);
          navigate('/');
        }
      } catch (err: any) {
        setError(err.response?.data?.message || 'Login failed');
      }
    },
  });

  return (
    <Container maxWidth="sm" sx={{
      minHeight: '100vh',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      background: 'linear-gradient(135deg, #e3f2fd 0%, #fce4ec 100%)',
    }}>
      <Box sx={{ width: '100%' }}>
        <Paper elevation={6} sx={{ p: 5, borderRadius: 5, boxShadow: 8, mt: 8 }}>
          <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center', mb: 2 }}>
            <img src="https://cdn-icons-png.flaticon.com/512/3774/3774299.png" alt="login" width={72} height={72} style={{ marginBottom: 8 }} />
            <Typography variant="h4" component="h1" fontWeight={700} gutterBottom align="center" color="primary.main">
              Login
            </Typography>
          </Box>
          {error && (
            <Alert severity="error" sx={{ mb: 2 }}>
              {error}
            </Alert>
          )}
          <form onSubmit={formik.handleSubmit}>
            <TextField
              fullWidth
              id="email"
              name="email"
              label="Email"
              value={formik.values.email}
              onChange={formik.handleChange}
              error={formik.touched.email && Boolean(formik.errors.email)}
              helperText={formik.touched.email && formik.errors.email}
              margin="normal"
              InputProps={{ sx: { borderRadius: 3 } }}
            />
            <TextField
              fullWidth
              id="password"
              name="password"
              label="Password"
              type="password"
              value={formik.values.password}
              onChange={formik.handleChange}
              error={formik.touched.password && Boolean(formik.errors.password)}
              helperText={formik.touched.password && formik.errors.password}
              margin="normal"
              InputProps={{ sx: { borderRadius: 3 } }}
            />
            <Button
              type="submit"
              fullWidth
              variant="contained"
              color="primary"
              size="large"
              sx={{ mt: 3, borderRadius: 3, fontWeight: 600, py: 1.5, fontSize: 18 }}
            >
              Login
            </Button>
          </form>
        </Paper>
      </Box>
    </Container>
  );
};

export default Login;
</file>

<file path="frontend/src/pages/PatientManagement.tsx">
import React, { useState, useEffect } from 'react';
import {
    Box,
    Button,
    Container,
    Paper,
    Table,
    TableBody,
    TableCell,
    TableContainer,
    TableHead,
    TableRow,
    Typography,
    Dialog,
    DialogTitle,
    DialogContent,
    DialogActions,
    TextField,
    FormControl,
    InputLabel,
    Select,
    MenuItem,
    SelectChangeEvent
} from '@mui/material';
import patientService from '../services/patientService';
import { Patient, CreatePatientDto, UpdatePatientDto } from '../types/user';
import { useAppSelector } from '../hooks/useAppSelector';
import { RootState } from '../store';

const PatientManagement: React.FC = () => {
    const [patients, setPatients] = useState<Patient[]>([]);
    const [open, setOpen] = useState(false);
    const [selectedPatient, setSelectedPatient] = useState<Patient | null>(null);
    const [formData, setFormData] = useState<Partial<CreatePatientDto>>({
        email: '',
        name: '',
        age: 0,
        gender: 'male',
        phone: '',
        address: '',
        patient_type: 'normal'
    });

    const { access } = useAppSelector((state: RootState) => state.auth);
    const token = access || 'mock-access-token';

    useEffect(() => {
        loadPatients();
    }, []);

    const loadPatients = async () => {
        try {
            const data = await patientService.getAll(token);
            setPatients(data);
        } catch (error) {
            console.error('Error loading patients:', error);
        }
    };

    const handleOpen = (patient?: Patient) => {
        if (patient) {
            setSelectedPatient(patient);
            setFormData({
                email: patient.email,
                name: patient.name,
                age: patient.age,
                gender: patient.gender,
                phone: patient.phone,
                address: patient.address,
                patient_type: patient.patient_type,
                medical_history: patient.medical_history,
                preferred_contact_method: patient.preferred_contact_method,
                timezone: patient.timezone
            });
        } else {
            setSelectedPatient(null);
            setFormData({
                email: '',
                name: '',
                age: 0,
                gender: 'male',
                phone: '',
                address: '',
                patient_type: 'normal'
            });
        }
        setOpen(true);
    };

    const handleClose = () => {
        setOpen(false);
        setSelectedPatient(null);
    };

    const handleChange = (e: React.ChangeEvent<HTMLInputElement | { name?: string; value: unknown }> | SelectChangeEvent) => {
        const { name, value } = e.target;
        setFormData(prev => ({
            ...prev,
            [name as string]: value
        }));
    };

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        try {
            if (selectedPatient) {
                await patientService.update(selectedPatient.id, formData as UpdatePatientDto, token);
            } else {
                await patientService.create(formData as CreatePatientDto, token);
            }
            handleClose();
            loadPatients();
        } catch (error) {
            console.error('Error saving patient:', error);
        }
    };

    const handleDelete = async (id: string) => {
        if (window.confirm('Are you sure you want to delete this patient?')) {
            try {
                await patientService.delete(id, token);
                loadPatients();
            } catch (error) {
                console.error('Error deleting patient:', error);
            }
        }
    };

    return (
        <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>
            <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>
                <Typography variant="h4" component="h1">
                    Patient Management
                </Typography>
                <Button variant="contained" color="primary" onClick={() => handleOpen()}>
                    Add Patient
                </Button>
            </Box>

            <TableContainer component={Paper}>
                <Table>
                    <TableHead>
                        <TableRow>
                            <TableCell>Name</TableCell>
                            <TableCell>Email</TableCell>
                            <TableCell>Phone</TableCell>
                            <TableCell>Type</TableCell>
                            <TableCell>Actions</TableCell>
                        </TableRow>
                    </TableHead>
                    <TableBody>
                        {patients.map((patient) => (
                            <TableRow key={patient.id}>
                                <TableCell>{patient.name}</TableCell>
                                <TableCell>{patient.email}</TableCell>
                                <TableCell>{patient.phone}</TableCell>
                                <TableCell>{patient.patient_type}</TableCell>
                                <TableCell>
                                    <Button
                                        size="small"
                                        onClick={() => handleOpen(patient)}
                                        sx={{ mr: 1 }}
                                    >
                                        Edit
                                    </Button>
                                    <Button
                                        size="small"
                                        color="error"
                                        onClick={() => handleDelete(patient.id)}
                                    >
                                        Delete
                                    </Button>
                                </TableCell>
                            </TableRow>
                        ))}
                    </TableBody>
                </Table>
            </TableContainer>

            <Dialog open={open} onClose={handleClose} maxWidth="sm" fullWidth>
                <DialogTitle>
                    {selectedPatient ? 'Edit Patient' : 'Add Patient'}
                </DialogTitle>
                <DialogContent>
                    <Box component="form" onSubmit={handleSubmit} sx={{ mt: 2 }}>
                        <TextField
                            fullWidth
                            label="Email"
                            name="email"
                            value={formData.email}
                            onChange={handleChange}
                            margin="normal"
                            required
                        />
                        <TextField
                            fullWidth
                            label="Name"
                            name="name"
                            value={formData.name}
                            onChange={handleChange}
                            margin="normal"
                            required
                        />
                        <TextField
                            fullWidth
                            label="Age"
                            name="age"
                            type="number"
                            value={formData.age}
                            onChange={handleChange}
                            margin="normal"
                            required
                        />
                        <FormControl fullWidth margin="normal">
                            <InputLabel>Gender</InputLabel>
                            <Select
                                name="gender"
                                value={formData.gender}
                                onChange={handleChange}
                                label="Gender"
                                required
                            >
                                <MenuItem value="male">Male</MenuItem>
                                <MenuItem value="female">Female</MenuItem>
                                <MenuItem value="other">Other</MenuItem>
                            </Select>
                        </FormControl>
                        <TextField
                            fullWidth
                            label="Phone"
                            name="phone"
                            value={formData.phone}
                            onChange={handleChange}
                            margin="normal"
                            required
                        />
                        <TextField
                            fullWidth
                            label="Address"
                            name="address"
                            value={formData.address}
                            onChange={handleChange}
                            margin="normal"
                            required
                            multiline
                            rows={3}
                        />
                        <TextField
                            fullWidth
                            label="Medical History"
                            name="medical_history"
                            value={formData.medical_history}
                            onChange={handleChange}
                            margin="normal"
                            multiline
                            rows={3}
                        />
                        <FormControl fullWidth margin="normal">
                            <InputLabel>Patient Type</InputLabel>
                            <Select
                                name="patient_type"
                                value={formData.patient_type}
                                onChange={handleChange}
                                label="Patient Type"
                                required
                            >
                                <MenuItem value="normal">Normal</MenuItem>
                                <MenuItem value="remote">Remote</MenuItem>
                                <MenuItem value="vip">VIP</MenuItem>
                            </Select>
                        </FormControl>
                        <FormControl fullWidth margin="normal">
                            <InputLabel>Preferred Contact Method</InputLabel>
                            <Select
                                name="preferred_contact_method"
                                value={formData.preferred_contact_method}
                                onChange={handleChange}
                                label="Preferred Contact Method"
                            >
                                <MenuItem value="phone">Phone</MenuItem>
                                <MenuItem value="email">Email</MenuItem>
                                <MenuItem value="video">Video Call</MenuItem>
                            </Select>
                        </FormControl>
                        <TextField
                            fullWidth
                            label="Timezone"
                            name="timezone"
                            value={formData.timezone}
                            onChange={handleChange}
                            margin="normal"
                        />
                    </Box>
                </DialogContent>
                <DialogActions>
                    <Button onClick={handleClose}>Cancel</Button>
                    <Button onClick={handleSubmit} variant="contained" color="primary">
                        {selectedPatient ? 'Update' : 'Create'}
                    </Button>
                </DialogActions>
            </Dialog>
        </Container>
    );
};

export default PatientManagement;
</file>

<file path="frontend/src/pages/Prediction.tsx">
import React from 'react';
import { useFormik } from 'formik';
import * as Yup from 'yup';
import {
  Box,
  Container,
  Paper,
  Typography,
  TextField,
  Button,
  FormControlLabel,
  Checkbox,
  Alert,
  MenuItem
} from '@mui/material';
import axios from 'axios';

const validationSchema = Yup.object({
  patient_id: Yup.string().required('Required'),
  age: Yup.number().required('Required').min(0, 'Age must be positive'),
  gender: Yup.string().required('Required'),
});

const Prediction: React.FC = () => {
  const [error, setError] = React.useState<string | null>(null);
  const [prediction, setPrediction] = React.useState<string | null>(null);
  const [symptoms, setSymptoms] = React.useState({
    fever: false,
    cough: false,
    fatigue: false,
    headache: false,
    soreThroat: false,
    runnyNose: false,
    bodyAche: false,
    nausea: false,
    vomiting: false,
    diarrhea: false,
    shortnessBreath: false,
    chestPain: false,
    rash: false,
    jointPain: false,
  });

  const formik = useFormik({
    initialValues: {
      patient_id: '',
      age: '',
      gender: '',
    },
    validationSchema,
    onSubmit: async (values) => {
      try {
        const token = localStorage.getItem('token');
        const response = await axios.post(
          'http://localhost:8000/api/predict/',
          {
            ...values,
            symptoms,
          },
          {
            headers: {
              Authorization: `Bearer ${token}`,
            },
          }
        );
        if (response.data) {
          setPrediction(response.data.predicted_disease);
        }
      } catch (err: any) {
        setError(err.response?.data?.error || 'Failed to get prediction');
      }
    },
  });

  const handleSymptomChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setSymptoms({
      ...symptoms,
      [event.target.name]: event.target.checked,
    });
  };

  return (
    <Container maxWidth="sm">
      <Box sx={{ mt: 4 }}>
        <Paper elevation={3} sx={{ p: 4 }}>
          <Typography variant="h4" component="h1" gutterBottom align="center">
            Disease Prediction
          </Typography>
          {error && (
            <Alert severity="error" sx={{ mb: 2 }}>
              {error}
            </Alert>
          )}
          {prediction && (
            <Alert severity="info" sx={{ mb: 2 }}>
              Predicted condition: {prediction}
            </Alert>
          )}
          <form onSubmit={formik.handleSubmit}>
            <TextField
              fullWidth
              id="patient_id"
              name="patient_id"
              label="Patient ID"
              value={formik.values.patient_id}
              onChange={formik.handleChange}
              error={formik.touched.patient_id && Boolean(formik.errors.patient_id)}
              helperText={formik.touched.patient_id && formik.errors.patient_id}
              margin="normal"
            />
            <TextField
              fullWidth
              id="age"
              name="age"
              label="Age"
              type="number"
              value={formik.values.age}
              onChange={formik.handleChange}
              error={formik.touched.age && Boolean(formik.errors.age)}
              helperText={formik.touched.age && formik.errors.age}
              margin="normal"
            />
            <TextField
              select
              fullWidth
              id="gender"
              name="gender"
              label="Gender"
              value={formik.values.gender}
              onChange={formik.handleChange}
              error={formik.touched.gender && Boolean(formik.errors.gender)}
              helperText={formik.touched.gender && formik.errors.gender}
              margin="normal"
            >
              <MenuItem value="male">Male</MenuItem>
              <MenuItem value="female">Female</MenuItem>
            </TextField>
            <Typography variant="h6" sx={{ mt: 2, mb: 1 }}>
              Symptoms
            </Typography>
            <Box sx={{ display: 'flex', flexDirection: 'column' }}>
              {Object.entries(symptoms).map(([key, value]) => (
                <FormControlLabel
                  key={key}
                  control={
                    <Checkbox
                      checked={value}
                      onChange={handleSymptomChange}
                      name={key}
                    />
                  }
                  label={key
                    .replace(/([A-Z])/g, ' $1')
                    .replace(/^./, (str) => str.toUpperCase())}
                />
              ))}
            </Box>
            <Button
              type="submit"
              fullWidth
              variant="contained"
              color="primary"
              sx={{ mt: 3 }}
            >
              Get Prediction
            </Button>
          </form>
        </Paper>
      </Box>
    </Container>
  );
};

export default Prediction;
</file>

<file path="frontend/src/services/authService.ts">
import axios from 'axios';
import { API_ENDPOINTS } from '../config/api';
import { RegisterRequest, LoginRequest, AuthResponse } from '../types/auth';

const authService = {
    login: async (data: LoginRequest): Promise<AuthResponse> => {
        const response = await axios.post(API_ENDPOINTS.AUTH.LOGIN, data);
        return response.data;
    },

    register: async (data: RegisterRequest): Promise<AuthResponse> => {
        const response = await axios.post(API_ENDPOINTS.AUTH.REGISTER, data);
        return response.data;
    },

    refreshToken: async (refresh: string): Promise<{ access: string }> => {
        const response = await axios.post(API_ENDPOINTS.AUTH.REFRESH, { refresh });
        return response.data;
    },

    getProfile: async (token: string): Promise<any> => {
        const response = await axios.get(API_ENDPOINTS.USERS.PROFILE, {
            headers: { Authorization: `Bearer ${token}` }
        });
        return response.data;
    }
};

export default authService;
</file>

<file path="frontend/src/store/slices/authSlice.ts">
import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import { AuthState, User } from '../../types/auth';

const mockUser: User = {
    id: '1',
    email: 'admin@example.com',
    role: 'admin',
    is_active: true,
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString()
};

const initialState: AuthState = {
    user: mockUser,
    access: 'mock-access-token',
    refresh: 'mock-refresh-token',
    isAuthenticated: true,
    loading: false,
    error: null
};

const authSlice = createSlice({
    name: 'auth',
    initialState,
    reducers: {
        setCredentials: (state, action: PayloadAction<{ user: User; access: string; refresh: string }>) => {
            state.user = action.payload.user;
            state.access = action.payload.access;
            state.refresh = action.payload.refresh;
            state.isAuthenticated = true;
            state.error = null;
        },
        setLoading: (state, action: PayloadAction<boolean>) => {
            state.loading = action.payload;
        },
        setError: (state, action: PayloadAction<string | null>) => {
            state.error = action.payload;
        },
        logout: (state) => {
            state.user = mockUser;
            state.access = 'mock-access-token';
            state.refresh = 'mock-refresh-token';
            state.isAuthenticated = true;
            state.error = null;
        }
    }
});

export const { setCredentials, setLoading, setError, logout } = authSlice.actions;
export default authSlice.reducer;
</file>

<file path="frontend/src/types/auth.ts">
export interface User {
    id: string;
    email: string;
    role: 'patient' | 'doctor' | 'admin';
    is_active: boolean;
    created_at: string;
    updated_at: string;
}

export interface AuthResponse {
    user: {
        id: string;
        email: string;
        username: string;
        role: 'patient' | 'doctor' | 'admin';
        is_active: boolean;
        created_at: string;
        updated_at: string;
    };
    access: string;
    refresh: string;
}

export interface LoginRequest {
    email: string;
    password: string;
}

export interface RegisterRequest {
    email: string;
    username: string;
    password: string;
    password2: string;
    role: 'patient' | 'doctor';
    // Patient-specific fields
    name?: string;
    age?: number;
    gender?: 'male' | 'female' | 'other';
    phone?: string;
    address?: string;
    // Doctor-specific fields
    specialization?: string;
    license_number?: string;
    years_of_experience?: number;
}

export interface AuthState {
    user: User | null;
    access: string | null;
    refresh: string | null;
    isAuthenticated: boolean;
    loading: boolean;
    error: string | null;
}
</file>

<file path="seed_data.sql">
-- Create doctor database and table
CREATE DATABASE IF NOT EXISTS doctor_db;
USE doctor_db;

CREATE TABLE IF NOT EXISTS doctor_doctor (
    id VARCHAR(64) PRIMARY KEY,
    email VARCHAR(255) UNIQUE NOT NULL,
    name VARCHAR(100) NOT NULL,
    specialization VARCHAR(100) NOT NULL,
    license_number VARCHAR(50) UNIQUE NOT NULL,
    years_of_experience INT NOT NULL,
    education TEXT NOT NULL,
    certifications TEXT,
    languages VARCHAR(200) NOT NULL,
    created_at DATETIME NOT NULL,
    updated_at DATETIME NOT NULL
);

-- Create patient database and table
CREATE DATABASE IF NOT EXISTS patient_db;
USE patient_db;

CREATE TABLE IF NOT EXISTS patients_patient (
    id VARCHAR(64) PRIMARY KEY,
    email VARCHAR(255) UNIQUE NOT NULL,
    name VARCHAR(100) NOT NULL,
    age INT NOT NULL,
    gender VARCHAR(10) NOT NULL,
    phone VARCHAR(15) NOT NULL,
    address TEXT NOT NULL,
    medical_history TEXT,
    patient_type VARCHAR(20) NOT NULL,
    preferred_contact_method VARCHAR(20),
    timezone VARCHAR(50),
    created_at DATETIME NOT NULL,
    updated_at DATETIME NOT NULL
);

-- Seed data for doctors
USE doctor_db;
-- Update the seed data with role-based specializations
INSERT INTO doctor_doctor (id, email, name, specialization, license_number, years_of_experience, education, certifications, languages, created_at, updated_at)
VALUES
    -- General Practitioners (GPs)
    ('1', 'dr.smith@hospital.com', 'Dr. John Smith', 'General Practitioner', 'MD323456', 10, 'Harvard Medical School', 'Board Certified in Family Medicine', 'English, Spanish', NOW(), NOW()),
    ('2', 'dr.doe@hospital.com', 'Dr. Jane Doe', 'General Practitioner', 'MD123457', 8, 'Johns Hopkins University', 'Board Certified in Primary Care', 'English, French', NOW(), NOW()),
    
    -- Specialists
    ('3', 'dr.johnson@hospital.com', 'Dr. Alice Johnson', 'Pediatrics Specialist', 'MD123458', 12, 'Stanford Medical School', 'Board Certified in Pediatrics', 'English, Mandarin', NOW(), NOW()),
    ('4', 'dr.wilson@hospital.com', 'Dr. Bob Wilson', 'Orthopedics Specialist', 'MD123459', 15, 'Mayo Clinic School of Medicine', 'Board Certified in Orthopedics', 'English, German', NOW(), NOW()),
    ('5', 'dr.brown@hospital.com', 'Dr. Carol Brown', 'Dermatology Specialist', 'MD123460', 7, 'Yale School of Medicine', 'Board Certified in Dermatology', 'English, Italian', NOW(), NOW()),
    ('6', 'dr.lee@hospital.com', 'Dr. David Lee', 'Psychiatry Specialist', 'MD123461', 9, 'Columbia University', 'Board Certified in Psychiatry', 'English, Russian', NOW(), NOW()),
    
    -- Surgeons
    ('7', 'dr.davis@hospital.com', 'Dr. Eve Davis', 'Ophthalmology Surgeon', 'MD123462', 11, 'UCLA Medical School', 'Board Certified in Ophthalmology', 'English, Japanese', NOW(), NOW()),
    ('8', 'dr.miller@hospital.com', 'Dr. Frank Miller', 'Gynecology Surgeon', 'MD123463', 13, 'Duke University', 'Board Certified in Gynecology', 'English, Portuguese', NOW(), NOW()),
    ('9', 'dr.taylor@hospital.com', 'Dr. Grace Taylor', 'Urology Surgeon', 'MD123464', 6, 'University of Michigan', 'Board Certified in Urology', 'English, Arabic', NOW(), NOW()),
    ('10', 'dr.clark@hospital.com', 'Dr. Henry Clark', 'Endocrinology Specialist', 'MD123465', 14, 'University of Pennsylvania', 'Board Certified in Endocrinology', 'English, Korean', NOW(), NOW());
-- Seed data for patients
USE patient_db;
INSERT INTO patients_patient (id, email, name, age, gender, phone, address, medical_history, patient_type, preferred_contact_method, timezone, created_at, updated_at)
VALUES
    ('1', 'alice.brown@email.com', 'Alice Brown', 32, 'female', '+1987654321', '123 Main St, Boston, MA', 'No significant medical history', 'normal', 'email', 'America/New_York', NOW(), NOW()),
    ('2', 'robert.taylor@email.com', 'Robert Taylor', 37, 'male', '+1987654322', '456 Oak Ave, Chicago, IL', 'Hypertension', 'normal', 'phone', 'America/Chicago', NOW(), NOW()),
    ('3', 'maria.garcia@email.com', 'Maria Garcia', 27, 'female', '+1987654323', '789 Pine Rd, Miami, FL', 'Asthma', 'remote', 'video', 'America/New_York', NOW(), NOW()),
    ('4', 'james.anderson@email.com', 'James Anderson', 44, 'male', '+1987654324', '321 Elm St, Seattle, WA', 'Type 2 Diabetes', 'vip', 'email', 'America/Los_Angeles', NOW(), NOW()),
    ('5', 'lisa.martinez@email.com', 'Lisa Martinez', 30, 'female', '+1987654325', '654 Maple Dr, Denver, CO', 'No significant medical history', 'normal', 'phone', 'America/Denver', NOW(), NOW()),
    ('6', 'william.thompson@email.com', 'William Thompson', 40, 'male', '+1987654326', '987 Cedar Ln, Phoenix, AZ', 'Arthritis', 'vip', 'video', 'America/Phoenix', NOW(), NOW()),
    ('7', 'emma.white@email.com', 'Emma White', 24, 'female', '+1987654327', '147 Birch St, Portland, OR', 'No significant medical history', 'normal', 'email', 'America/Los_Angeles', NOW(), NOW()), 
    ('8', 'daniel.lee@email.com', 'Daniel Lee', 47, 'male', '+1987654328', '258 Spruce Ave, Houston, TX', 'Heart Disease', 'remote', 'phone', 'America/Chicago', NOW(), NOW()),
    ('9', 'sophia.clark@email.com', 'Sophia Clark', 29, 'female', '+1987654329', '369 Willow Rd, Atlanta, GA', 'Migraine', 'vip', 'video', 'America/New_York', NOW(), NOW()),
    ('10', 'matthew.rodriguez@email.com', 'Matthew Rodriguez', 34, 'male', '+1987654330', '741 Ash St, San Diego, CA', 'No significant medical history', 'normal', 'email', 'America/Los_Angeles', NOW(), NOW()),
    ('11', 'olivia.wilson@email.com', 'Olivia Wilson', 31, 'female', '+1987654331', '852 Oak St, Austin, TX', 'Anxiety', 'normal', 'phone', 'America/Chicago', NOW(), NOW()),
    ('12', 'ethan.moore@email.com', 'Ethan Moore', 38, 'male', '+1987654332', '963 Pine Ave, Nashville, TN', 'High Cholesterol', 'vip', 'email', 'America/Chicago', NOW(), NOW()),
    ('13', 'ava.jackson@email.com', 'Ava Jackson', 26, 'female', '+1987654333', '159 Maple Rd, Las Vegas, NV', 'No significant medical history', 'normal', 'email', 'America/Los_Angeles', NOW(), NOW()),
    ('14', 'noah.martin@email.com', 'Noah Martin', 42, 'male', '+1987654334', '357 Cedar St, Philadelphia, PA', 'Sleep Apnea', 'remote', 'phone', 'America/New_York', NOW(), NOW()),
    ('15', 'isabella.thompson@email.com', 'Isabella Thompson', 28, 'female', '+1987654335', '486 Birch Ave, San Francisco, CA', 'No significant medical history', 'normal', 'video', 'America/Los_Angeles', NOW(), NOW()),
    ('16', 'liam.davis@email.com', 'Liam Davis', 45, 'male', '+1987654336', '753 Willow St, Washington, DC', 'Hypertension', 'vip', 'email', 'America/New_York', NOW(), NOW()),
    ('17', 'mia.anderson@email.com', 'Mia Anderson', 33, 'female', '+1987654337', '951 Elm Rd, Dallas, TX', 'No significant medical history', 'remote', 'phone', 'America/Chicago', NOW(), NOW()),
    ('18', 'lucas.wilson@email.com', 'Lucas Wilson', 39, 'male', '+1987654338', '264 Spruce Ave, Minneapolis, MN', 'Type 1 Diabetes', 'normal', 'video', 'America/Chicago', NOW(), NOW()),
    ('19', 'charlotte.brown@email.com', 'Charlotte Brown', 25, 'female', '+1987654339', '852 Oak St, Portland, ME', 'No significant medical history', 'normal', 'email', 'America/New_York', NOW(), NOW()),
    ('20', 'mason.taylor@email.com', 'Mason Taylor', 36, 'male', '+1987654340', '963 Pine Rd, Salt Lake City, UT', 'Asthma', 'vip', 'phone', 'America/Denver', NOW(), NOW());
</file>

<file path="services/appointment_service/appointment_service/serializers.py">
from rest_framework import serializers
from .models import Appointment
import uuid

class AppointmentSerializer(serializers.ModelSerializer):
    class Meta:
        model = Appointment
        fields = [
            'id', 'patient_id', 'doctor_id', 'date', 'time',
            'status', 'created_at', 'updated_at', 'notes',
            'service_type', 'duration'
        ]
        read_only_fields = ['id', 'created_at', 'updated_at']

    def validate_patient_id(self, value):
        # Accept any string value
        return str(value)

    def validate_doctor_id(self, value):
        # Accept any string value
        return str(value)

    def create(self, validated_data):
        # Generate a unique ID for new appointments
        validated_data['id'] = str(uuid.uuid4())
        return super().create(validated_data)
</file>

<file path="services/appointment_service/appointment_service/settings.py">
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY', 'django-insecure-your-secret-key-here')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DJANGO_DEBUG', 'True') == 'True'

ALLOWED_HOSTS = ['*']

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'drf_yasg',
    'corsheaders',
    'appointment_service',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'appointment_service.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'appointment_service.wsgi.application'

# Database
MONGODB_HOST = os.getenv('MONGODB_HOST', 'localhost')
MONGODB_PORT = os.getenv('MONGODB_PORT', '27017')

DATABASES = {
    'default': {
        'ENGINE': 'djongo',
        'NAME': 'appointment_db',
        'ENFORCE_SCHEMA': False,
        'CLIENT': {
            'host': f'mongodb://{MONGODB_HOST}:{MONGODB_PORT}/',
        }
    }
}

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# CORS settings
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",  # Replace with your frontend URL
]

CORS_ALLOW_CREDENTIALS = True

# REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],
}

# Swagger settings
SWAGGER_SETTINGS = {
    'SECURITY_DEFINITIONS': {
        'Basic': {
            'type': 'basic'
        }
    },
    'USE_SESSION_AUTH': False,
}
</file>

<file path="services/chatbot_service/app/urls.py">
from django.urls import path
from . import views

urlpatterns = [
    path('chat/', views.chat, name='chat'),  # Match /chat/ endpoint
]
</file>

<file path="services/chatbot_service/app/views.py">
import os
import json
import requests
from datetime import datetime, date
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.utils.decorators import method_decorator
from collections import Counter
from chatbot_core.conversation import ConversationManager
from chatbot_core.diagnosis import update_diagnosis_state, get_diagnosis_response

# External service URLs - based on docker-compose.yml
DOCTOR_SERVICE_URL = "http://doctor_service:8000/api/doctors/"
PATIENT_SERVICE_URL = "http://patient_service:8000/api/patients/"
APPOINTMENT_SERVICE_URL = "http://appointment_service:8000/api/appointments/"

# Đường dẫn tuyệt đối tới file KB
KB_PATH = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'kb', 'diseases.json')

with open(KB_PATH, encoding='utf-8') as f:
    KB = json.load(f)

ALL_SYMPTOMS = set()
for disease in KB.values():
    ALL_SYMPTOMS.update(disease['symptoms'])

# Khởi tạo conversation manager
conversation_manager = ConversationManager()

# Appointment booking helper functions
def get_doctors_list():
    """Lấy danh sách bác sĩ từ doctor_service"""
    try:
        response = requests.get(DOCTOR_SERVICE_URL, timeout=5)
        if response.status_code == 200:
            doctors = response.json()
            return doctors if isinstance(doctors, list) else doctors.get('results', [])
        return []
    except Exception as e:
        print(f"Error fetching doctors: {e}")
        return []

def get_patients_list():
    """Lấy danh sách bệnh nhân từ patient_service"""
    try:
        response = requests.get(PATIENT_SERVICE_URL, timeout=5)
        if response.status_code == 200:
            patients = response.json()
            return patients if isinstance(patients, list) else patients.get('results', [])
        return []
    except Exception as e:
        print(f"Error fetching patients: {e}")
        return []

def create_appointment(appointment_data):
    """Tạo appointment mới"""
    try:
        response = requests.post(APPOINTMENT_SERVICE_URL, json=appointment_data, timeout=5)
        if response.status_code == 201:
            return response.json(), None
        return None, f"Lỗi tạo lịch hẹn: {response.status_code}"
    except Exception as e:
        print(f"Error creating appointment: {e}")
        return None, f"Lỗi kết nối: {str(e)}"

def parse_appointment_state(history):
    """Phân tích trạng thái đặt lịch từ history"""
    state = {
        'is_booking': False,
        'patient_id': None,
        'doctor_id': None,
        'date': None,
        'time': None,
        'service_type': 'general',
        'duration': 30,
        'step': 'ask_booking'  # ask_booking, select_patient, select_doctor, select_date, select_time, confirm
    }

    booking_confirmed = False
    ask_booking_msg_index = -1

    # Tìm xem user đã đồng ý đặt lịch chưa
    for i, msg in enumerate(history):
        if msg['sender'] == 'bot' and 'đặt lịch hẹn khám không?' in msg['text']:
            ask_booking_msg_index = i
        elif msg['sender'] == 'user' and msg.get('answer') == 'có' and ask_booking_msg_index != -1 and i == ask_booking_msg_index + 1:
            # User trả lời "Có" ngay sau câu hỏi đặt lịch của bot
            # Và câu hỏi đặt lịch không phải là câu hỏi triệu chứng
            bot_question_text = history[ask_booking_msg_index]['text']
            if 'Bạn có bị ' not in bot_question_text:
                 booking_confirmed = True
                 state['is_booking'] = True
                 state['step'] = 'select_patient' # Bắt đầu chọn bệnh nhân
                 break # Đã xác nhận đặt lịch, không cần check thêm câu trả lời "có" nữa
        elif msg['sender'] == 'user' and msg.get('answer') == 'không' and ask_booking_msg_index != -1 and i == ask_booking_msg_index + 1:
            # User trả lời "Không" ngay sau câu hỏi đặt lịch của bot
            bot_question_text = history[ask_booking_msg_index]['text']
            if 'Bạn có bị ' not in bot_question_text:
                state['is_booking'] = False
                state['step'] = 'ask_booking' # Reset về trạng thái ban đầu
                # Không break ở đây, vì có thể user từ chối rồi lại đồng ý sau đó trong history (ít khả năng)
    
    if not state['is_booking']:
        # Nếu chưa xác nhận đặt lịch, thì không phân tích các bước tiếp theo
        return state

    # Nếu đã xác nhận đặt lịch, tiếp tục phân tích các bước
    current_step_processed = False
    for i, msg in enumerate(history):
        if not state['is_booking']: # Có thể user từ chối ở giữa chừng
            break

        if msg['sender'] == 'bot':
            if state['step'] == 'select_patient' and 'Bạn là bệnh nhân nào?' in msg['text']:
                current_step_processed = False
            elif state['step'] == 'select_doctor' and 'Bạn muốn đặt lịch với bác sĩ nào?' in msg['text']:
                current_step_processed = False
            elif state['step'] == 'select_date' and 'Bạn muốn khám ngày nào?' in msg['text']:
                current_step_processed = False
            elif state['step'] == 'select_time' and 'Bạn muốn khám lúc mấy giờ?' in msg['text']:
                current_step_processed = False
        
        elif msg['sender'] == 'user' and not msg.get('answer') and not current_step_processed:
            if state['step'] == 'select_patient':
                try:
                    selection = int(msg['text'].strip())
                    patients = get_patients_list()
                    if 1 <= selection <= len(patients):
                        state['patient_id'] = patients[selection - 1]['user_id']
                        state['step'] = 'select_doctor'
                        current_step_processed = True
                except:
                    pass # Lỗi nhập liệu, giữ nguyên step, bot sẽ hỏi lại
            elif state['step'] == 'select_doctor':
                try:
                    selection = int(msg['text'].strip())
                    doctors = get_doctors_list()
                    if 1 <= selection <= len(doctors):
                        state['doctor_id'] = doctors[selection - 1]['user_id']
                        state['step'] = 'select_date'
                        current_step_processed = True
                except:
                    pass
            elif state['step'] == 'select_date':
                try:
                    date_str = msg['text'].strip()
                    parsed_date = datetime.strptime(date_str, '%Y-%m-%d').date()
                    if parsed_date > date.today():
                        state['date'] = parsed_date.strftime('%Y-%m-%d')
                        state['step'] = 'select_time'
                        current_step_processed = True
                except:
                    pass
            elif state['step'] == 'select_time':
                try:
                    time_str = msg['text'].strip()
                    parsed_time = datetime.strptime(time_str, '%H:%M').time()
                    state['time'] = parsed_time.strftime('%H:%M:%S')
                    state['step'] = 'confirm' # Chuyển sang xác nhận hoặc tạo lịch
                    current_step_processed = True
                except:
                    pass
    return state

def handle_appointment_booking(history):
    """Xử lý quy trình đặt lịch hẹn"""
    if not history:
        return None
    
    last_msg = history[-1]
    state = parse_appointment_state(history) # state giờ đã chính xác hơn
    
    # Nếu user từ chối đặt lịch (ngay sau câu hỏi đặt lịch)
    if last_msg.get('answer') == 'không' and len(history) >=2:
        bot_question = history[-2]
        if bot_question.get('sender') == 'bot' and \
           'đặt lịch hẹn khám không?' in bot_question.get('text', '') and \
           'Bạn có bị ' not in bot_question.get('text', ''):
            return "Cảm ơn bạn đã sử dụng dịch vụ. Chúc bạn sớm khỏe lại!"
    
    # Ưu tiên xử lý nếu state cho thấy đang bắt đầu đặt lịch (chọn bệnh nhân)
    # Hoặc nếu đang ở bước chọn bệnh nhân và lựa chọn trước đó không hợp lệ (patient_id is None)
    if state['is_booking'] and state['step'] == 'select_patient' and state['patient_id'] is None:
        # Điều kiện này được kích hoạt khi:
        # 1. User vừa trả lời "Có" cho câu hỏi "Bạn có muốn đặt lịch hẹn khám không?"
        #    (parse_appointment_state đã set is_booking=True, step='select_patient').
        # 2. User đã ở bước chọn bệnh nhân nhưng nhập liệu không hợp lệ ở lần trước.

        patients = get_patients_list()
        if not patients:
            return "Xin lỗi, hiện tại không thể kết nối đến hệ thống bệnh nhân. Vui lòng thử lại sau."
        
        patient_list_str = "\n".join([f"{i+1}. {p['name']} (ID: {p['user_id']})" for i, p in enumerate(patients[:10])])
        
        # Kiểm tra xem có phải user vừa nhập sai ở bước chọn bệnh nhân không
        prefix = ""
        # Nếu tin nhắn cuối từ user, không phải là câu trả lời có/không (tức là user đã nhập text)
        # và trước đó bot đã hỏi "Bạn là bệnh nhân nào?" (cho thấy đang ở bước chọn bệnh nhân)
        if last_msg['sender'] == 'user' and not last_msg.get('answer'):
            # Tìm câu hỏi "Bạn là bệnh nhân nào?" gần nhất của bot
            asked_for_patient = False
            for i in range(len(history) - 2, -1, -1): # Lùi từ tin nhắn trước last_msg
                if history[i]['sender'] == 'bot' and 'Bạn là bệnh nhân nào?' in history[i]['text']:
                    asked_for_patient = True
                    break
            if asked_for_patient: # Chỉ thêm prefix nếu user nhập sai sau khi đã được hỏi
                 prefix = "Lựa chọn không hợp lệ. "

        return f"{prefix}Bạn là bệnh nhân nào? Vui lòng chọn số thứ tự:\n{patient_list_str}"

    # Xử lý các bước tiếp theo chỉ khi state['is_booking'] là True và user nhập text
    if state['is_booking'] and last_msg['sender'] == 'user' and not last_msg.get('answer'):
        # Lưu ý: parse_appointment_state đã cập nhật state['step'] nếu user nhập đúng ở bước trước.
        # Nên ở đây, chúng ta sẽ dựa vào state['step'] mới nhất.

        if state['step'] == 'select_doctor' and state['doctor_id'] is None: # Cần chọn bác sĩ
            # parse_appointment_state đã xác nhận patient_id ở bước trước
            doctors = get_doctors_list()
            if not doctors:
                return "Xin lỗi, hiện tại không thể kết nối đến hệ thống bác sĩ. Vui lòng thử lại sau."
            doctor_list_str = "\n".join([f"{i+1}. Bác sĩ {d['name']} - {d.get('specialty', 'Chưa xác định')}" for i, d in enumerate(doctors[:10])])
            
            prefix = ""
            if last_msg['sender'] == 'user' and not last_msg.get('answer'):
                asked_for_doctor = False
                for i in range(len(history) - 2, -1, -1):
                    if history[i]['sender'] == 'bot' and 'Bạn muốn đặt lịch với bác sĩ nào?' in history[i]['text']:
                        asked_for_doctor = True
                        break
                if asked_for_doctor:
                    prefix = "Lựa chọn không hợp lệ. "
            return f"{prefix}Bạn muốn đặt lịch với bác sĩ nào? Vui lòng chọn số thứ tự:\n{doctor_list_str}"
        
        elif state['step'] == 'select_date' and state['date'] is None: # Cần chọn ngày
            # parse_appointment_state đã xác nhận doctor_id
            prefix = ""
            if last_msg['sender'] == 'user' and not last_msg.get('answer'):
                asked_for_date = False
                for i in range(len(history) - 2, -1, -1):
                    if history[i]['sender'] == 'bot' and 'Bạn muốn khám ngày nào?' in history[i]['text']:
                        asked_for_date = True
                        break
                if asked_for_date: # Chỉ thêm prefix nếu user nhập sai sau khi đã được hỏi
                     prefix = "Định dạng ngày không đúng hoặc ngày không hợp lệ. "
            return f"{prefix}Bạn muốn khám ngày nào? (Định dạng: YYYY-MM-DD, ví dụ: 2024-06-01)"

        elif state['step'] == 'select_time' and state['time'] is None: # Cần chọn giờ
            # parse_appointment_state đã xác nhận date
            prefix = ""
            if last_msg['sender'] == 'user' and not last_msg.get('answer'):
                asked_for_time = False
                for i in range(len(history) - 2, -1, -1):
                    if history[i]['sender'] == 'bot' and 'Bạn muốn khám lúc mấy giờ?' in history[i]['text']:
                        asked_for_time = True
                        break
                if asked_for_time:
                    prefix = "Định dạng giờ không đúng. "
            return f"{prefix}Bạn muốn khám lúc mấy giờ? (Định dạng: HH:MM, ví dụ: 14:30)"
        
        elif state['step'] == 'confirm': # Đã có đủ thông tin, tạo lịch hẹn
            # parse_appointment_state đã xác nhận time
            # Create appointment
            appointment_data = {
                'patient_id': state['patient_id'],
                'doctor_id': state['doctor_id'],
                'date': state['date'],
                'time': state['time'], # Time đã có :SS từ parse_appointment_state
                'service_type': state['service_type'],
                'duration': state['duration'],
                'status': 'pending',
                'notes': 'Lịch hẹn được tạo thông qua chatbot'
            }
            
            appointment, error = create_appointment(appointment_data)
            if appointment:
                time_display = datetime.strptime(state['time'], '%H:%M:%S').strftime('%H:%M')
                return f"✅ Đặt lịch thành công!\n\nThông tin lịch hẹn:\n- Ngày: {state['date']}\n- Giờ: {time_display}\n- Trạng thái: Chờ xác nhận\n\nMã lịch hẹn: {appointment.get('id', 'N/A')}\n\nCảm ơn bạn đã sử dụng dịch vụ!"
            else:
                return f"❌ Có lỗi xảy ra khi đặt lịch: {error}\n\nVui lòng thử lại sau hoặc liên hệ trực tiếp với bệnh viện."
    
    return None

@csrf_exempt
def chat(request):
    if request.method == 'OPTIONS':
        response = JsonResponse({'detail': 'CORS preflight'})
        response["Access-Control-Allow-Origin"] = "*"
        response["Access-Control-Allow-Methods"] = "POST, OPTIONS"
        response["Access-Control-Allow-Headers"] = "Content-Type"
        return response
    
    if request.method != 'POST':
        return JsonResponse({'error': 'Chỉ hỗ trợ POST'}, status=405)
    
    try:
        data = json.loads(request.body)
        user_message = data.get('message', '')
        session_id = data.get('session_id', 'default')
        history = data.get('history', [])
        
        # Lấy trạng thái cuộc hội thoại
        state = conversation_manager.get_conversation(session_id)
        
        # Xử lý câu trả lời yes/no cho việc đặt lịch
        if len(history) >= 2:
            last_bot_msg = history[-2]
            if last_bot_msg.get('sender') == 'bot' and 'đặt lịch hẹn khám không?' in last_bot_msg.get('text', ''):
                if user_message.lower() in ['có', 'vâng', 'đúng', 'yes', 'y']:
                    state.is_booking = True
                    state.booking_step = 'select_patient'
                else:
                    state.is_booking = False
                    state.booking_step = 'ask_booking'
        
        # Xử lý đặt lịch hẹn
        if state.is_booking:
            if state.booking_step == 'select_patient':
                patients = get_patients_list()
                if not patients:
                    return JsonResponse({
                        'response': "Xin lỗi, hiện tại không thể kết nối đến hệ thống bệnh nhân. Vui lòng thử lại sau."
                    })
                
                try:
                    selection = int(user_message.strip())
                    if 1 <= selection <= len(patients):
                        state.patient_id = patients[selection - 1]['user_id']
                        state.booking_step = 'select_doctor'
                    else:
                        return JsonResponse({
                            'response': f"Lựa chọn không hợp lệ. Vui lòng chọn số từ 1 đến {len(patients)}."
                        })
                except:
                    return JsonResponse({
                        'response': "Vui lòng nhập số thứ tự của bệnh nhân."
                    })
            
            if state.booking_step == 'select_doctor':
                doctors = get_doctors_list()
                if not doctors:
                    return JsonResponse({
                        'response': "Xin lỗi, hiện tại không thể kết nối đến hệ thống bác sĩ. Vui lòng thử lại sau."
                    })
                
                try:
                    selection = int(user_message.strip())
                    if 1 <= selection <= len(doctors):
                        state.doctor_id = doctors[selection - 1]['user_id']
                        state.booking_step = 'select_date'
                    else:
                        return JsonResponse({
                            'response': f"Lựa chọn không hợp lệ. Vui lòng chọn số từ 1 đến {len(doctors)}."
                        })
                except:
                    return JsonResponse({
                        'response': "Vui lòng nhập số thứ tự của bác sĩ."
                    })
            
            if state.booking_step == 'select_date':
                try:
                    date_str = user_message.strip()
                    parsed_date = datetime.strptime(date_str, '%Y-%m-%d').date()
                    if parsed_date > date.today():
                        state.appointment_date = parsed_date.strftime('%Y-%m-%d')
                        state.booking_step = 'select_time'
                    else:
                        return JsonResponse({
                            'response': "Ngày không hợp lệ. Vui lòng chọn một ngày trong tương lai."
                        })
                except:
                    return JsonResponse({
                        'response': "Định dạng ngày không đúng. Vui lòng nhập theo định dạng YYYY-MM-DD."
                    })
            
            if state.booking_step == 'select_time':
                try:
                    time_str = user_message.strip()
                    parsed_time = datetime.strptime(time_str, '%H:%M').time()
                    state.appointment_time = parsed_time.strftime('%H:%M:%S')
                    
                    # Tạo lịch hẹn
                    appointment_data = {
                        'patient_id': state.patient_id,
                        'doctor_id': state.doctor_id,
                        'date': state.appointment_date,
                        'time': state.appointment_time,
                        'status': 'pending'
                    }
                    
                    appointment, error = create_appointment(appointment_data)
                    if appointment:
                        # Reset trạng thái đặt lịch
                        state.is_booking = False
                        state.booking_step = 'ask_booking'
                        state.patient_id = None
                        state.doctor_id = None
                        state.appointment_date = None
                        state.appointment_time = None
                        
                        return JsonResponse({
                            'response': f"Đã đặt lịch hẹn thành công! Mã lịch hẹn: {appointment['id']}"
                        })
                    else:
                        return JsonResponse({
                            'response': f"Không thể tạo lịch hẹn: {error}"
                        })
                except:
                    return JsonResponse({
                        'response': "Định dạng giờ không đúng. Vui lòng nhập theo định dạng HH:MM."
                    })
            
            # Trả về câu hỏi tiếp theo dựa trên bước hiện tại
            if state.booking_step == 'select_patient':
                patients = get_patients_list()
                patient_list_str = "\n".join([f"{i+1}. {p['name']} (ID: {p['user_id']})" for i, p in enumerate(patients[:10])])
                return JsonResponse({
                    'response': f"Bạn là bệnh nhân nào? Vui lòng chọn số thứ tự:\n{patient_list_str}"
                })
            
            elif state.booking_step == 'select_doctor':
                doctors = get_doctors_list()
                doctor_list_str = "\n".join([f"{i+1}. Bác sĩ {d['name']} - {d.get('specialty', 'Chưa xác định')}" for i, d in enumerate(doctors[:10])])
                return JsonResponse({
                    'response': f"Bạn muốn đặt lịch với bác sĩ nào? Vui lòng chọn số thứ tự:\n{doctor_list_str}"
                })
            
            elif state.booking_step == 'select_date':
                return JsonResponse({
                    'response': "Bạn muốn khám ngày nào? (Định dạng: YYYY-MM-DD, ví dụ: 2024-06-01)"
                })
            
            elif state.booking_step == 'select_time':
                return JsonResponse({
                    'response': "Bạn muốn khám lúc mấy giờ? (Định dạng: HH:MM, ví dụ: 09:30)"
                })
        
        # Xử lý chẩn đoán bệnh
        update_diagnosis_state(state.diagnosis_state, user_message)
        response, is_diagnosis = get_diagnosis_response(state.diagnosis_state)
        
        # Nếu đã chẩn đoán xong, hỏi về đặt lịch
        if is_diagnosis:
            response += "\n\nBạn có muốn đặt lịch hẹn khám không?"
            state.is_booking = True
            state.booking_step = 'select_patient'
        
        return JsonResponse({
            'response': response
        })
    
    except Exception as e:
        response = JsonResponse({'error': str(e)})
        response["Access-Control-Allow-Origin"] = "*"
        return response
</file>

<file path="services/chatbot_service/Dockerfile">
FROM python:3.10-slim

WORKDIR /app

COPY . /app
COPY requirements.txt /app/

RUN pip install --no-cache-dir -r requirements.txt

EXPOSE 8000

CMD ["python", "manage.py", "runserver", "0.0.0.0:8000"]
</file>

<file path="services/doctor_service/doctor_service/urls.py">
"""
URL configuration for patient-service project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/5.2/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import include, path
from drf_yasg import openapi
from drf_yasg.views import get_schema_view
from rest_framework import permissions

schema_view = get_schema_view(
    openapi.Info(
        title="Doctor Service API",
        default_version='v1',
        description="API documentation for Doctor Service",
    ),
    public=True,
    permission_classes=(permissions.AllowAny,),
)

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/doctors/', include('doctor.urls')),
    
    # Swagger documentation
    path('swagger/', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'),
    path('redoc/', schema_view.with_ui('redoc', cache_timeout=0), name='schema-redoc'),
]
</file>

<file path="services/doctor_service/requirements.txt">
Django>=4.2,<5.0
djangorestframework>=3.14.0
mysqlclient>=2.1.0
django-environ>=0.10.0
drf-yasg==1.21.5
pyyaml>=6.0
uritemplate>=4.1.1
django-cors-headers>=4.3.1
djangorestframework-simplejwt>=5.3.0
</file>

<file path="services/patient_service/patient_service/asgi.py">
"""
ASGI config for patient-service project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'patient_service.settings')

application = get_asgi_application()
</file>

<file path="services/patient_service/patient_service/urls.py">
"""
URL configuration for patient-service project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/5.2/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path, include
from drf_yasg.views import get_schema_view
from drf_yasg import openapi
from rest_framework import permissions

schema_view = get_schema_view(
    openapi.Info(
        title="Patient Service API",
        default_version='v1',
        description="API documentation for Patient Service",
    ),
    public=True,
    permission_classes=(permissions.AllowAny,),
)

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/patients/', include('patients.urls')),
    
    # Swagger documentation
    path('swagger/', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'),
    path('redoc/', schema_view.with_ui('redoc', cache_timeout=0), name='schema-redoc'),
]
</file>

<file path="services/patient_service/patient_service/wsgi.py">
"""
WSGI config for patient-service project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'patient_service.settings')

application = get_wsgi_application()
</file>

<file path="frontend/src/App.tsx">
import React from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import Layout from './components/Layout';
import Home from './pages/Home';
import Login from './pages/Login';
import Appointments from './pages/Appointments';
import PatientManagement from './pages/PatientManagement';
import DoctorManagement from './pages/DoctorManagement';
import ChatbotPage from './pages/ChatbotPage';
import Prediction from './pages/Prediction';

const App: React.FC = () => {
    return (
        <Router>
            <Routes>
                <Route path="/" element={<Layout><Home /></Layout>} />
                <Route path="/login" element={<Layout><Login /></Layout>} />
                <Route path="/appointments" element={<Layout><Appointments /></Layout>} />
                <Route path="/patients" element={<Layout><PatientManagement /></Layout>} />
                <Route path="/doctors" element={<Layout><DoctorManagement /></Layout>} />
                <Route path="/chatbot" element={<Layout><ChatbotPage /></Layout>} />
                <Route path="/prediction" element={<Layout><Prediction /></Layout>} />
                <Route path="*" element={<Navigate to="/" />} />
            </Routes>
        </Router>
    );
};

export default App;
</file>

<file path="frontend/src/hooks/useAppointments.ts">
import { useCallback } from 'react';
import { useAppDispatch } from './useAppDispatch';
import { useAppSelector } from './useAppSelector';
import { useApi } from './useApi';
import { RootState } from '../store';
import {
  setAppointments,
  addAppointment,
  updateAppointment,
  deleteAppointment,
  setLoading,
  setError,
} from '../store/slices/appointmentSlice';
import axios from 'axios';
import { Appointment, AppointmentListResponse } from '../types/appointment';

interface AppointmentState {
  appointments: Appointment[];
  loading: boolean;
  error: string | null;
}

export const useAppointments = () => {
  const dispatch = useAppDispatch();
  const { execute: appointmentsApi } = useApi<Appointment[]>();
  const appointments = useAppSelector((state: RootState) => (state.appointments as AppointmentState).appointments);
  const loading = useAppSelector((state: RootState) => (state.appointments as AppointmentState).loading);
  const error = useAppSelector((state: RootState) => (state.appointments as AppointmentState).error);

  const fetchAppointments = useCallback(async () => {
    try {
      dispatch(setLoading(true));
      const token = localStorage.getItem('token');
      const response = await axios.get<AppointmentListResponse>('http://localhost:8005/api/appointments/', {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });
      // Handle Django REST Framework pagination response
      dispatch(setAppointments(response.data.results || []));
    } catch (error) {
      console.error('Error fetching appointments:', error);
      dispatch(setError('Failed to fetch appointments'));
    } finally {
      dispatch(setLoading(false));
    }
  }, [dispatch]);

  const createAppointment = useCallback(async (appointment: Omit<Appointment, 'id' | 'created_at' | 'updated_at'>) => {
    try {
      dispatch(setLoading(true));
      const token = localStorage.getItem('token');
      const response = await axios.post<Appointment>(
        'http://localhost:8005/api/appointments/',
        appointment,
        {
          headers: {
            Authorization: `Bearer ${token}`,
            'Content-Type': 'application/json',
          },
        }
      );
      // Django REST Framework returns the created object directly
      dispatch(addAppointment(response.data));
      return response.data;
    } catch (error) {
      console.error('Error creating appointment:', error);
      dispatch(setError('Failed to create appointment'));
      throw error;
    } finally {
      dispatch(setLoading(false));
    }
  }, [dispatch]);

  const updateAppointmentById = useCallback(async (id: string, appointment: Partial<Appointment>) => {
    try {
      dispatch(setLoading(true));
      const token = localStorage.getItem('token');
      const response = await axios.put<Appointment>(
        `http://localhost:8005/api/appointments/${id}/`,
        appointment,
        {
          headers: {
            Authorization: `Bearer ${token}`,
            'Content-Type': 'application/json',
          },
        }
      );
      dispatch(updateAppointment(response.data));
      return response.data;
    } catch (error) {
      console.error('Error updating appointment:', error);
      dispatch(setError('Failed to update appointment'));
      throw error;
    } finally {
      dispatch(setLoading(false));
    }
  }, [dispatch]);

  const deleteAppointmentById = useCallback(async (id: string) => {
    try {
      dispatch(setLoading(true));
      const token = localStorage.getItem('token');
      await axios.delete(
        `http://localhost:8005/api/appointments/${id}/`,
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );
      dispatch(deleteAppointment(id));
    } catch (error) {
      console.error('Error deleting appointment:', error);
      dispatch(setError('Failed to delete appointment'));
      throw error;
    } finally {
      dispatch(setLoading(false));
    }
  }, [dispatch]);

  const confirmAppointment = useCallback(async (id: string) => {
    try {
      dispatch(setLoading(true));
      const token = localStorage.getItem('token');
      const response = await axios.post(
        `http://localhost:8005/api/appointments/${id}/confirm/`,
        {},
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );
      // Refresh appointments after confirmation
      await fetchAppointments();
      return response.data;
    } catch (error) {
      console.error('Error confirming appointment:', error);
      dispatch(setError('Failed to confirm appointment'));
      throw error;
    } finally {
      dispatch(setLoading(false));
    }
  }, [dispatch, fetchAppointments]);

  const cancelAppointment = useCallback(async (id: string) => {
    try {
      dispatch(setLoading(true));
      const token = localStorage.getItem('token');
      const response = await axios.post(
        `http://localhost:8005/api/appointments/${id}/cancel/`,
        {},
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );
      // Refresh appointments after cancellation
      await fetchAppointments();
      return response.data;
    } catch (error) {
      console.error('Error cancelling appointment:', error);
      dispatch(setError('Failed to cancel appointment'));
      throw error;
    } finally {
      dispatch(setLoading(false));
    }
  }, [dispatch, fetchAppointments]);

  const completeAppointment = useCallback(async (id: string) => {
    try {
      dispatch(setLoading(true));
      const token = localStorage.getItem('token');
      const response = await axios.post(
        `http://localhost:8005/api/appointments/${id}/complete/`,
        {},
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );
      // Refresh appointments after completion
      await fetchAppointments();
      return response.data;
    } catch (error) {
      console.error('Error completing appointment:', error);
      dispatch(setError('Failed to complete appointment'));
      throw error;
    } finally {
      dispatch(setLoading(false));
    }
  }, [dispatch, fetchAppointments]);

  return {
    appointments,
    loading,
    error,
    fetchAppointments,
    createAppointment,
    updateAppointment: updateAppointmentById,
    deleteAppointment: deleteAppointmentById,
    confirmAppointment,
    cancelAppointment,
    completeAppointment,
  };
};
</file>

<file path="frontend/src/types/appointment.ts">
export interface Appointment {
  id: string;
  patient_id: string;
  doctor_id: string;
  date: string;
  time: string;
  status: 'pending' | 'confirmed' | 'cancelled' | 'completed';
  notes?: string;
  service_type: string;
  duration: number;
  created_at: string;
  updated_at: string;
}

// Django REST Framework pagination response
export interface AppointmentListResponse {
  count: number;
  next: string | null;
  previous: string | null;
  results: Appointment[];
}

export interface AppointmentResponse {
  status: number;
  data: Appointment | Appointment[];
  message?: string;
}
</file>

<file path="frontend/src/types/user.ts">
export interface User {
    id: string;
    email: string;
    first_name: string;
    last_name: string;
    phone_number: string;
    address: string;
    created_at: string;
    updated_at: string;
}

export interface CreateUserDto {
    email: string;
    first_name: string;
    last_name: string;
    phone_number: string;
    address: string;
}

export interface UpdateUserDto {
    email?: string;
    first_name?: string;
    last_name?: string;
    phone_number?: string;
    address?: string;
}

export interface Patient {
    id: string;
    email: string;
    name: string;
    age: number;
    gender: string;
    phone: string;
    address: string;
    medical_history?: string;
    patient_type: 'normal' | 'remote' | 'vip';
    preferred_contact_method?: 'phone' | 'email' | 'video';
    timezone?: string;
    created_at: string;
    updated_at: string;
}

export interface CreatePatientDto {
    email: string;
    name: string;
    age: number;
    gender: string;
    phone: string;
    address: string;
    medical_history?: string;
    patient_type: 'normal' | 'remote' | 'vip';
    preferred_contact_method?: 'phone' | 'email' | 'video';
    timezone?: string;
}

export interface UpdatePatientDto {
    email?: string;
    name?: string;
    age?: number;
    gender?: string;
    phone?: string;
    address?: string;
    medical_history?: string;
    patient_type?: 'normal' | 'remote' | 'vip';
    preferred_contact_method?: 'phone' | 'email' | 'video';
    timezone?: string;
}

export interface Doctor {
    id: string;
    email: string;
    name: string;
    specialization: string;
    license_number: string;
    years_of_experience: number;
    education: string;
    certifications?: string;
    languages: string;
    created_at: string;
    updated_at: string;
}

export interface CreateDoctorDto {
    email: string;
    name: string;
    specialization: string;
    license_number: string;
    years_of_experience: number;
    education: string;
    certifications?: string;
    languages: string;
}

export interface UpdateDoctorDto {
    email?: string;
    name?: string;
    specialization?: string;
    license_number?: string;
    years_of_experience?: number;
    education?: string;
    certifications?: string;
    languages?: string;
}
</file>

<file path="gateway/src/nginx.conf">
# Rate limiting zones
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;

# Upstream definitions
upstream user {
    server user_service:8000;
}

upstream doctor {
    server doctor_service:8000;
}

upstream patient {
    server patient-service:8000;
}

upstream appointment {
    server appointment_service:8000;
}

upstream laboratory {
    server laboratory_service:8000;
}

upstream chatbot {
    server chatbot_service:8000;
}

server {
    listen 8000;
    server_name localhost;

    # Root location - simple API gateway message
    location = / {
        default_type application/json;
        return 200 '{"message": "Healthcare Microservices API Gateway", "status": "running"}';
    }

    # Global CORS handling
    location / {
        # CORS headers
        add_header 'Access-Control-Allow-Origin' 'http://localhost:3000' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
        add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;

        # Handle OPTIONS method
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' 'http://localhost:3000' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 204;
        }

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Content-Type-Options "nosniff" always;

        # Default proxy settings
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Core Services
    location /api/users/ {
        limit_req zone=api_limit burst=20 nodelay;
        proxy_pass http://user;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Main Healthcare Services
    location /api/doctors/ {
        limit_req zone=api_limit burst=20 nodelay;
        proxy_pass http://doctor;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /api/patients/ {
        limit_req zone=api_limit burst=20 nodelay;
        proxy_pass http://patient;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /api/appointments/ {
        limit_req zone=api_limit burst=20 nodelay;
        proxy_pass http://appointment;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /api/laboratory/ {
        limit_req zone=api_limit burst=20 nodelay;
        proxy_pass http://laboratory;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /api/chatbot/ {
        limit_req zone=api_limit burst=20 nodelay;
        proxy_pass http://chatbot/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /api/predict/ {
        limit_req zone=api_limit burst=20 nodelay;
        proxy_pass http://laboratory;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Health check endpoint
    location /health {
        access_log off;
        return 200 'healthy\n';
    }

    # Error handling
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
}
</file>

<file path="services/appointment_service/appointment_service/models.py">
from django.db import models
from django.core.validators import MinValueValidator, MaxValueValidator

class Appointment(models.Model):
    STATUS_CHOICES = [
        ('pending', 'Pending'),
        ('confirmed', 'Confirmed'),
        ('cancelled', 'Cancelled'),
        ('completed', 'Completed')
    ]

    id = models.CharField(primary_key=True, max_length=64)
    patient_id = models.CharField(max_length=64)  # References patient-service
    doctor_id = models.CharField(max_length=64)   # References doctor-service
    date = models.DateField()
    time = models.TimeField()
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='pending')
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    notes = models.TextField(blank=True, null=True)
    service_type = models.CharField(max_length=100)  # Type of medical service
    duration = models.IntegerField(  # Duration in minutes
        validators=[MinValueValidator(15), MaxValueValidator(240)],
        default=30
    )

    class Meta:
        indexes = [
            models.Index(fields=['patient_id']),
            models.Index(fields=['doctor_id']),
            models.Index(fields=['date', 'time']),
            models.Index(fields=['status'])
        ]
        ordering = ['date', 'time']

    def __str__(self):
        return f"Appointment {self.id} - {self.patient_id} with {self.doctor_id} on {self.date} at {self.time}"
</file>

<file path="services/chatbot_service/chatbot_core/settings.py">
"""
Django settings for chatbot_core project.

Generated by 'django-admin startproject' using Django 4.2.21.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-vy%8p2uqmzfb@!orq%*kz$(-yql*4n@+wtb6mpvmf#ur41@-0_'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['localhost', '127.0.0.1']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'app',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# CORS settings
CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
]

ROOT_URLCONF = 'chatbot_core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'chatbot_core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.dummy',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
</file>

<file path="services/chatbot_service/requirements.txt">
Django==3.2.24
djangorestframework==3.14.0
django-cors-headers==4.3.1
djongo==1.3.6
pymongo==3.12.3
python-dotenv==1.0.0
requests==2.31.0
</file>

<file path="services/doctor_service/doctor_service/settings.py">
import os
from pathlib import Path
from datetime import timedelta

BASE_DIR = Path(__file__).resolve().parent.parent

SECRET_KEY = 'your-secret-key'
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
ALLOWED_HOSTS = ['*', 'doctor_service', 'doctor_service:8000', 'localhost', '127.0.0.1']

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_simplejwt',
    'drf_yasg',
    'corsheaders',
    'doctor.apps.DoctorConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# CORS settings
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",  # Replace with your frontend URL
]

CORS_ALLOW_CREDENTIALS = True

# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'doctor': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

ROOT_URLCONF = 'doctor_service.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'doctor_service.wsgi.application'

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'doctor_db',
        'USER': 'user',
        'PASSWORD': '123456',
        'HOST': 'mysql_db',
        'PORT': '3306',
        'OPTIONS': {
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
            'charset': 'utf8mb4',
        },
    }
}
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 8,
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
]

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# User Service URL
USER_SERVICE_URL = 'http://user_service:8000'

# REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.AllowAny',
    ),
}
</file>

<file path="services/doctor_service/doctor/migrations/0001_initial.py">
# Generated by Django 4.2.21 on 2025-06-10 03:41

from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Doctor',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('user_id', models.UUIDField(unique=True)),
                ('specialization', models.CharField(max_length=100)),
                ('license_number', models.CharField(max_length=50, unique=True)),
                ('years_of_experience', models.IntegerField()),
                ('education', models.TextField()),
                ('certifications', models.TextField(blank=True, null=True)),
                ('languages', models.CharField(max_length=200)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('username', models.CharField(max_length=150, unique=True)),
                ('role', models.CharField(choices=[('patient', 'Patient'), ('doctor', 'Doctor'), ('admin', 'Admin')], max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('date_joined', models.DateTimeField(auto_now_add=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='doctor_user_set', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='doctor_user_set', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Schedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day_of_week', models.IntegerField(choices=[(0, 'Monday'), (1, 'Tuesday'), (2, 'Wednesday'), (3, 'Thursday'), (4, 'Friday'), (5, 'Saturday'), (6, 'Sunday')])),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('is_available', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('doctor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedules', to='doctor.doctor')),
            ],
            options={
                'unique_together': {('doctor', 'day_of_week')},
            },
        ),
    ]
</file>

<file path="services/doctor_service/doctor/serializers.py">
from rest_framework import serializers
from .models import Doctor, Schedule

class ScheduleSerializer(serializers.ModelSerializer):
    class Meta:
        model = Schedule
        fields = ('id', 'day_of_week', 'start_time', 'end_time', 'is_available', 'created_at', 'updated_at')
        read_only_fields = ('id', 'created_at', 'updated_at')

class DoctorSerializer(serializers.ModelSerializer):
    schedules = ScheduleSerializer(many=True, read_only=True)
    languages = serializers.CharField(required=True)

    class Meta:
        model = Doctor
        fields = ('id', 'email', 'name', 'specialization', 'license_number', 
                 'years_of_experience', 'education', 'certifications', 'languages', 
                 'schedules', 'created_at', 'updated_at')
        read_only_fields = ('id', 'created_at', 'updated_at')
        extra_kwargs = {
            'email': {'required': True},
            'name': {'required': True},
            'specialization': {'required': True},
            'license_number': {'required': True},
            'years_of_experience': {'required': True},
            'education': {'required': True},
            'languages': {'required': True}
        }

    def validate_languages(self, value):
        if isinstance(value, list):
            return ','.join(value)
        return value

    def validate_email(self, value):
        if Doctor.objects.filter(email=value).exists():
            raise serializers.ValidationError("This email is already in use.")
        return value

    def validate_name(self, value):
        if len(value) < 2:
            raise serializers.ValidationError("Name must be at least 2 characters long.")
        return value

    def validate_specialization(self, value):
        if len(value) < 2:
            raise serializers.ValidationError("Specialization must be at least 2 characters long.")
        return value

    def validate_license_number(self, value):
        if len(value) < 2:
            raise serializers.ValidationError("License number must be at least 2 characters long.")
        return value

    def validate_years_of_experience(self, value):
        if value < 0:
            raise serializers.ValidationError("Years of experience must be a non-negative number.")
        return value

    def validate_education(self, value):
        if len(value) < 2:
            raise serializers.ValidationError("Education must be at least 2 characters long.")
        return value

    def validate_certifications(self, value):
        if not isinstance(value, list):
            raise serializers.ValidationError("Certifications must be a list.")
        return value

    def validate(self, attrs):
        if attrs['years_of_experience'] > 100:
            raise serializers.ValidationError("Years of experience cannot exceed 100.")
        return attrs

    def create(self, validated_data):
        doctor = Doctor.objects.create(**validated_data)
        return doctor

    def update(self, instance, validated_data):
        for attr, value in validated_data.items():
            if attr != 'email':
                setattr(instance, attr, value)
        instance.save()
        return instance
</file>

<file path="services/patient_service/patient_service/settings.py">
"""
Django settings for patient-service project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-your-secret-key-here'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

# Allow proxy headers
USE_X_FORWARDED_HOST = True
USE_X_FORWARDED_PORT = True


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'drf_yasg',
    'corsheaders',
    'patients.apps.PatientsConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# CORS settings
CORS_ALLOW_ALL_ORIGINS = True  # Only for development
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
]

ROOT_URLCONF = 'patient_service.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'patient_service.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': os.getenv('DATABASE_NAME', 'patient_db'),
        'USER': os.getenv('DATABASE_USER', 'user'),
        'PASSWORD': os.getenv('DATABASE_PASSWORD', '123456'),
        'HOST': os.getenv('DATABASE_HOST', 'mysql_db'),
        'PORT': os.getenv('DATABASE_PORT', '3306'),
        'OPTIONS': {
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
            'charset': 'utf8mb4',
        },
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.AllowAny',
    ),
}
</file>

<file path="services/patient_service/patients/migrations/0001_initial.py">
# Generated by Django 4.2.22 on 2025-06-10 03:37

from django.db import migrations, models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('user_id', models.UUIDField(unique=True)),
                ('name', models.CharField(max_length=100)),
                ('age', models.IntegerField()),
                ('gender', models.CharField(choices=[('male', 'Male'), ('female', 'Female'), ('other', 'Other')], max_length=10)),
                ('phone', models.CharField(max_length=15)),
                ('address', models.TextField()),
                ('medical_history', models.TextField(blank=True, null=True)),
                ('patient_type', models.CharField(choices=[('current', 'Current Patient'), ('remote', 'Remote Patient'), ('emergency', 'Emergency Patient'), ('referral', 'Referred Patient'), ('chronic', 'Chronic Care Patient'), ('preventive', 'Preventive Care Patient')], default='current', max_length=20)),
                ('preferred_contact_method', models.CharField(blank=True, choices=[('phone', 'Phone'), ('email', 'Email'), ('video', 'Video Call')], max_length=20, null=True)),
                ('timezone', models.CharField(blank=True, max_length=50, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('role', models.CharField(choices=[('patient', 'Patient'), ('doctor', 'Doctor'), ('admin', 'Admin')], max_length=10)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
</file>

<file path="services/patient_service/patients/models.py">
from django.db import models
import uuid

class Patient(models.Model):
    PATIENT_TYPES = [
        ('normal', 'Normal Patient'),
        ('remote', 'Remote Patient'),
        ('vip', 'VIP Patient')
    ]

    id = models.CharField(primary_key=True, max_length=64, default=uuid.uuid4)
    email = models.EmailField(unique=True)
    name = models.CharField(max_length=100)
    age = models.IntegerField()
    gender = models.CharField(max_length=10, choices=[
        ('male', 'Male'),
        ('female', 'Female'),
        ('other', 'Other')
    ])
    phone = models.CharField(max_length=15)
    address = models.TextField()
    medical_history = models.TextField(blank=True, null=True)
    patient_type = models.CharField(max_length=20, choices=PATIENT_TYPES, default='normal')
    # Fields specific to remote patients
    preferred_contact_method = models.CharField(
        max_length=20,
        choices=[
            ('phone', 'Phone'),
            ('email', 'Email'),
            ('video', 'Video Call')
        ],
        null=True,
        blank=True
    )
    timezone = models.CharField(max_length=50, null=True, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"{self.name} - {self.get_patient_type_display()}"
</file>

<file path="services/patient_service/patients/serializers.py">
from rest_framework import serializers
from .models import Patient

class PatientSerializer(serializers.ModelSerializer):
    class Meta:
        model = Patient
        fields = ('id', 'email', 'name', 'age', 'gender', 'phone', 'address', 
                 'medical_history', 'patient_type', 'preferred_contact_method', 
                 'timezone', 'created_at', 'updated_at')
        read_only_fields = ('id', 'created_at', 'updated_at')
</file>

<file path="services/patient_service/patients/views.py">
from rest_framework import generics, status
from rest_framework.response import Response
from rest_framework.views import APIView
from rest_framework.permissions import AllowAny, IsAuthenticated
from rest_framework_simplejwt.tokens import RefreshToken
from django.contrib.auth import authenticate
from django.http import Http404
from .models import Patient
from .serializers import PatientSerializer
import requests
import logging

logger = logging.getLogger(__name__)

class RegisterView(generics.CreateAPIView):
    permission_classes = (AllowAny,)
    serializer_class = PatientSerializer

    def post(self, request, *args, **kwargs):
        try:
            serializer = self.get_serializer(data=request.data)
            serializer.is_valid(raise_exception=True)
            patient = serializer.save()
            
            return Response({
                'message': 'Patient registered successfully',
                'patient': {
                    'id': str(patient.id),
                    'email': patient.email,
                    'name': patient.name
                }
            }, status=status.HTTP_201_CREATED)
        except Exception as e:
            logger.error(f"Registration error: {str(e)}")
            return Response(
                {'error': str(e)},
                status=status.HTTP_400_BAD_REQUEST
            )

class LoginView(generics.CreateAPIView):
    permission_classes = (AllowAny,)
    serializer_class = PatientSerializer

    def post(self, request, *args, **kwargs):
        try:
            serializer = self.get_serializer(data=request.data)
            serializer.is_valid(raise_exception=True)
            
            patient = serializer.validated_data['patient']
            refresh = RefreshToken.for_user(patient)
            
            return Response({
                'patient': {
                    'id': str(patient.id),
                    'email': patient.email,
                    'name': patient.name
                },
                'refresh': str(refresh),
                'access': str(refresh.access_token),
            })
        except Exception as e:
            logger.error(f"Login error: {str(e)}")
            return Response(
                {'error': str(e)},
                status=status.HTTP_400_BAD_REQUEST
            )

class UserProfileView(generics.RetrieveUpdateAPIView):
    permission_classes = (IsAuthenticated,)
    serializer_class = PatientSerializer

    def get_object(self):
        return self.request.user

class PatientListCreateView(generics.ListCreateAPIView):
    queryset = Patient.objects.all()
    serializer_class = PatientSerializer
    permission_classes = (AllowAny,)

    def perform_create(self, serializer):
        try:
            # Create patient profile
            serializer.save()
        except Exception as e:
            logger.error(f"Error creating patient profile: {str(e)}")
            raise

class PatientRetrieveUpdateView(generics.RetrieveUpdateDestroyAPIView):
    queryset = Patient.objects.all()
    serializer_class = PatientSerializer
    permission_classes = (AllowAny,)

    def get_object(self):
        return self.request.user
</file>

<file path="services/patient_service/requirements.txt">
Django>=4.2,<5.0
djangorestframework>=3.14.0
djangorestframework-simplejwt>=5.2.0
mysqlclient>=2.1.0
django-environ>=0.10.0
drf-yasg==1.21.5
pyyaml>=6.0
uritemplate>=4.1.1
django-cors-headers>=4.3.1
djangorestframework-simplejwt>=5.3.0
</file>

<file path="docker-compose.yml">
version: '3.9'

services:
  mysql_db:
    image: mysql:8.0
    container_name: mysql_db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: user_db
      MYSQL_USER: user
      MYSQL_PASSWORD: 123456
      MYSQL_ALLOW_EMPTY_PASSWORD: "no"
    ports:
      - "3307:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./seed_data.sql:/docker-entrypoint-initdb.d/seed_data.sql
    command: --default-authentication-plugin=mysql_native_password --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-uroot", "-proot"]
      interval: 10s
      retries: 5
      start_period: 30s

  mongodb:
    image: mongo:latest
    container_name: mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      retries: 5
      start_period: 30s

  postgres_db:
    image: postgres:13
    container_name: postgres_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: user_service
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Core Services
  gateway:
    build: ./gateway
    container_name: gateway
    ports:
      - "8000:8000"
    volumes:
      - ./gateway/src:/etc/nginx/conf.d
    depends_on:
      - user_service
      - doctor_service
      - patient-service
      - appointment_service
      - chatbot_service

  user_service:
    build: ./services/user_service
    container_name: user_service
    command: bash -c "python manage.py migrate --noinput && python manage.py runserver 0.0.0.0:8000"
    volumes:
      - ./services/user_service:/app
    ports:
      - "8001:8000"
    environment:
      - POSTGRES_DB=user_service
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_HOST=postgres_db
      - POSTGRES_PORT=5432
    depends_on:
      postgres_db:
        condition: service_healthy

  # Main Healthcare Services
  doctor_service:
    build: ./services/doctor_service
    container_name: doctor_service
    command: bash -c "python manage.py migrate --noinput && python3 manage.py collectstatic --noinput && python manage.py runserver 0.0.0.0:8000"
    volumes:
      - ./services/doctor_service:/app
    ports:
      - "8002:8000"
    environment:
      - DATABASE_HOST=mysql_db
      - DATABASE_PORT=3306
      - DATABASE_NAME=doctor_db
      - DATABASE_USER=user
      - DATABASE_PASSWORD=123456
    depends_on:
      mysql_db:
        condition: service_healthy

  patient-service:
    build: ./services/patient_service
    container_name: patient-service
    command: bash -c "python3 manage.py migrate --noinput && python3 manage.py collectstatic --noinput && python manage.py runserver 0.0.0.0:8000"
    volumes:
      - ./services/patient_service:/app
    ports:
      - "8003:8000"
    environment:
      - DATABASE_HOST=mysql_db
      - DATABASE_PORT=3306
      - DATABASE_NAME=patient_db
      - DATABASE_USER=user
      - DATABASE_PASSWORD=123456
    depends_on:
      mysql_db:
        condition: service_healthy

  appointment_service:
    build: ./services/appointment_service
    container_name: appointment_service
    command: bash -c "python manage.py migrate --noinput && python manage.py collectstatic --noinput && python manage.py runserver 0.0.0.0:8000"
    volumes:
      - ./services/appointment_service:/app
    ports:
      - "8004:8000"
    environment:
      - MONGODB_HOST=mongodb
      - MONGODB_PORT=27017
    depends_on:
      mongodb:
        condition: service_healthy

  laboratory_service:
    build: ./services/laboratory_service
    container_name: laboratory_service
    command: bash -c "python manage.py migrate --noinput && python manage.py runserver 0.0.0.0:8000"
    volumes:
      - ./services/laboratory_service:/app
    ports:
      - "8005:8000"
    depends_on:
      - mysql_db
      - mongodb

  chatbot_service:
    build: ./services/chatbot_service
    container_name: chatbot_service
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - ./services/chatbot_service:/app
    ports:
      - "8006:8000"
    depends_on:
      - doctor_service
      - patient-service
      - appointment_service

volumes:
  mysql_data:
  mongodb_data:
  postgres_data:
</file>

<file path="frontend/src/pages/Appointments.tsx">
import React, { useEffect, useState } from 'react';
import { useFormik } from 'formik';
import * as Yup from 'yup';
import {
  Box,
  Container,
  Typography,
  TextField,
  Button,
  Grid,
  Paper,
  Select,
  MenuItem,
  InputLabel,
  FormControl,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Chip,
  IconButton,
} from '@mui/material';
import axios from 'axios';
import { Appointment } from '../types/appointment';
import { Patient, Doctor } from '../types/user';
import { Edit as EditIcon, Delete as DeleteIcon } from '@mui/icons-material';

// Adjusting form values to match backend snake_case expectations
interface AppointmentFormValues {
  patient_id: string;
  doctor_id: string;
  date: string;
  time: string;
  notes?: string;
  service_type: string;
  duration: number;
}

const validationSchema = Yup.object({
  patient_id: Yup.string().required('Patient is required'),
  doctor_id: Yup.string().required('Doctor is required'),
  date: Yup.date().required('Date is required'),
  time: Yup.string().required('Time is required'),
  notes: Yup.string(),
  service_type: Yup.string().required('Service type is required'),
  duration: Yup.number()
    .min(15, 'Duration must be at least 15 minutes')
    .max(240, 'Duration cannot exceed 240 minutes')
    .required('Duration is required'),
});

const API_URL = process.env.REACT_APP_APPOINTMENT_API_URL || 'http://localhost:8000/api/appointments/';
const PATIENT_API_URL = process.env.REACT_APP_PATIENT_API_URL || 'http://localhost:8000/api/patients/';
const DOCTOR_API_URL = process.env.REACT_APP_DOCTOR_API_URL || 'http://localhost:8000/api/doctors/';

const Appointments: React.FC = () => {
  const [patients, setPatients] = useState<Patient[]>([]);
  const [doctors, setDoctors] = useState<Doctor[]>([]);
  const [appointments, setAppointments] = useState<Appointment[]>([]);
  const [editingAppointment, setEditingAppointment] = useState<Appointment | null>(null);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const token = localStorage.getItem('token');
        const headers = { Authorization: `Bearer ${token}` };
        const config = { headers, withCredentials: true };

        console.log('Starting to fetch data...');

        // Fetch patients
        try {
          console.log('Fetching patients from:', PATIENT_API_URL);
          const patientsResponse = await axios.get(PATIENT_API_URL, config);
          console.log('Patients Response Status:', patientsResponse.status);
          console.log('Patients Response Data:', JSON.stringify(patientsResponse.data, null, 2));
          setPatients(patientsResponse.data);
        } catch (error) {
          console.error('Error fetching patients:', error);
          if (axios.isAxiosError(error)) {
            console.error('Error details:', {
              status: error.response?.status,
              statusText: error.response?.statusText,
              data: error.response?.data
            });
          }
        }

        // Fetch doctors
        try {
          console.log('Fetching doctors from:', DOCTOR_API_URL);
          const doctorsResponse = await axios.get(DOCTOR_API_URL, config);
          console.log('Doctors Response Status:', doctorsResponse.status);
          console.log('Doctors Response Data:', JSON.stringify(doctorsResponse.data, null, 2));
          setDoctors(doctorsResponse.data);
        } catch (error) {
          console.error('Error fetching doctors:', error);
          if (axios.isAxiosError(error)) {
            console.error('Error details:', {
              status: error.response?.status,
              statusText: error.response?.statusText,
              data: error.response?.data
            });
          }
        }

        // Fetch appointments
        try {
          console.log('Fetching appointments from:', API_URL);
          const appointmentsResponse = await axios.get(API_URL, config);
          console.log('Appointments Response Status:', appointmentsResponse.status);
          console.log('Appointments Response Data:', JSON.stringify(appointmentsResponse.data, null, 2));
          // Check if the response has a results array
          const appointmentsData = appointmentsResponse.data.results || appointmentsResponse.data;
          console.log('Processed appointments data:', appointmentsData);
          setAppointments(appointmentsData);
        } catch (error) {
          console.error('Error fetching appointments:', error);
          if (axios.isAxiosError(error)) {
            console.error('Error details:', {
              status: error.response?.status,
              statusText: error.response?.statusText,
              data: error.response?.data
            });
          }
        }

      } catch (error) {
        console.error('Error in fetchData:', error);
      }
    };

    fetchData();
  }, []);

  const formik = useFormik<AppointmentFormValues>({
    initialValues: {
      patient_id: '',
      doctor_id: '',
      date: '',
      time: '',
      notes: '',
      service_type: 'general',
      duration: 30,
    },
    validationSchema,
    onSubmit: async (values: AppointmentFormValues) => {
      try {
        const token = localStorage.getItem('token');
        console.log('Creating appointment with values:', values);
        
        const appointmentData = {
          patient_id: values.patient_id,
          doctor_id: values.doctor_id,
          date: values.date,
          time: values.time,
          notes: values.notes || '',
          status: 'pending',
          service_type: values.service_type,
          duration: values.duration
        };

        console.log('Sending appointment data:', appointmentData);

        const response = await axios.post(
          API_URL,
          appointmentData,
          {
            headers: {
              'Authorization': `Bearer ${token}`,
              'Content-Type': 'application/json',
            },
            withCredentials: true
          }
        );

        console.log('Appointment created successfully:', response.data);
        
        // Refresh appointments list
        try {
          const appointmentsResponse = await axios.get(API_URL, {
            headers: {
              'Authorization': `Bearer ${token}`,
              'Content-Type': 'application/json',
            },
            withCredentials: true
          });
          console.log('Refreshed appointments:', appointmentsResponse.data);
          // Check if the response has a results array
          const appointmentsData = appointmentsResponse.data.results || appointmentsResponse.data;
          console.log('Processed appointments data:', appointmentsData);
          setAppointments(appointmentsData);
        } catch (error) {
          console.error('Error refreshing appointments:', error);
        }

        formik.resetForm();
      } catch (error: any) {
        console.error('Error creating appointment:', error);
        if (error.response) {
          console.error('Error response data:', error.response.data);
          console.error('Error response status:', error.response.status);
          console.error('Error response headers:', error.response.headers);
        } else if (error.request) {
          console.error('Error request:', error.request);
        } else {
          console.error('Error message:', error.message);
        }
      }
    },
  });

  const handleEdit = (appointment: Appointment) => {
    setEditingAppointment(appointment);
    formik.setValues({
      patient_id: appointment.patient_id,
      doctor_id: appointment.doctor_id,
      date: appointment.date,
      time: appointment.time,
      notes: appointment.notes || '',
      service_type: appointment.service_type,
      duration: appointment.duration
    });
  };

  const handleDelete = async (id: string) => {
    try {
      const token = localStorage.getItem('token');
      await axios.delete(`${API_URL}${id}/`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
        withCredentials: true
      });
      
      // Refresh appointments list
      const appointmentsResponse = await axios.get(API_URL, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
        withCredentials: true
      });
      const appointmentsData = appointmentsResponse.data.results || appointmentsResponse.data;
      setAppointments(appointmentsData);
    } catch (error) {
      console.error('Error deleting appointment:', error);
    }
  };

  return (
    <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>
      <Box sx={{ mt: 4, mb: 4 }}>
        <Typography variant="h4" component="h1" gutterBottom>
          Schedule Appointment
        </Typography>
        <Paper sx={{ p: 3 }}>
          <form onSubmit={formik.handleSubmit}>
            <Grid container spacing={3}>
              <Grid item xs={12} sm={6}>
                <FormControl fullWidth error={formik.touched.patient_id && Boolean(formik.errors.patient_id)}>
                  <InputLabel id="patient_id-label">Patient</InputLabel>
                  <Select
                    labelId="patient_id-label"
                    id="patient_id"
                    name="patient_id"
                    value={formik.values.patient_id}
                    onChange={formik.handleChange}
                    label="Patient"
                  >
                    {patients.map((patient) => (
                      <MenuItem key={patient.id} value={patient.id}>
                        {patient.name}
                      </MenuItem>
                    ))}
                  </Select>
                  {formik.touched.patient_id && formik.errors.patient_id && (
                    <Typography color="error" variant="caption">
                      {formik.errors.patient_id}
                    </Typography>
                  )}
                </FormControl>
              </Grid>
              <Grid item xs={12} sm={6}>
                <FormControl fullWidth error={formik.touched.doctor_id && Boolean(formik.errors.doctor_id)}>
                  <InputLabel id="doctor_id-label">Doctor</InputLabel>
                  <Select
                    labelId="doctor_id-label"
                    id="doctor_id"
                    name="doctor_id"
                    value={formik.values.doctor_id}
                    onChange={formik.handleChange}
                    label="Doctor"
                  >
                    {doctors.map((doctor) => (
                      <MenuItem key={doctor.id} value={doctor.id}>
                        {doctor.name}
                      </MenuItem>
                    ))}
                  </Select>
                  {formik.touched.doctor_id && formik.errors.doctor_id && (
                    <Typography color="error" variant="caption">
                      {formik.errors.doctor_id}
                    </Typography>
                  )}
                </FormControl>
              </Grid>
              <Grid item xs={12} sm={6}>
                <TextField
                  fullWidth
                  id="date"
                  name="date"
                  label="Date"
                  type="date"
                  value={formik.values.date}
                  onChange={formik.handleChange}
                  error={formik.touched.date && Boolean(formik.errors.date)}
                  helperText={formik.touched.date && formik.errors.date}
                  InputLabelProps={{ shrink: true }}
                />
              </Grid>
              <Grid item xs={12} sm={6}>
                <TextField
                  fullWidth
                  id="time"
                  name="time"
                  label="Time"
                  type="time"
                  value={formik.values.time}
                  onChange={formik.handleChange}
                  error={formik.touched.time && Boolean(formik.errors.time)}
                  helperText={formik.touched.time && formik.errors.time}
                  InputLabelProps={{ shrink: true }}
                />
              </Grid>
              <Grid item xs={12}>
                <TextField
                  fullWidth
                  id="notes"
                  name="notes"
                  label="Notes"
                  multiline
                  rows={4}
                  value={formik.values.notes}
                  onChange={formik.handleChange}
                  error={formik.touched.notes && Boolean(formik.errors.notes)}
                  helperText={formik.touched.notes && formik.errors.notes}
                />
              </Grid>
              <Grid item xs={12} sm={6}>
                <TextField
                  fullWidth
                  id="service_type"
                  name="service_type"
                  label="Service Type"
                  value={formik.values.service_type}
                  onChange={formik.handleChange}
                  error={formik.touched.service_type && Boolean(formik.errors.service_type)}
                  helperText={formik.touched.service_type && formik.errors.service_type}
                />
              </Grid>
              <Grid item xs={12} sm={6}>
                <TextField
                  fullWidth
                  id="duration"
                  name="duration"
                  label="Duration (minutes)"
                  type="number"
                  value={formik.values.duration}
                  onChange={formik.handleChange}
                  error={formik.touched.duration && Boolean(formik.errors.duration)}
                  helperText={formik.touched.duration && formik.errors.duration}
                  InputProps={{
                    inputProps: { min: 15, max: 240 }
                  }}
                />
              </Grid>
              <Grid item xs={12}>
                <Button
                  color="primary"
                  variant="contained"
                  fullWidth
                  type="submit"
                >
                  Schedule Appointment
                </Button>
              </Grid>
            </Grid>
          </form>
        </Paper>
      </Box>

      <Box sx={{ mt: 4, mb: 4 }}>
        <Typography variant="h5" component="h2" gutterBottom>
          Appointment History
        </Typography>
        <Paper sx={{ p: 3 }}>
          <TableContainer component={Paper}>
            <Table>
              <TableHead>
                <TableRow>
                  <TableCell>Patient</TableCell>
                  <TableCell>Patient Details</TableCell>
                  <TableCell>Doctor</TableCell>
                  <TableCell>Doctor Details</TableCell>
                  <TableCell>Date & Time</TableCell>
                  <TableCell>Status</TableCell>
                  <TableCell>Actions</TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {appointments.map((appointment) => {
                  const patient = patients.find(p => p.id === appointment.patient_id);
                  const doctor = doctors.find(d => d.id === appointment.doctor_id);
                  
                  return (
                    <TableRow key={appointment.id}>
                      <TableCell>{patient ? patient.name : 'Unknown Patient'}</TableCell>
                      <TableCell>
                        {patient ? (
                          <>
                            Phone: {patient.phone}<br />
                            {patient.patient_type && `Type: ${patient.patient_type}`}
                          </>
                        ) : 'N/A'}
                      </TableCell>
                      <TableCell>{doctor ? doctor.name : 'Unknown Doctor'}</TableCell>
                      <TableCell>
                        {doctor ? (
                          <>
                            {doctor.specialization && `Specialization: ${doctor.specialization}`}
                          </>
                        ) : 'N/A'}
                      </TableCell>
                      <TableCell>
                        {new Date(`${appointment.date}T${appointment.time}`).toLocaleString()}
                      </TableCell>
                      <TableCell>
                        <Chip
                          label={appointment.status}
                          color={
                            appointment.status === 'confirmed' ? 'primary' :
                            appointment.status === 'completed' ? 'success' :
                            appointment.status === 'cancelled' ? 'error' : 'default'
                          }
                        />
                      </TableCell>
                      <TableCell>
                        <IconButton
                          size="small"
                          onClick={() => handleEdit(appointment)}
                          sx={{ mr: 1 }}
                        >
                          <EditIcon />
                        </IconButton>
                        <IconButton
                          size="small"
                          color="error"
                          onClick={() => handleDelete(appointment.id)}
                        >
                          <DeleteIcon />
                        </IconButton>
                      </TableCell>
                    </TableRow>
                  );
                })}
              </TableBody>
            </Table>
          </TableContainer>
        </Paper>
      </Box>
    </Container>
  );
};

export default Appointments;
</file>

<file path="services/doctor_service/doctor/models.py">
from django.db import models
import uuid

class Doctor(models.Model):
    id = models.CharField(primary_key=True, max_length=64, default=uuid.uuid4)
    email = models.EmailField(unique=True)
    name = models.CharField(max_length=100)
    specialization = models.CharField(max_length=100)
    license_number = models.CharField(max_length=50, unique=True)
    years_of_experience = models.IntegerField()
    education = models.TextField()
    certifications = models.TextField(blank=True, null=True)
    languages = models.CharField(max_length=200)  # Comma-separated list of languages
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"Dr. {self.name} - {self.specialization}"

class Schedule(models.Model):
    doctor = models.ForeignKey(Doctor, on_delete=models.CASCADE, related_name='schedules')
    day_of_week = models.IntegerField(choices=[
        (0, 'Monday'),
        (1, 'Tuesday'),
        (2, 'Wednesday'),
        (3, 'Thursday'),
        (4, 'Friday'),
        (5, 'Saturday'),
        (6, 'Sunday')
    ])
    start_time = models.TimeField()
    end_time = models.TimeField()
    is_available = models.BooleanField(default=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        unique_together = ('doctor', 'day_of_week')

    def __str__(self):
        return f"{self.doctor} - {self.get_day_of_week_display()} ({self.start_time} - {self.end_time})"
</file>

<file path="services/doctor_service/doctor/urls.py">
from django.urls import path

from .views import (
    DoctorListCreateView,
    DoctorRetrieveUpdateView,
    ScheduleListCreateView,
    ScheduleRetrieveUpdateView,
)

urlpatterns = [
    path('', DoctorListCreateView.as_view(), name='doctor-list-create'),
    path('<str:pk>/', DoctorRetrieveUpdateView.as_view(), name='doctor-retrieve-update'),
    path('schedules/', ScheduleListCreateView.as_view(), name='schedule-list-create'),
    path('schedules/<str:pk>/', ScheduleRetrieveUpdateView.as_view(), name='schedule-retrieve-update'),
]
</file>

<file path="services/doctor_service/doctor/views.py">
from rest_framework import generics, serializers
from rest_framework.permissions import AllowAny
from .models import Doctor, Schedule
from .serializers import DoctorSerializer, ScheduleSerializer

class DoctorListCreateView(generics.ListCreateAPIView):
    queryset = Doctor.objects.all()
    serializer_class = DoctorSerializer
    permission_classes = (AllowAny,)

class DoctorRetrieveUpdateView(generics.RetrieveUpdateDestroyAPIView):
    queryset = Doctor.objects.all()
    serializer_class = DoctorSerializer
    permission_classes = (AllowAny,)

class ScheduleListCreateView(generics.ListCreateAPIView):
    queryset = Schedule.objects.all()
    serializer_class = ScheduleSerializer
    permission_classes = (AllowAny,)

    def perform_create(self, serializer):
        doctor_id = self.request.data.get('doctor')
        try:
            doctor = Doctor.objects.get(id=doctor_id)
            serializer.save(doctor=doctor)
        except Doctor.DoesNotExist:
            raise serializers.ValidationError({"doctor": "Doctor not found"})

class ScheduleRetrieveUpdateView(generics.RetrieveUpdateDestroyAPIView):
    queryset = Schedule.objects.all()
    serializer_class = ScheduleSerializer
    permission_classes = (AllowAny,)
</file>

<file path="services/patient_service/patients/urls.py">
from django.urls import path
from .views import (
    PatientListCreateView,
    PatientRetrieveUpdateView
)

urlpatterns = [
    path('', PatientListCreateView.as_view(), name='patient-list-create'),
    path('<str:pk>/', PatientRetrieveUpdateView.as_view(), name='patient-retrieve-update'),
]
</file>

<file path="frontend/src/services/userService.ts">
import axios from 'axios';
import { Patient, Doctor, CreatePatientDto, CreateDoctorDto, UpdatePatientDto, UpdateDoctorDto, User, CreateUserDto, UpdateUserDto } from '../types/user';

// Use relative URL since we're using the proxy
const API_URL = '/api';

// Configure axios defaults
axios.defaults.withCredentials = true;
axios.defaults.headers.common['Content-Type'] = 'application/json';
axios.defaults.headers.common['Accept'] = 'application/json';

// Patient Services
export const patientService = {
    getAll: async (): Promise<Patient[]> => {
        const response = await axios.get(`${API_URL}/patients/`);
        return response.data;
    },

    getById: async (id: string): Promise<Patient> => {
        const response = await axios.get(`${API_URL}/patients/${id}/`);
        return response.data;
    },

    create: async (patient: CreatePatientDto): Promise<Patient> => {
        const response = await axios.post(`${API_URL}/patients/`, patient);
        return response.data;
    },

    update: async (id: string, patient: UpdatePatientDto): Promise<Patient> => {
        const response = await axios.put(`${API_URL}/patients/${id}/`, patient);
        return response.data;
    },

    delete: async (id: string): Promise<void> => {
        await axios.delete(`${API_URL}/patients/${id}/`);
    }
};

// Doctor Services
export const doctorService = {
    getAll: async (): Promise<Doctor[]> => {
        const response = await axios.get(`${API_URL}/doctors/`);
        return response.data;
    },

    getById: async (id: string): Promise<Doctor> => {
        const response = await axios.get(`${API_URL}/doctors/${id}/`);
        return response.data;
    },

    create: async (doctor: CreateDoctorDto): Promise<Doctor> => {
        const response = await axios.post(`${API_URL}/doctors/`, doctor);
        return response.data;
    },

    update: async (id: string, doctor: UpdateDoctorDto): Promise<Doctor> => {
        const response = await axios.put(`${API_URL}/doctors/${id}/`, doctor);
        return response.data;
    },

    delete: async (id: string): Promise<void> => {
        await axios.delete(`${API_URL}/doctors/${id}/`);
    }
};

// User Services
export const userService = {
    getAll: async (): Promise<User[]> => {
        const response = await axios.get(`${API_URL}/users/`);
        return response.data;
    },

    getById: async (id: string): Promise<User> => {
        const response = await axios.get(`${API_URL}/users/${id}/`);
        return response.data;
    },

    create: async (user: CreateUserDto): Promise<User> => {
        const response = await axios.post(`${API_URL}/users/`, user);
        return response.data;
    },

    update: async (id: string, user: UpdateUserDto): Promise<User> => {
        const response = await axios.put(`${API_URL}/users/${id}/`, user);
        return response.data;
    },

    delete: async (id: string): Promise<void> => {
        await axios.delete(`${API_URL}/users/${id}/`);
    }
};
</file>

</files>
