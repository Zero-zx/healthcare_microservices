This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.cursor/
  rules/
    prev-run-task.mdc
frontend/
  public/
    index.html
    manifest.json
    robots.txt
  src/
    components/
      auth/
        Login.tsx
        Register.tsx
      Chatbot.tsx
      Layout.tsx
      UserForm.tsx
    hooks/
      useApi.ts
      useAppDispatch.ts
      useAppointments.ts
      useAppSelector.ts
      useAuth.ts
      useDoctors.ts
      useError.ts
      useFormValidation.ts
      useLabResults.ts
      useLoading.ts
      useNotification.ts
      usePagination.ts
      usePatients.ts
      useProtectedRoute.ts
      useSearch.ts
      useSorting.ts
      useTheme.ts
      useUsers.ts
    pages/
      Appointments.tsx
      Chatbot.tsx
      ChatbotPage.tsx
      DoctorManagement.tsx
      Home.tsx
      Login.tsx
      PatientManagement.tsx
      Prediction.tsx
    services/
      authService.ts
      userService.ts
    store/
      slices/
        appointmentSlice.ts
        authSlice.ts
        doctorSlice.ts
        labSlice.ts
        patientSlice.ts
        themeSlice.ts
        userSlice.ts
      index.ts
    types/
      appointment.ts
      auth.ts
      notistack.d.ts
      user.ts
    App.css
    App.test.tsx
    App.tsx
    index.css
    index.tsx
    logo.svg
    react-app-env.d.ts
    reportWebVitals.ts
    setupTests.ts
    theme.ts
  .gitignore
  package.json
  README.md
  tsconfig.json
gateway/
  src/
    nginx.conf
  Dockerfile
services/
  admin_service/
    admin_service/
      asgi.py
      settings.py
      urls.py
      wsgi.py
    Dockerfile
    manage.py
    requirements.txt
  appointment_service/
    appointment_service/
      __init__.py
      asgi.py
      models.py
      serializers.py
      settings.py
      urls.py
      views.py
      wsgi.py
    Dockerfile
    manage.py
    README.md
    requirements.txt
  chatbot_service/
    app/
      __init__.py
      urls.py
      views.py
    chatbot_core/
      asgi.py
      settings.py
      urls.py
      wsgi.py
    kb/
      diseases.json
    Dockerfile
    manage.py
  doctor_service/
    doctor/
      migrations/
        0001_initial.py
      admin.py
      apps.py
      managers.py
      models.py
      serializers.py
      tests.py
      urls.py
      views.py
    doctor_service/
      asgi.py
      settings.py
      urls.py
      wsgi.py
    Dockerfile
    manage.py
    requirements.txt
  laboratory_service/
    disease_prediction/
      ai_models/
        __init__.py
        predictor.py
      migrations/
        __init__.py
      models/
        __init__.py
        prediction.py
      serializers/
        __init__.py
        prediction.py
      views/
        __init__.py
        prediction.py
      __init__.py
      apps.py
    laboratory_service/
      __init__.py
      asgi.py
      settings.py
      urls.py
      wsgi.py
    Dockerfile
    manage.py
    readme.md
    requirements.txt
    setup.sh
  patient_service/
    patient_service/
      asgi.py
      settings.py
      urls.py
      wsgi.py
    patients/
      fixtures/
        fake_data.sql
      management/
        commands/
          load_fake_data.py
      migrations/
        0001_initial.py
      apps.py
      models.py
      serializers.py
      urls.py
      views.py
    Dockerfile
    manage.py
    README.md
    requirements.txt
  user_service/
    user_service/
      settings.py
      urls.py
      wsgi.py
    users/
      migrations/
        0001_initial.py
      apps.py
      models.py
      serializers.py
      urls.py
      views.py
    Dockerfile
    manage.py
    requirements.txt
.gitignore
create_patients_table.sql
docker-compose.yml
healthcare_microservices.postman_collection.json
init.sql
package.json
seed_data.sql
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="services/user_service/user_service/settings.py">
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-your-secret-key-here'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',
    'users',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'user_service.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'user_service.wsgi.application'

# Database
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('POSTGRES_DB', 'user_service'),
        'USER': os.environ.get('POSTGRES_USER', 'postgres'),
        'PASSWORD': os.environ.get('POSTGRES_PASSWORD', 'postgres'),
        'HOST': os.environ.get('POSTGRES_HOST', 'localhost'),
        'PORT': os.environ.get('POSTGRES_PORT', '5432'),
    }
}

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
STATIC_URL = 'static/'

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Custom user model
AUTH_USER_MODEL = 'users.User'

# REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
}

# CORS settings
CORS_ALLOW_ALL_ORIGINS = True  # Only for development
CORS_ALLOW_CREDENTIALS = True

# JWT settings
from datetime import timedelta
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,
}
</file>

<file path="services/user_service/user_service/urls.py">
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/', include('users.urls')),
]
</file>

<file path="services/user_service/user_service/wsgi.py">
import os
from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'user_service.settings')

application = get_wsgi_application()
</file>

<file path="services/user_service/users/migrations/0001_initial.py">
# Generated by Django 4.2 on 2025-06-10 03:40

from django.db import migrations, models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('username', models.CharField(max_length=150, unique=True)),
                ('role', models.CharField(choices=[('patient', 'Patient'), ('doctor', 'Doctor'), ('admin', 'Admin')], max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
</file>

<file path="services/user_service/users/apps.py">
from django.apps import AppConfig

class UsersConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'users'
</file>

<file path="services/user_service/users/models.py">
from django.db import models
from django.contrib.auth.models import AbstractBaseUser, BaseUserManager, PermissionsMixin
import uuid

class UserManager(BaseUserManager):
    def create_user(self, email, username, password=None, **extra_fields):
        if not email:
            raise ValueError('Email is required')
        if not username:
            raise ValueError('Username is required')
        email = self.normalize_email(email)
        user = self.model(email=email, username=username, **extra_fields)
        user.set_password(password)
        user.save(using=self._db)
        return user

    def create_superuser(self, email, username, password=None, **extra_fields):
        extra_fields.setdefault('is_staff', True)
        extra_fields.setdefault('is_superuser', True)
        extra_fields.setdefault('role', 'admin')
        return self.create_user(email, username, password, **extra_fields)

class User(AbstractBaseUser, PermissionsMixin):
    ROLE_CHOICES = [
        ('patient', 'Patient'),
        ('doctor', 'Doctor'),
        ('admin', 'Admin')
    ]

    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    email = models.EmailField(unique=True)
    username = models.CharField(max_length=150, unique=True)
    role = models.CharField(max_length=20, choices=ROLE_CHOICES)
    is_active = models.BooleanField(default=True)
    is_staff = models.BooleanField(default=False)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    USERNAME_FIELD = 'email'
    REQUIRED_FIELDS = ['username', 'role']
    objects = UserManager()

    def __str__(self):
        return f"{self.username} ({self.email}) - {self.get_role_display()}"

    def get_full_name(self):
        return self.username

    def get_short_name(self):
        return self.username
</file>

<file path="services/user_service/users/serializers.py">
from rest_framework import serializers
from django.contrib.auth.password_validation import validate_password
from .models import User

class UserSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        fields = ('id', 'email', 'username', 'role', 'is_active', 'created_at', 'updated_at')
        read_only_fields = ('id', 'created_at', 'updated_at')

class RegisterSerializer(serializers.ModelSerializer):
    password = serializers.CharField(write_only=True, required=True, validators=[validate_password])
    password2 = serializers.CharField(write_only=True, required=True)
    role = serializers.ChoiceField(choices=User.ROLE_CHOICES)

    class Meta:
        model = User
        fields = ('email', 'username', 'password', 'password2', 'role')

    def validate(self, attrs):
        if attrs['password'] != attrs['password2']:
            raise serializers.ValidationError({"password": "Password fields didn't match."})
        return attrs

    def create(self, validated_data):
        validated_data.pop('password2')
        user = User.objects.create_user(**validated_data)
        return user

class UserProfileSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        fields = ('id', 'email', 'username', 'role', 'is_active', 'created_at', 'updated_at')
        read_only_fields = ('id', 'email', 'role', 'created_at', 'updated_at')
</file>

<file path="services/user_service/users/urls.py">
from django.urls import path
from .views import RegisterView, LoginView, UserProfileView

urlpatterns = [
    path('register/', RegisterView.as_view(), name='register'),
    path('login/', LoginView.as_view(), name='login'),
    path('profile/', UserProfileView.as_view(), name='profile'),
]
</file>

<file path="services/user_service/users/views.py">
from rest_framework import generics, status
from rest_framework.response import Response
from rest_framework.permissions import AllowAny, IsAuthenticated
from rest_framework_simplejwt.tokens import RefreshToken
from django.contrib.auth import authenticate
import requests
import logging

from .models import User
from .serializers import UserSerializer, RegisterSerializer, UserProfileSerializer

logger = logging.getLogger(__name__)

class RegisterView(generics.CreateAPIView):
    permission_classes = (AllowAny,)
    serializer_class = RegisterSerializer

    def post(self, request, *args, **kwargs):
        try:
            # 1. Create base user
            serializer = self.get_serializer(data=request.data)
            serializer.is_valid(raise_exception=True)
            user = serializer.save()

            # 2. Create role-specific profile
            if user.role == 'doctor':
                # Call doctor service to create doctor profile
                doctor_data = {
                    'user_id': str(user.id),
                    'specialization': request.data.get('specialization'),
                    'license_number': request.data.get('license_number'),
                    'years_of_experience': request.data.get('years_of_experience'),
                    'education': request.data.get('education'),
                    'languages': request.data.get('languages')
                }
                try:
                    headers = {
                        'Host': 'localhost',
                        'Content-Type': 'application/json'
                    }
                    response = requests.post('http://doctor_service:8000/api/doctors/', 
                                          json=doctor_data,
                                          headers=headers)
                    if response.status_code != 201:
                        user.delete()
                        raise Exception(f"Failed to create doctor profile: {response.text}")
                    response.raise_for_status()
                except requests.exceptions.RequestException as e:
                    # Rollback user creation if doctor profile creation fails
                    user.delete()
                    raise Exception(f"Failed to create doctor profile: {str(e)}")

            elif user.role == 'patient':
                # Validate required patient fields
                required_fields = ['name', 'age', 'gender', 'phone', 'address']
                missing_fields = [field for field in required_fields if not request.data.get(field)]
                if missing_fields:
                    user.delete()
                    raise Exception(f"Missing required fields for patient: {', '.join(missing_fields)}")

                # Call patient service to create patient profile
                patient_data = {
                    'user_id': str(user.id),
                    'name': request.data.get('name'),
                    'age': request.data.get('age'),
                    'gender': request.data.get('gender'),
                    'phone': request.data.get('phone'),
                    'address': request.data.get('address'),
                }
                try:
                    response = requests.post('http://patient-service:8000/api/patients/', json=patient_data)
                    if response.status_code != 201:
                        user.delete()
                        raise Exception(f"Failed to create patient profile: {response.text}")
                    response.raise_for_status()
                except requests.exceptions.RequestException as e:
                    # Rollback user creation if patient profile creation fails
                    user.delete()
                    raise Exception(f"Failed to create patient profile: {str(e)}")

            return Response({
                'message': 'User registered successfully',
                'user': UserSerializer(user).data
            }, status=status.HTTP_201_CREATED)
            
        except Exception as e:
            logger.error(f"Registration error: {str(e)}")
            return Response(
                {'error': str(e)},
                status=status.HTTP_400_BAD_REQUEST
            )

class LoginView(generics.CreateAPIView):
    permission_classes = (AllowAny,)

    def post(self, request, *args, **kwargs):
        email = request.data.get('email')
        password = request.data.get('password')

        if not email or not password:
            return Response(
                {'error': 'Please provide both email and password'},
                status=status.HTTP_400_BAD_REQUEST
            )

        user = authenticate(email=email, password=password)

        if not user:
            return Response(
                {'error': 'Invalid credentials'},
                status=status.HTTP_401_UNAUTHORIZED
            )

        refresh = RefreshToken.for_user(user)
        
        return Response({
            'user': UserSerializer(user).data,
            'refresh': str(refresh),
            'access': str(refresh.access_token),
        })

class UserProfileView(generics.RetrieveUpdateAPIView):
    permission_classes = (IsAuthenticated,)
    serializer_class = UserProfileSerializer

    def get_object(self):
        return self.request.user
</file>

<file path="services/user_service/Dockerfile">
FROM python:3.9-slim

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    postgresql-client \
    && rm -rf /var/lib/apt/lists/*

# Install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy project files
COPY . .

# Run migrations and start server
CMD ["sh", "-c", "python manage.py migrate && python manage.py runserver 0.0.0.0:8000"]
</file>

<file path="services/user_service/manage.py">
#!/usr/bin/env python
import os
import sys

if __name__ == "__main__":
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "user_service.settings")
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)
</file>

<file path="services/user_service/requirements.txt">
Django==4.2.0
djangorestframework==3.14.0
djangorestframework-simplejwt==5.2.2
django-cors-headers==4.1.0
psycopg2-binary==2.9.6
requests==2.31.0
python-dotenv==1.0.0
</file>

<file path="healthcare_microservices.postman_collection.json">
{
  "info": {
    "_postman_id": "healthcare-microservices-collection",
    "name": "Healthcare Microservices API Gateway Test",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "User Service",
      "item": [
        {
          "name": "Get All Users",
          "request": {
            "method": "GET",
            "url": "http://localhost:8000/api/users/"
          }
        },
        {
          "name": "Register User",
          "request": {
            "method": "POST",
            "url": "http://localhost:8000/api/users/register/",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"testuser\",\n  \"password\": \"testpass\",\n  \"email\": \"test@example.com\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          }
        }
      ]
    },
    {
      "name": "Doctor Service",
      "item": [
        {
          "name": "Get All Doctors",
          "request": {
            "method": "GET",
            "url": "http://localhost:8000/api/doctors/"
          }
        },
        {
          "name": "Get Doctor By ID",
          "request": {
            "method": "GET",
            "url": "http://localhost:8000/api/doctors/1/"
          }
        }
      ]
    },
    {
      "name": "Patient Service",
      "item": [
        {
          "name": "Get All Patients",
          "request": {
            "method": "GET",
            "url": "http://localhost:8000/api/patients/"
          }
        },
        {
          "name": "Get Patient By ID",
          "request": {
            "method": "GET",
            "url": "http://localhost:8000/api/patients/1/"
          }
        }
      ]
    },
    {
      "name": "Appointment Service",
      "item": [
        {
          "name": "Get All Appointments",
          "request": {
            "method": "GET",
            "url": "http://localhost:8000/api/appointments/"
          }
        },
        {
          "name": "Create Appointment",
          "request": {
            "method": "POST",
            "url": "http://localhost:8000/api/appointments/",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"patient\": 1,\n  \"doctor\": 1,\n  \"date\": \"2024-07-01\",\n  \"time\": \"10:00\",\n  \"reason\": \"Checkup\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          }
        }
      ]
    },
    {
      "name": "Laboratory Service",
      "item": [
        {
          "name": "Get All Lab Results",
          "request": {
            "method": "GET",
            "url": "http://localhost:8000/api/laboratory/"
          }
        }
      ]
    },
    {
      "name": "Notification Service",
      "item": [
        {
          "name": "Send Notification",
          "request": {
            "method": "POST",
            "url": "http://localhost:8000/api/notifications/send/",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"to\": \"user@example.com\",\n  \"subject\": \"Test Notification\",\n  \"message\": \"This is a test notification.\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          }
        }
      ]
    },
    {
      "name": "Chatbot Service",
      "item": [
        {
          "name": "Chat with Bot",
          "request": {
            "method": "POST",
            "url": "http://localhost:8000/api/chatbot/chat/",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"message\": \"Hello!\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          }
        }
      ]
    }
  ]
}
</file>

<file path=".cursor/rules/prev-run-task.mdc">
---
description: 
globs: 
alwaysApply: true
---
- Tell me "Done" after finish tasks below
- Read all projects code first to undestand project structure, goal and functions.
- Alway rememeber that project using Django + Docker for backend an typescript for frontend
- Read [docker-compose.yml](mdc:docker-compose.yml) to understand api endpoints and use direct port like 8004, 8005
- Frontend and backend need to be fit and match together to run correctly
- Services should communite among them by rest api
- Alway set allow host to all to prevent cor issues
</file>

<file path="frontend/public/index.html">
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>
</file>

<file path="frontend/public/manifest.json">
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}
</file>

<file path="frontend/public/robots.txt">
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:
</file>

<file path="frontend/src/components/auth/Login.tsx">
import React from 'react';
import { useFormik } from 'formik';
import * as Yup from 'yup';
import {
    Box,
    Button,
    TextField,
    Typography,
    Paper,
    Container,
    Alert,
    FormControl,
    InputLabel,
    Select,
    MenuItem
} from '@mui/material';
import { useDispatch, useSelector } from 'react-redux';
import { useNavigate } from 'react-router-dom';
import { authService } from '../../services/authService';
import { setCredentials, setLoading, setError } from '../../store/slices/authSlice';
import { RootState } from '../../store';
import { LoginRequest } from '../../types/auth';

const validationSchema = Yup.object({
    email: Yup.string()
        .email('Enter a valid email')
        .required('Email is required'),
    password: Yup.string()
        .required('Password is required'),
    role: Yup.string()
        .oneOf(['patient', 'doctor'], 'Please select a valid role')
        .required('Role is required')
});

type LoginFormValues = LoginRequest & {
    role: 'patient' | 'doctor';
};

export const Login: React.FC = () => {
    const dispatch = useDispatch();
    const navigate = useNavigate();
    const { loading, error } = useSelector((state: RootState) => state.auth);

    const formik = useFormik<LoginFormValues>({
        initialValues: {
            email: '',
            password: '',
            role: 'patient'
        },
        validationSchema,
        onSubmit: async (values) => {
            try {
                dispatch(setLoading(true));
                const response = await authService.login(values);
                dispatch(setCredentials(response));
                navigate('/dashboard');
            } catch (err: any) {
                dispatch(setError(err.response?.data?.error || 'Login failed'));
            } finally {
                dispatch(setLoading(false));
            }
        }
    });

    return (
        <Container component="main" maxWidth="xs">
            <Box
                sx={{
                    marginTop: 8,
                    display: 'flex',
                    flexDirection: 'column',
                    alignItems: 'center'
                }}
            >
                <Paper elevation={3} sx={{ p: 4, width: '100%' }}>
                    <Typography component="h1" variant="h5" align="center" gutterBottom>
                        Sign In
                    </Typography>
                    {error && (
                        <Alert severity="error" sx={{ mb: 2 }}>
                            {error}
                        </Alert>
                    )}
                    <form onSubmit={formik.handleSubmit}>
                        <TextField
                            fullWidth
                            id="email"
                            name="email"
                            label="Email Address"
                            value={formik.values.email}
                            onChange={formik.handleChange}
                            error={formik.touched.email && Boolean(formik.errors.email)}
                            helperText={formik.touched.email && formik.errors.email}
                            margin="normal"
                        />
                        <TextField
                            fullWidth
                            id="password"
                            name="password"
                            label="Password"
                            type="password"
                            value={formik.values.password}
                            onChange={formik.handleChange}
                            error={formik.touched.password && Boolean(formik.errors.password)}
                            helperText={formik.touched.password && formik.errors.password}
                            margin="normal"
                        />
                        <FormControl fullWidth margin="normal">
                            <InputLabel id="role-label">Role</InputLabel>
                            <Select
                                labelId="role-label"
                                id="role"
                                name="role"
                                value={formik.values.role}
                                onChange={formik.handleChange}
                                error={formik.touched.role && Boolean(formik.errors.role)}
                                label="Role"
                            >
                                <MenuItem value="patient">Patient</MenuItem>
                                <MenuItem value="doctor">Doctor</MenuItem>
                            </Select>
                        </FormControl>
                        <Button
                            type="submit"
                            fullWidth
                            variant="contained"
                            sx={{ mt: 3, mb: 2 }}
                            disabled={loading}
                        >
                            {loading ? 'Signing in...' : 'Sign In'}
                        </Button>
                        <Button
                            fullWidth
                            variant="text"
                            onClick={() => navigate('/register')}
                        >
                            Don't have an account? Sign Up
                        </Button>
                    </form>
                </Paper>
            </Box>
        </Container>
    );
};
</file>

<file path="frontend/src/components/auth/Register.tsx">
import { useState } from 'react';
import { useFormik } from 'formik';
import * as Yup from 'yup';
import {
    Box,
    Button,
    TextField,
    Typography,
    Paper,
    Container,
    Alert,
    FormControl,
    InputLabel,
    Select,
    MenuItem,
    Grid
} from '@mui/material';
import { useDispatch, useSelector } from 'react-redux';
import { useNavigate } from 'react-router-dom';
import { authService } from '../../services/authService';
import { setCredentials, setLoading, setError } from '../../store/slices/authSlice';
import { RootState } from '../../store';
import { RegisterRequest } from '../../types/auth';

const validationSchema = Yup.object({
    email: Yup.string()
        .email('Enter a valid email')
        .required('Email is required'),
    username: Yup.string()
        .min(3, 'Username should be of minimum 3 characters length')
        .required('Username is required'),
    password: Yup.string()
        .min(8, 'Password should be of minimum 8 characters length')
        .required('Password is required'),
    password2: Yup.string()
        .oneOf([Yup.ref('password')], 'Passwords must match')
        .required('Confirm password is required'),
    role: Yup.string()
        .oneOf(['patient', 'doctor'], 'Please select a valid role')
        .required('Role is required'),
    // Patient-specific validations
    name: Yup.string().when('role', {
        is: (val: string) => val === 'patient',
        then: () => Yup.string().required('Name is required')
    }),
    age: Yup.number().when('role', {
        is: (val: string) => val === 'patient',
        then: () => Yup.number()
            .min(0, 'Age must be positive')
            .max(120, 'Age must be less than 120')
            .required('Age is required')
    }),
    gender: Yup.string().when('role', {
        is: (val: string) => val === 'patient',
        then: () => Yup.string()
            .oneOf(['male', 'female', 'other'], 'Please select a valid gender')
            .required('Gender is required')
    }),
    phone: Yup.string().when('role', {
        is: (val: string) => val === 'patient',
        then: () => Yup.string().required('Phone number is required')
    }),
    address: Yup.string().when('role', {
        is: (val: string) => val === 'patient',
        then: () => Yup.string().required('Address is required')
    }),
    // Doctor-specific validations
    specialization: Yup.string().when('role', {
        is: (val: string) => val === 'doctor',
        then: () => Yup.string().required('Specialization is required')
    }),
    license_number: Yup.string().when('role', {
        is: (val: string) => val === 'doctor',
        then: () => Yup.string().required('License number is required')
    }),
    years_of_experience: Yup.number().when('role', {
        is: (val: string) => val === 'doctor',
        then: () => Yup.number()
            .min(0, 'Years of experience must be positive')
            .required('Years of experience is required')
    })
});

export const Register: React.FC = () => {
    const dispatch = useDispatch();
    const navigate = useNavigate();
    const { loading, error } = useSelector((state: RootState) => state.auth);
    const [role, setRole] = useState<'patient' | 'doctor'>('patient');

    const formik = useFormik<RegisterRequest>({
        initialValues: {
            email: '',
            username: '',
            password: '',
            password2: '',
            role: 'patient',
            // Patient-specific fields
            name: '',
            age: undefined,
            gender: undefined,
            phone: '',
            address: '',
            // Doctor-specific fields
            specialization: '',
            license_number: '',
            years_of_experience: undefined
        },
        validationSchema,
        onSubmit: async (values) => {
            try {
                dispatch(setLoading(true));
                const response = await authService.register(values);
                dispatch(setCredentials(response));
                navigate('/dashboard');
            } catch (err: any) {
                dispatch(setError(err.response?.data?.error || 'Registration failed'));
            } finally {
                dispatch(setLoading(false));
            }
        }
    });

    return (
        <Container component="main" maxWidth="sm">
            <Box sx={{ mt: 8, mb: 4 }}>
                <Paper elevation={3} sx={{ p: 4 }}>
                    <Typography component="h1" variant="h5" align="center" gutterBottom>
                        Sign Up
                    </Typography>
                    {error && (
                        <Alert severity="error" sx={{ mb: 2 }}>
                            {error}
                        </Alert>
                    )}
                    <form onSubmit={formik.handleSubmit}>
                        <Grid container spacing={2}>
                            {/* Common fields */}
                            <Grid item xs={12}>
                                <TextField
                                    fullWidth
                                    id="email"
                                    name="email"
                                    label="Email Address"
                                    value={formik.values.email}
                                    onChange={formik.handleChange}
                                    error={formik.touched.email && Boolean(formik.errors.email)}
                                    helperText={formik.touched.email && formik.errors.email}
                                />
                            </Grid>
                            <Grid item xs={12}>
                                <TextField
                                    fullWidth
                                    id="username"
                                    name="username"
                                    label="Username"
                                    value={formik.values.username}
                                    onChange={formik.handleChange}
                                    error={formik.touched.username && Boolean(formik.errors.username)}
                                    helperText={formik.touched.username && formik.errors.username}
                                />
                            </Grid>
                            <Grid item xs={12}>
                                <TextField
                                    fullWidth
                                    id="password"
                                    name="password"
                                    label="Password"
                                    type="password"
                                    value={formik.values.password}
                                    onChange={formik.handleChange}
                                    error={formik.touched.password && Boolean(formik.errors.password)}
                                    helperText={formik.touched.password && formik.errors.password}
                                />
                            </Grid>
                            <Grid item xs={12}>
                                <TextField
                                    fullWidth
                                    id="password2"
                                    name="password2"
                                    label="Confirm Password"
                                    type="password"
                                    value={formik.values.password2}
                                    onChange={formik.handleChange}
                                    error={formik.touched.password2 && Boolean(formik.errors.password2)}
                                    helperText={formik.touched.password2 && formik.errors.password2}
                                />
                            </Grid>
                            <Grid item xs={12}>
                                <FormControl fullWidth>
                                    <InputLabel id="role-label">Role</InputLabel>
                                    <Select
                                        labelId="role-label"
                                        id="role"
                                        name="role"
                                        value={formik.values.role}
                                        onChange={(e) => {
                                            formik.handleChange(e);
                                            setRole(e.target.value as 'patient' | 'doctor');
                                        }}
                                        error={formik.touched.role && Boolean(formik.errors.role)}
                                        label="Role"
                                    >
                                        <MenuItem value="patient">Patient</MenuItem>
                                        <MenuItem value="doctor">Doctor</MenuItem>
                                    </Select>
                                </FormControl>
                            </Grid>

                            {/* Role-specific fields */}
                            {role === 'patient' ? (
                                <>
                                    <Grid item xs={12}>
                                        <TextField
                                            fullWidth
                                            id="name"
                                            name="name"
                                            label="Full Name"
                                            value={formik.values.name}
                                            onChange={formik.handleChange}
                                            error={formik.touched.name && Boolean(formik.errors.name)}
                                            helperText={formik.touched.name && formik.errors.name}
                                        />
                                    </Grid>
                                    <Grid item xs={12} sm={6}>
                                        <TextField
                                            fullWidth
                                            id="age"
                                            name="age"
                                            label="Age"
                                            type="number"
                                            value={formik.values.age}
                                            onChange={formik.handleChange}
                                            error={formik.touched.age && Boolean(formik.errors.age)}
                                            helperText={formik.touched.age && formik.errors.age}
                                        />
                                    </Grid>
                                    <Grid item xs={12} sm={6}>
                                        <FormControl fullWidth>
                                            <InputLabel id="gender-label">Gender</InputLabel>
                                            <Select
                                                labelId="gender-label"
                                                id="gender"
                                                name="gender"
                                                value={formik.values.gender}
                                                onChange={formik.handleChange}
                                                error={formik.touched.gender && Boolean(formik.errors.gender)}
                                                label="Gender"
                                            >
                                                <MenuItem value="male">Male</MenuItem>
                                                <MenuItem value="female">Female</MenuItem>
                                                <MenuItem value="other">Other</MenuItem>
                                            </Select>
                                        </FormControl>
                                    </Grid>
                                    <Grid item xs={12}>
                                        <TextField
                                            fullWidth
                                            id="phone"
                                            name="phone"
                                            label="Phone Number"
                                            value={formik.values.phone}
                                            onChange={formik.handleChange}
                                            error={formik.touched.phone && Boolean(formik.errors.phone)}
                                            helperText={formik.touched.phone && formik.errors.phone}
                                        />
                                    </Grid>
                                    <Grid item xs={12}>
                                        <TextField
                                            fullWidth
                                            id="address"
                                            name="address"
                                            label="Address"
                                            multiline
                                            rows={2}
                                            value={formik.values.address}
                                            onChange={formik.handleChange}
                                            error={formik.touched.address && Boolean(formik.errors.address)}
                                            helperText={formik.touched.address && formik.errors.address}
                                        />
                                    </Grid>
                                </>
                            ) : (
                                <>
                                    <Grid item xs={12}>
                                        <TextField
                                            fullWidth
                                            id="specialization"
                                            name="specialization"
                                            label="Specialization"
                                            value={formik.values.specialization}
                                            onChange={formik.handleChange}
                                            error={formik.touched.specialization && Boolean(formik.errors.specialization)}
                                            helperText={formik.touched.specialization && formik.errors.specialization}
                                        />
                                    </Grid>
                                    <Grid item xs={12}>
                                        <TextField
                                            fullWidth
                                            id="license_number"
                                            name="license_number"
                                            label="License Number"
                                            value={formik.values.license_number}
                                            onChange={formik.handleChange}
                                            error={formik.touched.license_number && Boolean(formik.errors.license_number)}
                                            helperText={formik.touched.license_number && formik.errors.license_number}
                                        />
                                    </Grid>
                                    <Grid item xs={12}>
                                        <TextField
                                            fullWidth
                                            id="years_of_experience"
                                            name="years_of_experience"
                                            label="Years of Experience"
                                            type="number"
                                            value={formik.values.years_of_experience}
                                            onChange={formik.handleChange}
                                            error={formik.touched.years_of_experience && Boolean(formik.errors.years_of_experience)}
                                            helperText={formik.touched.years_of_experience && formik.errors.years_of_experience}
                                        />
                                    </Grid>
                                </>
                            )}
                        </Grid>

                        <Button
                            type="submit"
                            fullWidth
                            variant="contained"
                            sx={{ mt: 3, mb: 2 }}
                            disabled={loading}
                        >
                            {loading ? 'Signing up...' : 'Sign Up'}
                        </Button>
                        <Button
                            fullWidth
                            variant="text"
                            onClick={() => navigate('/login')}
                        >
                            Already have an account? Sign In
                        </Button>
                    </form>
                </Paper>
            </Box>
        </Container>
    );
};
</file>

<file path="frontend/src/components/Chatbot.tsx">
import React, { useState, useRef, useEffect } from 'react';
import {
  Box,
  Paper,
  Typography,
  TextField,
  Button,
  Avatar,
  AppBar,
  Toolbar,
  IconButton,
  Stack,
  Fade,
  CircularProgress
} from '@mui/material';
import RestartAltIcon from '@mui/icons-material/RestartAlt';
import SendIcon from '@mui/icons-material/Send';
import PersonIcon from '@mui/icons-material/Person';
import SmartToyIcon from '@mui/icons-material/SmartToy';

interface Message {
  sender: 'user' | 'bot';
  text: string;
  answer?: string; // chỉ dùng cho user trả lời Có/Không
}

const API_URL = 'http://localhost:8008/api/chat/';
const NOT_FOUND_SYMPTOM = 'Tôi chưa từng nghe triệu chứng đó, bạn còn gặp triệu chứng nào khác không?';

function speak(text: string) {
  const utter = new window.SpeechSynthesisUtterance(text);
  utter.lang = 'vi-VN';
  window.speechSynthesis.speak(utter);
}

const Chatbot: React.FC = () => {
  const [messages, setMessages] = useState<Message[]>([]);
  const [input, setInput] = useState('');
  const [waiting, setWaiting] = useState(false);
  const inputRef = useRef<HTMLInputElement>(null);
  const chatBodyRef = useRef<HTMLDivElement>(null);
  const lastBotMsgRef = useRef<string | null>(null);

  // Gửi hội thoại lên backend
  const sendMessage = async (msg?: Message, questionText?: string, answer?: string) => {
    let history = [...messages];
    if (msg) {
      history = [...messages, msg];
    }
    // Nếu là trả lời Có/Không, gửi thêm object có answer cho backend
    if (questionText && answer) {
      history = [...messages, { sender: 'user', text: questionText, answer }];
    }
    setWaiting(true);
    try {
      const res = await fetch(API_URL, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ history }),
      });
      const data = await res.json();
      setMessages([...history, { sender: 'bot', text: data.reply }]);
      setWaiting(false);
    } catch (e) {
      setMessages([...history, { sender: 'bot', text: 'Lỗi kết nối server.' }]);
      setWaiting(false);
    }
  };

  // Xử lý gửi triệu chứng đầu tiên
  const handleSend = () => {
    if (!input.trim()) return;
    if (
      messages.length === 0 ||
      (messages.length > 0 && messages[messages.length - 1].sender === 'bot' &&
        (messages[messages.length - 1].text === 'Triệu chứng bạn gặp phải là gì?' ||
         messages[messages.length - 1].text === NOT_FOUND_SYMPTOM))
    ) {
      sendMessage({ sender: 'user', text: input.trim() });
      setInput('');
      inputRef.current?.focus();
    }
  };

  // Xử lý trả lời Có/Không cho các câu hỏi bot
  const handleAnswer = (answer: string) => {
    const lastBotMsg = messages[messages.length - 1];
    if (!lastBotMsg || lastBotMsg.sender !== 'bot') return;
    // Không hiển thị lại tin nhắn user, chỉ gửi cho backend
    sendMessage(undefined, lastBotMsg.text, answer);
  };

  // Khi load lần đầu, tự động hỏi triệu chứng
  useEffect(() => {
    if (messages.length === 0) {
      sendMessage({ sender: 'user', text: '' });
    }
    // eslint-disable-next-line
  }, []);

  // Tự động scroll xuống cuối khi có tin nhắn mới
  useEffect(() => {
    if (chatBodyRef.current) {
      chatBodyRef.current.scrollTop = chatBodyRef.current.scrollHeight;
    }
  }, [messages]);

  // Phát âm thanh chỉ khi có tin nhắn bot mới thực sự (không phát lại khi F5)
  useEffect(() => {
    if (messages.length > 0) {
      const lastMsg = messages[messages.length - 1];
      if (lastMsg.sender === 'bot' && lastMsg.text !== lastBotMsgRef.current) {
        speak(lastMsg.text);
        lastBotMsgRef.current = lastMsg.text;
      }
    }
  }, [messages]);

  // Kiểm tra có phải đang ở câu hỏi đầu tiên không
  const isFirstBotQuestion =
    messages.length > 0 &&
    messages[messages.length - 1].sender === 'bot' &&
    messages[messages.length - 1].text === 'Triệu chứng bạn gặp phải là gì?';

  // Nếu bot trả về "Tôi chưa từng nghe triệu chứng đó..." thì cho nhập lại
  const isNotFoundSymptom =
    messages.length > 0 &&
    messages[messages.length - 1].sender === 'bot' &&
    messages[messages.length - 1].text === NOT_FOUND_SYMPTOM;

  // Hàm reset hội thoại
  const handleReset = () => {
    setMessages([]);
    setInput('');
    setWaiting(false);
    inputRef.current?.focus();
  };

  // Khi messages rỗng (sau reset), tự động gửi lại câu hỏi đầu tiên
  useEffect(() => {
    if (messages.length === 0 && !waiting) {
      sendMessage({ sender: 'user', text: '' });
    }
    // eslint-disable-next-line
  }, [messages]);

  return (
    <Box maxWidth={480} mx="auto" mt={6}>
      <Paper elevation={6} sx={{ borderRadius: 2, overflow: 'hidden', boxShadow: 8, p: 0 }}>
        <AppBar position="static" color="primary" elevation={0} sx={{ borderRadius: 0, background: 'linear-gradient(90deg, #1976d2 0%, #ff4081 100%)', boxShadow: 'none' }}>
          <Toolbar variant="dense" sx={{ minHeight: 48 }}>
            <SmartToyIcon sx={{ mr: 1 }} />
            <Typography variant="h6" sx={{ flexGrow: 1, fontWeight: 600, fontSize: 18 }}>
              Healthcare Chatbot
            </Typography>
            <IconButton color="inherit" onClick={handleReset} size="small">
              <RestartAltIcon />
            </IconButton>
          </Toolbar>
        </AppBar>
        <Box ref={chatBodyRef} sx={{
          minHeight: 320,
          maxHeight: 400,
          overflowY: 'auto',
          background: 'linear-gradient(135deg, #e3f2fd 0%, #fce4ec 100%)',
          px: 2, py: 2,
          display: 'flex', flexDirection: 'column', gap: 1.5
        }}>
          {messages.map((msg, idx) => (
            <Fade in key={idx} timeout={400}>
              <Box display="flex" justifyContent={msg.sender === 'user' ? 'flex-end' : 'flex-start'} alignItems="flex-end">
                {msg.sender === 'bot' && (
                  <Avatar sx={{ bgcolor: 'primary.main', width: 32, height: 32, mr: 1 }}>
                    <SmartToyIcon fontSize="small" />
                  </Avatar>
                )}
                <Box
                  sx={{
                    bgcolor: msg.sender === 'user' ? 'primary.light' : 'grey.100',
                    color: 'text.primary',
                    px: 2,
                    py: 1,
                    borderRadius: 3,
                    maxWidth: 280,
                    boxShadow: 1,
                    fontSize: 16,
                    wordBreak: 'break-word',
                  }}
                >
                  {msg.text}
                </Box>
                {msg.sender === 'user' && (
                  <Avatar sx={{ bgcolor: 'secondary.main', width: 32, height: 32, ml: 1 }}>
                    <PersonIcon fontSize="small" />
                  </Avatar>
                )}
              </Box>
            </Fade>
          ))}
          {waiting && (
            <Box display="flex" justifyContent="center" alignItems="center" mt={1}>
              <CircularProgress size={24} color="primary" />
            </Box>
          )}
        </Box>
        {/* Nếu bot vừa hỏi "Bạn có bị ... không?" thì hiện nút Có/Không */}
        {messages.length > 0 && messages[messages.length - 1].sender === 'bot' && messages[messages.length - 1].text.startsWith('Bạn có bị') && (
          <Stack direction="row" spacing={2} justifyContent="center" sx={{ p: 2 }}>
            <Button variant="contained" color="success" size="large" onClick={() => handleAnswer('có')} disabled={waiting} sx={{ borderRadius: 3, minWidth: 100 }}>
              Có
            </Button>
            <Button variant="contained" color="error" size="large" onClick={() => handleAnswer('không')} disabled={waiting} sx={{ borderRadius: 3, minWidth: 100 }}>
              Không
            </Button>
          </Stack>
        )}
        {/* Chỉ hiển thị input nhập tự do ở câu hỏi đầu tiên hoặc khi không nhận diện được triệu chứng */}
        {(isFirstBotQuestion || isNotFoundSymptom) && (
          <Box sx={{ display: 'flex', gap: 1, p: 2, borderTop: '1px solid #eee', background: '#fff' }}>
            <TextField
              inputRef={inputRef}
              value={input}
              onChange={e => setInput(e.target.value)}
              onKeyDown={e => e.key === 'Enter' && handleSend()}
              placeholder="Nhập triệu chứng..."
              disabled={waiting}
              fullWidth
              size="small"
              sx={{ borderRadius: 3, bgcolor: 'grey.50' }}
            />
            <Button
              variant="contained"
              color="primary"
              endIcon={<SendIcon />}
              onClick={handleSend}
              disabled={waiting || !input.trim()}
              sx={{ borderRadius: 3, minWidth: 48 }}
            >
              Gửi
            </Button>
          </Box>
        )}
      </Paper>
    </Box>
  );
};

export default Chatbot;
</file>

<file path="frontend/src/components/UserForm.tsx">
import React from 'react';
import {
    Box,
    Button,
    TextField,
    MenuItem,
    Stack,
    Typography,
} from '@mui/material';
import { Patient, Doctor, CreatePatientDto, CreateDoctorDto } from '../types/user';

interface UserFormProps<T extends CreatePatientDto | CreateDoctorDto> {
    type: 'patient' | 'doctor';
    initialData?: Partial<T>;
    onSubmit: (data: T) => Promise<void>;
    onCancel: () => void;
}

const UserForm = <T extends CreatePatientDto | CreateDoctorDto>({
    type,
    initialData,
    onSubmit,
    onCancel,
}: UserFormProps<T>) => {
    const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {
        event.preventDefault();
        const formData = new FormData(event.currentTarget);
        const data = Object.fromEntries(formData.entries()) as unknown as T;
        onSubmit(data);
    };

    return (
        <Box component="form" onSubmit={handleSubmit} sx={{ mt: 2 }}>
            <Stack spacing={2}>
                <TextField
                    required
                    fullWidth
                    name="name"
                    label="Name"
                    defaultValue={initialData?.name}
                />
                {type === 'doctor' && (
                    <>
                        <TextField
                            required
                            fullWidth
                            name="specialization"
                            label="Specialization"
                            defaultValue={(initialData as Partial<CreateDoctorDto>)?.specialization}
                        />
                        <TextField
                            required
                            fullWidth
                            name="license_number"
                            label="License Number"
                            defaultValue={(initialData as Partial<CreateDoctorDto>)?.license_number}
                        />
                        <TextField
                            required
                            fullWidth
                            type="number"
                            name="years_of_experience"
                            label="Years of Experience"
                            defaultValue={(initialData as Partial<CreateDoctorDto>)?.years_of_experience}
                        />
                        <TextField
                            required
                            fullWidth
                            name="education"
                            label="Education"
                            defaultValue={(initialData as Partial<CreateDoctorDto>)?.education}
                        />
                        <TextField
                            required
                            fullWidth
                            name="languages"
                            label="Languages"
                            defaultValue={(initialData as Partial<CreateDoctorDto>)?.languages}
                        />
                    </>
                )}

                {type === 'patient' && (
                    <>
                        <TextField
                            required
                            fullWidth
                            name="age"
                            label="Age"
                            type="number"
                            defaultValue={(initialData as Partial<CreatePatientDto>)?.age}
                        />
                        <TextField
                            required
                            fullWidth
                            select
                            name="gender"
                            label="Gender"
                            defaultValue={(initialData as Partial<CreatePatientDto>)?.gender || 'other'}
                        >
                            <MenuItem value="male">Male</MenuItem>
                            <MenuItem value="female">Female</MenuItem>
                            <MenuItem value="other">Other</MenuItem>
                        </TextField>
                        <TextField
                            required
                            fullWidth
                            name="address"
                            label="Address"
                            multiline
                            rows={2}
                            defaultValue={(initialData as Partial<CreatePatientDto>)?.address}
                        />
                        <TextField
                            fullWidth
                            name="medical_history"
                            label="Medical History"
                            multiline
                            rows={3}
                            defaultValue={(initialData as Partial<CreatePatientDto>)?.medical_history}
                        />
                        <TextField
                            required
                            fullWidth
                            select
                            name="patient_type"
                            label="Patient Type"
                            defaultValue={(initialData as Partial<CreatePatientDto>)?.patient_type || 'current'}
                        >
                            <MenuItem value="current">Current Patient</MenuItem>
                            <MenuItem value="remote">Remote Patient</MenuItem>
                            <MenuItem value="emergency">Emergency Patient</MenuItem>
                            <MenuItem value="referral">Referred Patient</MenuItem>
                            <MenuItem value="chronic">Chronic Care Patient</MenuItem>
                            <MenuItem value="preventive">Preventive Care Patient</MenuItem>
                        </TextField>
                        <TextField
                            fullWidth
                            select
                            name="preferred_contact_method"
                            label="Preferred Contact Method"
                            defaultValue={(initialData as Partial<CreatePatientDto>)?.preferred_contact_method || 'phone'}
                        >
                            <MenuItem value="phone">Phone</MenuItem>
                            <MenuItem value="email">Email</MenuItem>
                            <MenuItem value="video">Video Call</MenuItem>
                        </TextField>
                        <TextField
                            fullWidth
                            name="timezone"
                            label="Timezone"
                            defaultValue={(initialData as Partial<CreatePatientDto>)?.timezone}
                        />
                    </>
                )}

                <Box sx={{ display: 'flex', gap: 2, justifyContent: 'flex-end' }}>
                    <Button onClick={onCancel}>Cancel</Button>
                    <Button type="submit" variant="contained" color="primary">
                        {initialData ? 'Update' : 'Create'}
                    </Button>
                </Box>
            </Stack>
        </Box>
    );
};

export default UserForm;
</file>

<file path="frontend/src/hooks/useApi.ts">
import { useState, useCallback } from 'react';
import axios, { AxiosRequestConfig, AxiosError } from 'axios';

interface UseApiReturn<T> {
  data: T | null;
  loading: boolean;
  error: string | null;
  execute: (config: AxiosRequestConfig) => Promise<void>;
}

export const useApi = <T>(): UseApiReturn<T> => {
  const [data, setData] = useState<T | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const execute = useCallback(async (config: AxiosRequestConfig) => {
    try {
      setLoading(true);
      setError(null);
      const response = await axios(config);
      setData(response.data);
    } catch (err) {
      const error = err as AxiosError;
      setError(error.message || 'An error occurred');
    } finally {
      setLoading(false);
    }
  }, []);

  return { data, loading, error, execute };
};
</file>

<file path="frontend/src/hooks/useAppDispatch.ts">
import { useDispatch } from 'react-redux';
import type { AppDispatch } from '../store';

export const useAppDispatch = () => useDispatch<AppDispatch>();
</file>

<file path="frontend/src/hooks/useAppointments.ts">
import { useCallback } from 'react';
import { useAppDispatch } from './useAppDispatch';
import { useAppSelector } from './useAppSelector';
import { useApi } from './useApi';
import { RootState } from '../store';
import {
  setAppointments,
  addAppointment,
  updateAppointment,
  deleteAppointment,
  setLoading,
  setError,
} from '../store/slices/appointmentSlice';
import axios from 'axios';
import { Appointment, AppointmentResponse } from '../types/appointment';

interface AppointmentState {
  appointments: Appointment[];
  loading: boolean;
  error: string | null;
}

export const useAppointments = () => {
  const dispatch = useAppDispatch();
  const { execute: appointmentsApi } = useApi<Appointment[]>();
  const appointments = useAppSelector((state: RootState) => (state.appointments as AppointmentState).appointments);
  const loading = useAppSelector((state: RootState) => (state.appointments as AppointmentState).loading);
  const error = useAppSelector((state: RootState) => (state.appointments as AppointmentState).error);

  const fetchAppointments = useCallback(async () => {
    try {
      dispatch(setLoading(true));
      const token = localStorage.getItem('token');
      const response = await axios.get<AppointmentResponse>('http://localhost:8000/api/appointments', {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });
      if (response.data.status === 200) {
        dispatch(setAppointments(response.data.data as Appointment[]));
      }
    } catch (error) {
      dispatch(setError('Failed to fetch appointments'));
    } finally {
      dispatch(setLoading(false));
    }
  }, [dispatch]);

  const createAppointment = useCallback(async (appointment: Omit<Appointment, 'id'>) => {
    try {
      dispatch(setLoading(true));
      const token = localStorage.getItem('token');
      const response = await axios.post<AppointmentResponse>(
        'http://localhost:8000/api/appointments',
        appointment,
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );
      if (response.data.status === 201) {
        dispatch(addAppointment(response.data.data as Appointment));
      }
    } catch (error) {
      dispatch(setError('Failed to create appointment'));
    } finally {
      dispatch(setLoading(false));
    }
  }, [dispatch]);

  const updateAppointmentById = useCallback(async (id: string, appointment: Partial<Appointment>) => {
    try {
      dispatch(setLoading(true));
      const token = localStorage.getItem('token');
      const response = await axios.put<AppointmentResponse>(
        `http://localhost:8000/api/appointments/${id}`,
        appointment,
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );
      if (response.data.status === 200) {
        dispatch(updateAppointment(response.data.data as Appointment));
      }
    } catch (error) {
      dispatch(setError('Failed to update appointment'));
    } finally {
      dispatch(setLoading(false));
    }
  }, [dispatch]);

  const deleteAppointmentById = useCallback(async (id: string) => {
    try {
      dispatch(setLoading(true));
      const token = localStorage.getItem('token');
      const response = await axios.delete<AppointmentResponse>(
        `http://localhost:8000/api/appointments/${id}`,
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );
      if (response.data.status === 200) {
        dispatch(deleteAppointment(id));
      }
    } catch (error) {
      dispatch(setError('Failed to delete appointment'));
    } finally {
      dispatch(setLoading(false));
    }
  }, [dispatch]);

  return {
    appointments,
    loading,
    error,
    fetchAppointments,
    createAppointment,
    updateAppointment: updateAppointmentById,
    deleteAppointment: deleteAppointmentById,
  };
};
</file>

<file path="frontend/src/hooks/useAppSelector.ts">
import { useSelector, TypedUseSelectorHook } from 'react-redux';
import type { RootState } from '../store';

export const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;
</file>

<file path="frontend/src/hooks/useDoctors.ts">
import { useCallback } from 'react';
import { useAppDispatch } from './useAppDispatch';
import { useAppSelector } from './useAppSelector';
import { RootState } from '../store';
import {
  setDoctors,
  addDoctor,
  updateDoctor,
  deleteDoctor,
  setLoading,
  setError,
} from '../store/slices/doctorSlice';
import axios from 'axios';
import { Doctor } from '../types/user';

interface DoctorState {
  doctors: Doctor[];
  loading: boolean;
  error: string | null;
}

const API_URL = process.env.REACT_APP_API_URL || 'http://localhost';

export const useDoctors = () => {
  const dispatch = useAppDispatch();
  const doctors = useAppSelector((state: RootState) => (state.doctors as DoctorState).doctors);
  const loading = useAppSelector((state: RootState) => (state.doctors as DoctorState).loading);
  const error = useAppSelector((state: RootState) => (state.doctors as DoctorState).error);

  const fetchDoctors = useCallback(async () => {
    try {
      dispatch(setLoading(true));
      const token = localStorage.getItem('token');
      const response = await axios.get(`${API_URL}/doctor/doctors/`, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });
      if (response.data) {
        dispatch(setDoctors(response.data));
      }
    } catch (error) {
      dispatch(setError('Failed to fetch doctors'));
      console.error('Error fetching doctors:', error);
    } finally {
      dispatch(setLoading(false));
    }
  }, [dispatch]);

  const createDoctor = useCallback(async (doctorData: Omit<Doctor, 'id'>) => {
    try {
      dispatch(setLoading(true));
      const token = localStorage.getItem('token');
      const response = await axios.post(`${API_URL}/doctor/doctors/`, doctorData, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });
      if (response.data) {
        dispatch(addDoctor(response.data));
      }
    } catch (error) {
      dispatch(setError('Failed to create doctor'));
      console.error('Error creating doctor:', error);
    } finally {
      dispatch(setLoading(false));
    }
  }, [dispatch]);

  const updateDoctorById = useCallback(async (id: string, doctorData: Partial<Doctor>) => {
    try {
      dispatch(setLoading(true));
      const token = localStorage.getItem('token');
      const response = await axios.put(`${API_URL}/doctor/doctors/${id}/`, doctorData, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });
      if (response.data) {
        dispatch(updateDoctor(response.data));
      }
    } catch (error) {
      dispatch(setError('Failed to update doctor'));
      console.error('Error updating doctor:', error);
    } finally {
      dispatch(setLoading(false));
    }
  }, [dispatch]);

  const deleteDoctorById = useCallback(async (id: string) => {
    try {
      dispatch(setLoading(true));
      const token = localStorage.getItem('token');
      await axios.delete(`${API_URL}/doctor/doctors/${id}/`, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });
      dispatch(deleteDoctor(id));
    } catch (error) {
      dispatch(setError('Failed to delete doctor'));
      console.error('Error deleting doctor:', error);
    } finally {
      dispatch(setLoading(false));
    }
  }, [dispatch]);

  return {
    doctors,
    loading,
    error,
    fetchDoctors,
    createDoctor,
    updateDoctor: updateDoctorById,
    deleteDoctor: deleteDoctorById,
  };
};
</file>

<file path="frontend/src/hooks/useError.ts">
import { useState, useCallback } from 'react';
import { useNotification } from './useNotification';

export const useError = () => {
  const [error, setError] = useState<string | null>(null);
  const { showError } = useNotification();

  const handleError = useCallback((error: unknown) => {
    let errorMessage = 'An unexpected error occurred';

    if (error instanceof Error) {
      errorMessage = error.message;
    } else if (typeof error === 'string') {
      errorMessage = error;
    }

    setError(errorMessage);
    showError(errorMessage);
  }, [showError]);

  const clearError = useCallback(() => {
    setError(null);
  }, []);

  const withErrorHandling = useCallback(async <T>(callback: () => Promise<T>): Promise<T | null> => {
    try {
      clearError();
      return await callback();
    } catch (error) {
      handleError(error);
      return null;
    }
  }, [clearError, handleError]);

  return {
    error,
    handleError,
    clearError,
    withErrorHandling,
  };
};
</file>

<file path="frontend/src/hooks/useFormValidation.ts">
import { useFormik } from 'formik';
import * as Yup from 'yup';

interface ValidationSchemas {
  login: typeof loginSchema;
  register: typeof registerSchema;
  appointment: typeof appointmentSchema;
  doctor: typeof doctorSchema;
  patient: typeof patientSchema;
  labResult: typeof labResultSchema;
}

const loginSchema = Yup.object().shape({
  email: Yup.string()
    .email('Invalid email address')
    .required('Email is required'),
  password: Yup.string()
    .min(8, 'Password must be at least 8 characters')
    .required('Password is required'),
});

const registerSchema = Yup.object().shape({
  name: Yup.string()
    .min(2, 'Name must be at least 2 characters')
    .required('Name is required'),
  email: Yup.string()
    .email('Invalid email address')
    .required('Email is required'),
  password: Yup.string()
    .min(8, 'Password must be at least 8 characters')
    .required('Password is required'),
  confirmPassword: Yup.string()
    .oneOf([Yup.ref('password')], 'Passwords must match')
    .required('Confirm password is required'),
  role: Yup.string()
    .oneOf(['patient', 'doctor'], 'Invalid role')
    .required('Role is required'),
});

const appointmentSchema = Yup.object().shape({
  doctorId: Yup.string()
    .required('Doctor is required'),
  date: Yup.date()
    .min(new Date(), 'Date cannot be in the past')
    .required('Date is required'),
  time: Yup.string()
    .required('Time is required'),
});

const doctorSchema = Yup.object().shape({
  name: Yup.string()
    .min(2, 'Name must be at least 2 characters')
    .required('Name is required'),
  email: Yup.string()
    .email('Invalid email address')
    .required('Email is required'),
  specialization: Yup.string()
    .required('Specialization is required'),
  phone: Yup.string()
    .matches(/^\+?[\d\s-]+$/, 'Invalid phone number')
    .required('Phone number is required'),
  address: Yup.string()
    .required('Address is required'),
});

const patientSchema = Yup.object().shape({
  name: Yup.string()
    .min(2, 'Name must be at least 2 characters')
    .required('Name is required'),
  email: Yup.string()
    .email('Invalid email address')
    .required('Email is required'),
  phone: Yup.string()
    .matches(/^\+?[\d\s-]+$/, 'Invalid phone number')
    .required('Phone number is required'),
  address: Yup.string()
    .required('Address is required'),
  dateOfBirth: Yup.date()
    .max(new Date(), 'Date of birth cannot be in the future')
    .required('Date of birth is required'),
  gender: Yup.string()
    .oneOf(['male', 'female', 'other'], 'Invalid gender')
    .required('Gender is required'),
});

const labResultSchema = Yup.object().shape({
  patientId: Yup.string()
    .required('Patient is required'),
  testName: Yup.string()
    .required('Test name is required'),
  testDate: Yup.date()
    .required('Test date is required'),
  result: Yup.string()
    .required('Result is required'),
  notes: Yup.string(),
});

export const useFormValidation = <T extends keyof ValidationSchemas>(
  formType: T,
  initialValues: any,
  onSubmit: (values: any) => void,
) => {
  const schemas: ValidationSchemas = {
    login: loginSchema,
    register: registerSchema,
    appointment: appointmentSchema,
    doctor: doctorSchema,
    patient: patientSchema,
    labResult: labResultSchema,
  };

  const formik = useFormik({
    initialValues,
    validationSchema: schemas[formType],
    onSubmit,
  });

  return formik;
};
</file>

<file path="frontend/src/hooks/useLabResults.ts">
export {};
</file>

<file path="frontend/src/hooks/useLoading.ts">
import { useState, useCallback } from 'react';

export const useLoading = (initialState = false) => {
  const [isLoading, setIsLoading] = useState(initialState);

  const startLoading = useCallback(() => {
    setIsLoading(true);
  }, []);

  const stopLoading = useCallback(() => {
    setIsLoading(false);
  }, []);

  const withLoading = useCallback(async <T>(callback: () => Promise<T>): Promise<T> => {
    try {
      startLoading();
      return await callback();
    } finally {
      stopLoading();
    }
  }, [startLoading, stopLoading]);

  return {
    isLoading,
    startLoading,
    stopLoading,
    withLoading,
  };
};
</file>

<file path="frontend/src/hooks/useNotification.ts">
import { useCallback } from 'react';
import { useSnackbar, OptionsObject } from 'notistack';

type NotificationType = 'success' | 'error' | 'warning' | 'info';

export const useNotification = () => {
  const { enqueueSnackbar } = useSnackbar();

  const showNotification = useCallback((message: string, type: NotificationType = 'info', options?: Partial<OptionsObject>) => {
    enqueueSnackbar(message, {
      variant: type,
      anchorOrigin: {
        vertical: 'top',
        horizontal: 'right',
      },
      ...options,
    });
  }, [enqueueSnackbar]);

  const showSuccess = useCallback((message: string, options?: Partial<OptionsObject>) => {
    showNotification(message, 'success', options);
  }, [showNotification]);

  const showError = useCallback((message: string, options?: Partial<OptionsObject>) => {
    showNotification(message, 'error', options);
  }, [showNotification]);

  const showWarning = useCallback((message: string, options?: Partial<OptionsObject>) => {
    showNotification(message, 'warning', options);
  }, [showNotification]);

  const showInfo = useCallback((message: string, options?: Partial<OptionsObject>) => {
    showNotification(message, 'info', options);
  }, [showNotification]);

  return {
    showNotification,
    showSuccess,
    showError,
    showWarning,
    showInfo,
  };
};
</file>

<file path="frontend/src/hooks/usePagination.ts">
import { useState, useCallback, useMemo } from 'react';

interface PaginationOptions {
  initialPage?: number;
  initialRowsPerPage?: number;
  rowsPerPageOptions?: number[];
}

export const usePagination = <T>({
  initialPage = 0,
  initialRowsPerPage = 10,
  rowsPerPageOptions = [5, 10, 25, 50],
}: PaginationOptions = {}) => {
  const [page, setPage] = useState(initialPage);
  const [rowsPerPage, setRowsPerPage] = useState(initialRowsPerPage);

  const handleChangePage = useCallback((_event: unknown, newPage: number) => {
    setPage(newPage);
  }, []);

  const handleChangeRowsPerPage = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {
    setRowsPerPage(parseInt(event.target.value, 10));
    setPage(0);
  }, []);

  const paginateData = useCallback((data: T[]) => {
    const startIndex = page * rowsPerPage;
    const endIndex = startIndex + rowsPerPage;
    return data.slice(startIndex, endIndex);
  }, [page, rowsPerPage]);

  const paginationProps = useMemo(() => ({
    page,
    rowsPerPage,
    rowsPerPageOptions,
    onPageChange: handleChangePage,
    onRowsPerPageChange: handleChangeRowsPerPage,
  }), [page, rowsPerPage, rowsPerPageOptions, handleChangePage, handleChangeRowsPerPage]);

  return {
    page,
    rowsPerPage,
    handleChangePage,
    handleChangeRowsPerPage,
    paginateData,
    paginationProps,
  };
};
</file>

<file path="frontend/src/hooks/usePatients.ts">
import { useCallback } from 'react';
import { useAppDispatch } from './useAppDispatch';
import { useAppSelector } from './useAppSelector';
import { RootState } from '../store';
import {
  setPatients,
  addPatient,
  updatePatient,
  deletePatient,
  setLoading,
  setError,
} from '../store/slices/patientSlice';
import axios from 'axios';
import { Patient } from '../types/user';

interface PatientState {
  patients: Patient[];
  loading: boolean;
  error: string | null;
}

const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8004';

export const usePatients = () => {
  const dispatch = useAppDispatch();
  const patients = useAppSelector((state: RootState) => (state.patients as PatientState).patients);
  const loading = useAppSelector((state: RootState) => (state.patients as PatientState).loading);
  const error = useAppSelector((state: RootState) => (state.patients as PatientState).error);

  const fetchPatients = useCallback(async () => {
    try {
      dispatch(setLoading(true));
      const token = localStorage.getItem('token');
      const response = await axios.get(`${API_URL}/api/patients/`, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });
      if (response.data) {
        dispatch(setPatients(response.data));
      }
    } catch (error) {
      dispatch(setError('Failed to fetch patients'));
      console.error('Error fetching patients:', error);
    } finally {
      dispatch(setLoading(false));
    }
  }, [dispatch]);

  const createPatient = useCallback(async (patientData: Omit<Patient, 'id'>) => {
    try {
      dispatch(setLoading(true));
      const token = localStorage.getItem('token');
      const response = await axios.post(`${API_URL}/api/patients/`, patientData, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });
      if (response.data) {
        dispatch(addPatient(response.data));
      }
    } catch (error) {
      dispatch(setError('Failed to create patient'));
      console.error('Error creating patient:', error);
    } finally {
      dispatch(setLoading(false));
    }
  }, [dispatch]);

  const updatePatientById = useCallback(async (id: string, patientData: Partial<Patient>) => {
    try {
      dispatch(setLoading(true));
      const token = localStorage.getItem('token');
      const response = await axios.put(`${API_URL}/api/patients/${id}/`, patientData, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });
      if (response.data) {
        dispatch(updatePatient(response.data));
      }
    } catch (error) {
      dispatch(setError('Failed to update patient'));
      console.error('Error updating patient:', error);
    } finally {
      dispatch(setLoading(false));
    }
  }, [dispatch]);

  const deletePatientById = useCallback(async (id: string) => {
    try {
      dispatch(setLoading(true));
      const token = localStorage.getItem('token');
      await axios.delete(`${API_URL}/api/patients/${id}/`, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });
      dispatch(deletePatient(id));
    } catch (error) {
      dispatch(setError('Failed to delete patient'));
      console.error('Error deleting patient:', error);
    } finally {
      dispatch(setLoading(false));
    }
  }, [dispatch]);

  return {
    patients,
    loading,
    error,
    fetchPatients,
    createPatient,
    updatePatient: updatePatientById,
    deletePatient: deletePatientById,
  };
};
</file>

<file path="frontend/src/hooks/useProtectedRoute.ts">
export {};
</file>

<file path="frontend/src/hooks/useSearch.ts">
import { useState, useCallback, useMemo } from 'react';

interface SearchOptions<T> {
  searchableFields?: (keyof T)[];
  initialSearchTerm?: string;
}

export const useSearch = <T extends Record<string, any>>({
  searchableFields,
  initialSearchTerm = ''
}: SearchOptions<T> = {}) => {
  const [searchTerm, setSearchTerm] = useState(initialSearchTerm);

  const handleSearchChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {
    setSearchTerm(event.target.value);
  }, []);

  const searchData = useCallback(
    (data: T[]) => {
      if (!searchTerm) return data;
      if (!searchableFields) return data;

      return data.filter((item) =>
        searchableFields.some((field) => {
          const value = item[field];
          if (typeof value === 'string') {
            return value.toLowerCase().includes(searchTerm.toLowerCase());
          }
          return false;
        })
      );
    },
    [searchTerm, searchableFields]
  );

  const searchProps = useMemo(
    () => ({
      value: searchTerm,
      onChange: handleSearchChange,
      placeholder: 'Search...'
    }),
    [searchTerm, handleSearchChange]
  );

  return {
    searchTerm,
    handleSearchChange,
    searchData,
    searchProps
  };
};

export {};
</file>

<file path="frontend/src/hooks/useSorting.ts">
import { useState, useCallback, useMemo } from 'react';

type Order = 'asc' | 'desc';

interface SortingOptions<T> {
  initialOrderBy?: keyof T;
  initialOrder?: Order;
}

export const useSorting = <T extends Record<string, any>>({
  initialOrderBy,
  initialOrder = 'asc',
}: SortingOptions<T> = {}) => {
  const [orderBy, setOrderBy] = useState<keyof T | undefined>(initialOrderBy);
  const [order, setOrder] = useState<Order>(initialOrder);

  const handleRequestSort = useCallback((property: keyof T) => {
    const isAsc = orderBy === property && order === 'asc';
    setOrder(isAsc ? 'desc' : 'asc');
    setOrderBy(property);
  }, [order, orderBy]);

  const sortData = useCallback((data: T[]) => {
    if (!orderBy) {
      return data;
    }

    return [...data].sort((a, b) => {
      const aValue = a[orderBy];
      const bValue = b[orderBy];

      if (aValue === bValue) {
        return 0;
      }

      if (aValue === null || aValue === undefined) {
        return order === 'asc' ? -1 : 1;
      }

      if (bValue === null || bValue === undefined) {
        return order === 'asc' ? 1 : -1;
      }

      if (typeof aValue === 'string' && typeof bValue === 'string') {
        return order === 'asc'
          ? aValue.localeCompare(bValue)
          : bValue.localeCompare(aValue);
      }

      return order === 'asc'
        ? aValue < bValue ? -1 : 1
        : bValue < aValue ? -1 : 1;
    });
  }, [order, orderBy]);

  const sortingProps = useMemo(() => ({
    order,
    orderBy,
    onRequestSort: handleRequestSort,
  }), [order, orderBy, handleRequestSort]);

  return {
    order,
    orderBy,
    handleRequestSort,
    sortData,
    sortingProps,
  };
};
</file>

<file path="frontend/src/hooks/useTheme.ts">
import { useCallback } from 'react';
import { useAppDispatch } from './useAppDispatch';
import { useAppSelector } from './useAppSelector';
import { RootState } from '../store';
import { setTheme as setThemeAction } from '../store/slices/themeSlice';

type ThemeMode = 'light' | 'dark';

export const useTheme = () => {
  const dispatch = useAppDispatch();
  const theme = useAppSelector((state: RootState) => state.theme.mode);

  const toggleTheme = useCallback(() => {
    const newTheme = theme === 'light' ? 'dark' : 'light';
    localStorage.setItem('theme', newTheme);
    dispatch(setThemeAction(newTheme));
  }, [dispatch, theme]);

  const setTheme = useCallback((newTheme: ThemeMode) => {
    localStorage.setItem('theme', newTheme);
    dispatch(setThemeAction(newTheme));
  }, [dispatch]);

  return {
    theme,
    toggleTheme,
    setTheme,
  };
};
</file>

<file path="frontend/src/hooks/useUsers.ts">
import { useCallback } from 'react';
import { useAppDispatch } from './useAppDispatch';
import { useAppSelector } from './useAppSelector';
import { useApi } from './useApi';
import { RootState } from '../store';
import {
  setUsers,
  addUser,
  updateUser,
  deleteUser,
  setLoading,
  setError,
} from '../store/slices/userSlice';
import axios from 'axios';

interface User {
  id: string;
  name: string;
  email: string;
  role: 'admin' | 'doctor' | 'patient';
  status: 'active' | 'inactive';
}

interface ApiResponse<T> {
  status: number;
  data: T;
}

interface UserState {
  users: User[];
  loading: boolean;
  error: string | null;
}

export const useUsers = () => {
  const dispatch = useAppDispatch();
  const { execute: usersApi } = useApi<User[]>();
  const users = useAppSelector((state: RootState) => (state.users as UserState).users);
  const loading = useAppSelector((state: RootState) => (state.users as UserState).loading);
  const error = useAppSelector((state: RootState) => (state.users as UserState).error);

  const fetchUsers = useCallback(async () => {
    try {
      const token = localStorage.getItem('token');
      const response = await axios.get<ApiResponse<User[]>>('/api/users', {
        headers: {
          Authorization: `Bearer ${token}`
        }
      });
      if (response.data.status === 200) {
        dispatch(setUsers(response.data.data));
      }
    } catch (error) {
      dispatch(setError('Failed to fetch users'));
    }
  }, [dispatch]);

  const createUser = useCallback(async (userData: Omit<User, 'id'>) => {
    try {
      const token = localStorage.getItem('token');
      const response = await axios.post<ApiResponse<User>>('/api/users', userData, {
        headers: {
          Authorization: `Bearer ${token}`
        }
      });
      if (response.data.status === 201) {
        dispatch(addUser(response.data.data));
      }
    } catch (error) {
      dispatch(setError('Failed to create user'));
    }
  }, [dispatch]);

  const updateUserById = useCallback(async (id: string, userData: Partial<User>) => {
    try {
      const token = localStorage.getItem('token');
      const response = await axios.put<ApiResponse<User>>(`/api/users/${id}`, userData, {
        headers: {
          Authorization: `Bearer ${token}`
        }
      });
      if (response.data.status === 200) {
        dispatch(updateUser(response.data.data));
      }
    } catch (error) {
      dispatch(setError('Failed to update user'));
    }
  }, [dispatch]);

  const deleteUserById = useCallback(async (id: string) => {
    try {
      dispatch(setLoading(true));
      await usersApi({
        method: 'DELETE',
        url: `/api/users/${id}`,
      });
      dispatch(deleteUser(id));
    } catch (error) {
      dispatch(setError('Failed to delete user'));
    } finally {
      dispatch(setLoading(false));
    }
  }, [dispatch, usersApi]);

  return {
    users,
    loading,
    error,
    fetchUsers,
    createUser,
    updateUser: updateUserById,
    deleteUser: deleteUserById,
  };
};
</file>

<file path="frontend/src/pages/Appointments.tsx">
import React, { useEffect, useState } from 'react';
import { useFormik } from 'formik';
import * as Yup from 'yup';
import {
  Box,
  Container,
  Typography,
  TextField,
  Button,
  Grid,
  Paper,
  Select,
  MenuItem,
  InputLabel,
  FormControl,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
} from '@mui/material';
import axios from 'axios';
import { Appointment } from '../types/appointment';
import { Patient, Doctor } from '../types/user';

// Adjusting form values to match backend snake_case expectations
interface AppointmentFormValues {
  patient_id: string;
  doctor_id: string;
  date: string;
  time: string;
  notes?: string;
  service_type: string;
  duration: number;
}

const validationSchema = Yup.object({
  patient_id: Yup.string().required('Patient is required'),
  doctor_id: Yup.string().required('Doctor is required'),
  date: Yup.date().required('Date is required'),
  time: Yup.string().required('Time is required'),
  notes: Yup.string(),
  service_type: Yup.string().required('Service type is required'),
  duration: Yup.number()
    .min(15, 'Duration must be at least 15 minutes')
    .max(240, 'Duration cannot exceed 240 minutes')
    .required('Duration is required'),
});

const API_URL = process.env.REACT_APP_APPOINTMENT_API_URL || 'http://localhost:8000/api/appointments/';
const PATIENT_API_URL = process.env.REACT_APP_PATIENT_API_URL || 'http://localhost:8000/api/patients/';
const DOCTOR_API_URL = process.env.REACT_APP_DOCTOR_API_URL || 'http://localhost:8000/api/doctors/';

const Appointments: React.FC = () => {
  const [patients, setPatients] = useState<Patient[]>([]);
  const [doctors, setDoctors] = useState<Doctor[]>([]);
  const [appointments, setAppointments] = useState<Appointment[]>([]);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const token = localStorage.getItem('token');
        const headers = { Authorization: `Bearer ${token}` };

        console.log('Starting to fetch data...');

        // Fetch patients
        try {
          console.log('Fetching patients from:', PATIENT_API_URL);
          const patientsResponse = await axios.get(PATIENT_API_URL, { headers });
          console.log('Patients Response Status:', patientsResponse.status);
          console.log('Patients Response Data:', JSON.stringify(patientsResponse.data, null, 2));
          setPatients(patientsResponse.data);
        } catch (error) {
          console.error('Error fetching patients:', error);
          if (axios.isAxiosError(error)) {
            console.error('Error details:', {
              status: error.response?.status,
              statusText: error.response?.statusText,
              data: error.response?.data
            });
          }
        }

        // Fetch doctors
        try {
          console.log('Fetching doctors from:', DOCTOR_API_URL);
          const doctorsResponse = await axios.get(DOCTOR_API_URL, { headers });
          console.log('Doctors Response Status:', doctorsResponse.status);
          console.log('Doctors Response Data:', JSON.stringify(doctorsResponse.data, null, 2));
          setDoctors(doctorsResponse.data);
        } catch (error) {
          console.error('Error fetching doctors:', error);
          if (axios.isAxiosError(error)) {
            console.error('Error details:', {
              status: error.response?.status,
              statusText: error.response?.statusText,
              data: error.response?.data
            });
          }
        }

        // Fetch appointments
        try {
          console.log('Fetching appointments from:', API_URL);
          const appointmentsResponse = await axios.get(API_URL, { headers });
          console.log('Appointments Response Status:', appointmentsResponse.status);
          console.log('Appointments Response Data:', JSON.stringify(appointmentsResponse.data, null, 2));
          setAppointments(appointmentsResponse.data);
        } catch (error) {
          console.error('Error fetching appointments:', error);
          if (axios.isAxiosError(error)) {
            console.error('Error details:', {
              status: error.response?.status,
              statusText: error.response?.statusText,
              data: error.response?.data
            });
          }
        }

      } catch (error) {
        console.error('Error in fetchData:', error);
      }
    };

    fetchData();
  }, []);

  const formik = useFormik<AppointmentFormValues>({
    initialValues: {
      patient_id: '',
      doctor_id: '',
      date: '',
      time: '',
      notes: '',
      service_type: 'general',
      duration: 30,
    },
    validationSchema,
    onSubmit: async (values: AppointmentFormValues) => {
      try {
        const token = localStorage.getItem('token');
        console.log('Creating appointment with values:', values);
        
        const appointmentData = {
          patient_id: values.patient_id,
          doctor_id: values.doctor_id,
          date: values.date,
          time: values.time,
          notes: values.notes || '',
          status: 'pending',
          service_type: values.service_type,
          duration: values.duration
        };

        console.log('Sending appointment data:', appointmentData);

        const response = await axios.post(
          API_URL,
          appointmentData,
          {
            headers: {
              'Authorization': `Bearer ${token}`,
              'Content-Type': 'application/json',
            },
          }
        );

        console.log('Appointment created successfully:', response.data);
        
        // Refresh appointments list
        try {
          const appointmentsResponse = await axios.get(API_URL, {
            headers: {
              'Authorization': `Bearer ${token}`,
              'Content-Type': 'application/json',
            },
          });
          console.log('Refreshed appointments:', appointmentsResponse.data);
          setAppointments(appointmentsResponse.data);
        } catch (error) {
          console.error('Error refreshing appointments:', error);
        }

        formik.resetForm();
      } catch (error: any) {
        console.error('Error creating appointment:', error);
        if (error.response) {
          console.error('Error response data:', error.response.data);
          console.error('Error response status:', error.response.status);
          console.error('Error response headers:', error.response.headers);
        } else if (error.request) {
          console.error('Error request:', error.request);
        } else {
          console.error('Error message:', error.message);
        }
      }
    },
  });

  return (
    <Container maxWidth="md">
      <Box sx={{ mt: 4, mb: 4 }}>
        <Typography variant="h4" component="h1" gutterBottom>
          Schedule Appointment
        </Typography>
        <Paper sx={{ p: 3 }}>
          <form onSubmit={formik.handleSubmit}>
            <Grid container spacing={3}>
              <Grid item xs={12} sm={6}>
                <FormControl fullWidth error={formik.touched.patient_id && Boolean(formik.errors.patient_id)}>
                  <InputLabel id="patient_id-label">Patient</InputLabel>
                  <Select
                    labelId="patient_id-label"
                    id="patient_id"
                    name="patient_id"
                    value={formik.values.patient_id}
                    onChange={formik.handleChange}
                    label="Patient"
                  >
                    {patients.map((patient) => (
                      <MenuItem key={patient.user_id} value={patient.user_id}>
                        {patient.name}
                      </MenuItem>
                    ))}
                  </Select>
                  {formik.touched.patient_id && formik.errors.patient_id && (
                    <Typography color="error" variant="caption">
                      {formik.errors.patient_id}
                    </Typography>
                  )}
                </FormControl>
              </Grid>
              <Grid item xs={12} sm={6}>
                <FormControl fullWidth error={formik.touched.doctor_id && Boolean(formik.errors.doctor_id)}>
                  <InputLabel id="doctor_id-label">Doctor</InputLabel>
                  <Select
                    labelId="doctor_id-label"
                    id="doctor_id"
                    name="doctor_id"
                    value={formik.values.doctor_id}
                    onChange={formik.handleChange}
                    label="Doctor"
                  >
                    {doctors.map((doctor) => (
                      <MenuItem key={doctor.user_id} value={doctor.user_id}>
                        {doctor.name}
                      </MenuItem>
                    ))}
                  </Select>
                  {formik.touched.doctor_id && formik.errors.doctor_id && (
                    <Typography color="error" variant="caption">
                      {formik.errors.doctor_id}
                    </Typography>
                  )}
                </FormControl>
              </Grid>
              <Grid item xs={12} sm={6}>
                <TextField
                  fullWidth
                  id="date"
                  name="date"
                  label="Date"
                  type="date"
                  value={formik.values.date}
                  onChange={formik.handleChange}
                  error={formik.touched.date && Boolean(formik.errors.date)}
                  helperText={formik.touched.date && formik.errors.date}
                  InputLabelProps={{ shrink: true }}
                />
              </Grid>
              <Grid item xs={12} sm={6}>
                <TextField
                  fullWidth
                  id="time"
                  name="time"
                  label="Time"
                  type="time"
                  value={formik.values.time}
                  onChange={formik.handleChange}
                  error={formik.touched.time && Boolean(formik.errors.time)}
                  helperText={formik.touched.time && formik.errors.time}
                  InputLabelProps={{ shrink: true }}
                />
              </Grid>
              <Grid item xs={12}>
                <TextField
                  fullWidth
                  id="notes"
                  name="notes"
                  label="Notes"
                  multiline
                  rows={4}
                  value={formik.values.notes}
                  onChange={formik.handleChange}
                  error={formik.touched.notes && Boolean(formik.errors.notes)}
                  helperText={formik.touched.notes && formik.errors.notes}
                />
              </Grid>
              <Grid item xs={12} sm={6}>
                <TextField
                  fullWidth
                  id="service_type"
                  name="service_type"
                  label="Service Type"
                  value={formik.values.service_type}
                  onChange={formik.handleChange}
                  error={formik.touched.service_type && Boolean(formik.errors.service_type)}
                  helperText={formik.touched.service_type && formik.errors.service_type}
                />
              </Grid>
              <Grid item xs={12} sm={6}>
                <TextField
                  fullWidth
                  id="duration"
                  name="duration"
                  label="Duration (minutes)"
                  type="number"
                  value={formik.values.duration}
                  onChange={formik.handleChange}
                  error={formik.touched.duration && Boolean(formik.errors.duration)}
                  helperText={formik.touched.duration && formik.errors.duration}
                  InputProps={{
                    inputProps: { min: 15, max: 240 }
                  }}
                />
              </Grid>
              <Grid item xs={12}>
                <Button
                  color="primary"
                  variant="contained"
                  fullWidth
                  type="submit"
                >
                  Schedule Appointment
                </Button>
              </Grid>
            </Grid>
          </form>
        </Paper>
      </Box>

      <Box sx={{ mt: 4, mb: 4 }}>
        <Typography variant="h5" component="h2" gutterBottom>
          Appointment History
        </Typography>
        <Paper sx={{ p: 3 }}>
          <TableContainer>
            <Table>
              <TableHead>
                <TableRow>
                  <TableCell>Patient Name</TableCell>
                  <TableCell>Patient Info</TableCell>
                  <TableCell>Doctor Name</TableCell>
                  <TableCell>Doctor Info</TableCell>
                  <TableCell>Date</TableCell>
                  <TableCell>Time</TableCell>
                  <TableCell>Service</TableCell>
                  <TableCell>Duration</TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {Array.isArray(appointments) ? (
                  appointments.map((appointment) => {
                    const patient = patients.find(p => p.user_id === appointment.patient_id);
                    const doctor = doctors.find(d => d.user_id === appointment.doctor_id);
                    
                    // Log the found patient and doctor data
                    console.log('Appointment:', appointment.id);
                    console.log('Found Patient:', patient ? {
                      user_id: patient.user_id,
                      name: patient.name,
                      age: patient.age,
                      phone: patient.phone,
                      patient_type: patient.patient_type
                    } : 'Not found');
                    console.log('Found Doctor:', doctor ? {
                      user_id: doctor.user_id,
                      name: doctor.name,
                      specialization: doctor.specialization,
                      license_number: doctor.license_number,
                      years_of_experience: doctor.years_of_experience
                    } : 'Not found');

                    return (
                      <TableRow key={appointment.id}>
                        <TableCell>{patient?.name || 'Unknown Patient'}</TableCell>
                        <TableCell>
                          {patient ? (
                            <>
                              Age: {patient.age}<br />
                              {patient.patient_type && `Type: ${patient.patient_type}`}<br />
                              Phone: {patient.phone}
                            </>
                          ) : 'N/A'}
                        </TableCell>
                        <TableCell>{doctor?.name || 'Unknown Doctor'}</TableCell>
                        <TableCell>
                          {doctor ? (
                            <>
                              {doctor.specialization && `Specialization: ${doctor.specialization}`}<br />
                              {doctor.license_number && `License: ${doctor.license_number}`}<br />
                              {doctor.years_of_experience && `Experience: ${doctor.years_of_experience} years`}
                            </>
                          ) : 'N/A'}
                        </TableCell>
                        <TableCell>{appointment.date}</TableCell>
                        <TableCell>{appointment.time}</TableCell>
                        <TableCell>{appointment.service_type}</TableCell>
                        <TableCell>{appointment.duration} min</TableCell>
                      </TableRow>
                    );
                  })
                ) : (
                  <TableRow>
                    <TableCell colSpan={8}>No appointments found or data error.</TableCell>
                  </TableRow>
                )}
              </TableBody>
            </Table>
          </TableContainer>
        </Paper>
      </Box>
    </Container>
  );
};

export default Appointments;
</file>

<file path="frontend/src/pages/Chatbot.tsx">
import React from 'react';
import {
  Box,
  Container,
  Paper,
  Typography,
  TextField,
  Button,
  List,
  ListItem,
  ListItemText,
  Divider,
} from '@mui/material';
import axios from 'axios';

export interface Message {
  text: string;
  sender: 'user' | 'bot';
}

const API_URL = process.env.REACT_APP_CHATBOT_API_URL || 'http://localhost:8002/api/chatbot';

const Chatbot: React.FC = () => {
  const [messages, setMessages] = React.useState<Message[]>([]);
  const [input, setInput] = React.useState('');
  const [loading, setLoading] = React.useState(false);

  const handleSend = async () => {
    if (!input.trim()) return;

    const userMessage: Message = { text: input, sender: 'user' };
    setMessages((prev) => [...prev, userMessage]);
    setInput('');
    setLoading(true);

    try {
      const response = await axios.post(`${API_URL}/chat/`, {
        message: input,
        user_id: 'anonymous'
      }, {
        headers: {
          'Content-Type': 'application/json',
        },
      });

      const botMessage: Message = {
        text: response.data.response,
        sender: 'bot',
      };
      setMessages((prev) => [...prev, botMessage]);
    } catch (error) {
      const botMessage: Message = {
        text: 'Sorry, I encountered an error. Please try again.',
        sender: 'bot',
      };
      setMessages((prev) => [...prev, botMessage]);
    } finally {
      setLoading(false);
    }
  };

  return (
    <Container maxWidth="sm">
      <Box sx={{ mt: 4 }}>
        <Paper elevation={3} sx={{ p: 4 }}>
          <Typography variant="h4" component="h1" gutterBottom align="center">
            Healthcare Assistant
          </Typography>
          <Box
            sx={{
              height: '400px',
              overflowY: 'auto',
              mb: 2,
              border: '1px solid #ccc',
              borderRadius: 1,
              p: 2,
            }}
          >
            <List>
              {messages.map((message, index) => (
                <React.Fragment key={index}>
                  <ListItem
                    sx={{
                      justifyContent:
                        message.sender === 'user' ? 'flex-end' : 'flex-start',
                    }}
                  >
                    <Paper
                      sx={{
                        p: 1,
                        backgroundColor:
                          message.sender === 'user' ? '#e3f2fd' : '#f5f5f5',
                        maxWidth: '70%',
                      }}
                    >
                      <ListItemText
                        primary={message.text}
                        secondary={message.sender === 'user' ? 'You' : 'Bot'}
                      />
                    </Paper>
                  </ListItem>
                  {index < messages.length - 1 && <Divider />}
                </React.Fragment>
              ))}
            </List>
          </Box>
          <Box sx={{ display: 'flex', gap: 1 }}>
            <TextField
              fullWidth
              value={input}
              onChange={(e) => setInput(e.target.value)}
              onKeyPress={(e) => e.key === 'Enter' && handleSend()}
              placeholder="Type your message..."
              disabled={loading}
            />
            <Button
              variant="contained"
              onClick={handleSend}
              disabled={loading || !input.trim()}
            >
              Send
            </Button>
          </Box>
        </Paper>
      </Box>
    </Container>
  );
};

export default Chatbot;
</file>

<file path="frontend/src/pages/ChatbotPage.tsx">
import React from 'react';
import Chatbot from '../components/Chatbot';

const ChatbotPage: React.FC = () => <Chatbot />;
 
export default ChatbotPage;
</file>

<file path="frontend/src/pages/DoctorManagement.tsx">
import React, { useEffect, useState } from 'react';
import {
    Box,
    Button,
    Dialog,
    DialogTitle,
    DialogContent,
    IconButton,
    Paper,
    Table,
    TableBody,
    TableCell,
    TableContainer,
    TableHead,
    TableRow,
    Typography,
    Avatar,
    Skeleton,
} from '@mui/material';
import { Add as AddIcon, Edit as EditIcon, Delete as DeleteIcon } from '@mui/icons-material';
import { Doctor, CreateDoctorDto } from '../types/user';
import { doctorService } from '../services/userService';
import UserForm from '../components/UserForm';
import LocalHospitalIcon from '@mui/icons-material/LocalHospital';

export const DoctorManagement: React.FC = () => {
    const [doctors, setDoctors] = useState<Doctor[]>([]);
    const [openDialog, setOpenDialog] = useState(false);
    const [selectedDoctor, setSelectedDoctor] = useState<Doctor | null>(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);

    const fetchDoctors = async () => {
        try {
            setLoading(true);
            const data = await doctorService.getAll();
            console.log('Doctors Data:', JSON.stringify(data, null, 2));
            setDoctors(data);
            setError(null);
        } catch (err) {
            setError('Failed to fetch doctors');
            console.error('Error fetching doctors:', err);
        } finally {
            setLoading(false);
        }
    };

    useEffect(() => {
        fetchDoctors();
    }, []);

    const handleCreate = async (data: CreateDoctorDto) => {
        try {
            await doctorService.create(data);
            setOpenDialog(false);
            fetchDoctors();
        } catch (err) {
            setError('Failed to create doctor');
            console.error('Error creating doctor:', err);
        }
    };

    const handleUpdate = async (data: CreateDoctorDto) => {
        if (!selectedDoctor) return;
        try {
            await doctorService.update(selectedDoctor.user_id, data);
            setOpenDialog(false);
            setSelectedDoctor(null);
            fetchDoctors();
        } catch (err) {
            setError('Failed to update doctor');
            console.error('Error updating doctor:', err);
        }
    };

    const handleDelete = async (id: string) => {
        if (!window.confirm('Are you sure you want to delete this doctor?')) return;
        try {
            await doctorService.delete(id);
            fetchDoctors();
        } catch (err) {
            setError('Failed to delete doctor');
            console.error('Error deleting doctor:', err);
        }
    };

    const handleEdit = (doctor: Doctor) => {
        const doctorData: CreateDoctorDto = {
            name: doctor.name || '',
            specialization: doctor.specialization,
            license_number: doctor.license_number,
            years_of_experience: doctor.years_of_experience,
            education: doctor.education,
            certifications: doctor.certifications || undefined,
            languages: doctor.languages
        };
        setSelectedDoctor(doctor);
        setOpenDialog(true);
    };

    const handleCloseDialog = () => {
        setOpenDialog(false);
        setSelectedDoctor(null);
    };

    if (loading) {
        return (
            <Box sx={{ p: 3 }}>
                <Skeleton variant="rectangular" width="100%" height={60} sx={{ mb: 2, borderRadius: 3 }} />
                <Skeleton variant="rectangular" width="100%" height={400} sx={{ borderRadius: 3 }} />
            </Box>
        );
    }

    if (error) {
        return <Typography color="error">{error}</Typography>;
    }

    return (
        <Box sx={{ p: { xs: 1, sm: 3 } }}>
            <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 3 }}>
                <Typography variant="h4" fontWeight={700} color="primary.main">Doctor Management</Typography>
                <Button
                    variant="contained"
                    size="large"
                    startIcon={<AddIcon />}
                    onClick={() => setOpenDialog(true)}
                    sx={{ borderRadius: 3, fontWeight: 600 }}
                >
                    Add Doctor
                </Button>
            </Box>

            <TableContainer component={Paper} sx={{ borderRadius: 2, boxShadow: 4, p: 2 }}>
                <Table>
                    <TableHead>
                        <TableRow sx={{ background: 'linear-gradient(90deg, #e3f2fd 0%, #fce4ec 100%)' }}>
                            <TableCell></TableCell>
                            <TableCell>Name</TableCell>
                            <TableCell>Specialization</TableCell>
                            <TableCell>License</TableCell>
                            <TableCell>Experience</TableCell>
                            <TableCell>Education</TableCell>
                            <TableCell>Languages</TableCell>
                            <TableCell>Actions</TableCell>
                        </TableRow>
                    </TableHead>
                    <TableBody>
                        {doctors.map((doctor) => (
                            <TableRow key={doctor.id} hover sx={{ transition: 'background 0.2s', '&:hover': { background: 'primary.light', cursor: 'pointer' } }}>
                                <TableCell>
                                    <Avatar sx={{ bgcolor: 'secondary.main' }}>
                                        <LocalHospitalIcon />
                                    </Avatar>
                                </TableCell>
                                <TableCell>{doctor.name || 'N/A'}</TableCell>
                                <TableCell>{doctor.specialization}</TableCell>
                                <TableCell>{doctor.license_number}</TableCell>
                                <TableCell>{doctor.years_of_experience} years</TableCell>
                                <TableCell>{doctor.education}</TableCell>
                                <TableCell>{doctor.languages}</TableCell>
                                <TableCell>
                                    <IconButton
                                        color="primary"
                                        onClick={() => handleEdit(doctor)}
                                    >
                                        <EditIcon />
                                    </IconButton>
                                    <IconButton
                                        color="error"
                                        onClick={() => handleDelete(doctor.id)}
                                    >
                                        <DeleteIcon />
                                    </IconButton>
                                </TableCell>
                            </TableRow>
                        ))}
                    </TableBody>
                </Table>
            </TableContainer>

            <Dialog open={openDialog} onClose={handleCloseDialog} maxWidth="md" fullWidth PaperProps={{ sx: { borderRadius: 4 } }}>
                <DialogTitle sx={{ fontWeight: 700, color: 'primary.main' }}>
                    {selectedDoctor ? 'Edit Doctor' : 'Add New Doctor'}
                </DialogTitle>
                <DialogContent sx={{ p: 2, borderRadius: 2 }}>
                    <UserForm
                        type="doctor"
                        initialData={selectedDoctor ? {
                            name: selectedDoctor.name || '',
                            specialization: selectedDoctor.specialization,
                            license_number: selectedDoctor.license_number,
                            years_of_experience: selectedDoctor.years_of_experience,
                            education: selectedDoctor.education,
                            certifications: selectedDoctor.certifications || undefined,
                            languages: selectedDoctor.languages
                        } : undefined}
                        onSubmit={selectedDoctor ? handleUpdate : handleCreate}
                        onCancel={handleCloseDialog}
                    />
                </DialogContent>
            </Dialog>
        </Box>
    );
};
</file>

<file path="frontend/src/pages/Home.tsx">
import React from 'react';
import { useNavigate } from 'react-router-dom';
import {
  Box,
  Container,
  Card,
  CardContent,
  Typography,
  Button,
  Grid,
  Avatar
} from '@mui/material';
import CalendarMonthIcon from '@mui/icons-material/CalendarMonth';
import AssignmentIcon from '@mui/icons-material/Assignment';
import QueryStatsIcon from '@mui/icons-material/QueryStats';
import ChatIcon from '@mui/icons-material/Chat';

const features = [
  {
    title: 'Appointments',
    desc: 'Manage your appointments and schedule new ones.',
    icon: <CalendarMonthIcon fontSize="large" color="primary" />,
    btn: 'Book Now',
    to: '/appointments',
  },
  {
    title: 'Medical Records',
    desc: 'Access and update your medical records.',
    icon: <AssignmentIcon fontSize="large" color="secondary" />,
    btn: 'View Records',
    to: '/records',
    disabled: true,
  },
  {
    title: 'Health Predictions',
    desc: 'Get AI-powered health predictions and insights.',
    icon: <QueryStatsIcon fontSize="large" color="success" />,
    btn: 'Check Symptoms',
    to: '/prediction',
  },
  {
    title: 'Healthcare Assistant',
    desc: 'Chat with our AI assistant for medical advice and information.',
    icon: <ChatIcon fontSize="large" color="info" />,
    btn: 'Start Chat',
    to: '/chatbot',
  },
];

const Home: React.FC = () => {
  const navigate = useNavigate();

  return (
    <Container maxWidth="lg">
      <Box sx={{ mt: 6, mb: 4, textAlign: 'center' }}>
        <Avatar
          src="https://cdn-icons-png.flaticon.com/512/3774/3774299.png"
          sx={{ width: 96, height: 96, mx: 'auto', mb: 2, boxShadow: 3 }}
        />
        <Typography variant="h2" fontWeight={700} color="primary.main" gutterBottom>
          Welcome to Healthcare Portal
        </Typography>
        <Typography variant="h5" color="text.secondary" mb={4}>
          Smart, modern, and friendly healthcare management for everyone
        </Typography>
        <Grid container spacing={4} justifyContent="center">
          {features.map((f, idx) => (
            <Grid item xs={12} sm={6} md={3} key={f.title}>
              <Card
                sx={{
                  p: 2,
                  borderRadius: 2,
                  boxShadow: 4,
                  transition: 'transform 0.2s, box-shadow 0.2s',
                  '&:hover': {
                    transform: 'translateY(-8px) scale(1.03)',
                    boxShadow: 8,
                  },
                  opacity: f.disabled ? 0.5 : 1,
                  cursor: f.disabled ? 'not-allowed' : 'pointer',
                }}
                onClick={() => !f.disabled && navigate(f.to)}
              >
                <Box sx={{ display: 'flex', justifyContent: 'center', mb: 2 }}>
                  {f.icon}
                </Box>
                <CardContent sx={{ p: 2, borderRadius: 2 }}>
                  <Typography variant="h5" fontWeight={600} gutterBottom>
                    {f.title}
                  </Typography>
                  <Typography variant="body1" color="text.secondary" mb={2}>
                    {f.desc}
                  </Typography>
                  <Button
                    variant="contained"
                    color="primary"
                    size="large"
                    fullWidth
                    disabled={f.disabled}
                    sx={{ fontWeight: 600, borderRadius: 2 }}
                  >
                    {f.btn}
                  </Button>
                </CardContent>
              </Card>
            </Grid>
          ))}
        </Grid>
      </Box>
    </Container>
  );
};

export default Home;
</file>

<file path="frontend/src/pages/Login.tsx">
import React from 'react';
import { useNavigate } from 'react-router-dom';
import { useFormik } from 'formik';
import * as Yup from 'yup';
import {
  Box,
  Container,
  Paper,
  Typography,
  TextField,
  Button,
  Alert,
} from '@mui/material';
import axios from 'axios';

const validationSchema = Yup.object({
  email: Yup.string().email('Invalid email address').required('Required'),
  password: Yup.string().required('Required'),
});

const Login: React.FC = () => {
  const navigate = useNavigate();
  const [error, setError] = React.useState<string | null>(null);

  const formik = useFormik({
    initialValues: {
      email: '',
      password: '',
    },
    validationSchema,
    onSubmit: async (values) => {
      try {
        const response = await axios.post('http://localhost:8001/api/auth/login', values);
        if (response.data.token) {
          localStorage.setItem('token', response.data.token);
          navigate('/');
        }
      } catch (err: any) {
        setError(err.response?.data?.message || 'Login failed');
      }
    },
  });

  return (
    <Container maxWidth="sm" sx={{
      minHeight: '100vh',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      background: 'linear-gradient(135deg, #e3f2fd 0%, #fce4ec 100%)',
    }}>
      <Box sx={{ width: '100%' }}>
        <Paper elevation={6} sx={{ p: 5, borderRadius: 5, boxShadow: 8, mt: 8 }}>
          <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center', mb: 2 }}>
            <img src="https://cdn-icons-png.flaticon.com/512/3774/3774299.png" alt="login" width={72} height={72} style={{ marginBottom: 8 }} />
            <Typography variant="h4" component="h1" fontWeight={700} gutterBottom align="center" color="primary.main">
              Login
            </Typography>
          </Box>
          {error && (
            <Alert severity="error" sx={{ mb: 2 }}>
              {error}
            </Alert>
          )}
          <form onSubmit={formik.handleSubmit}>
            <TextField
              fullWidth
              id="email"
              name="email"
              label="Email"
              value={formik.values.email}
              onChange={formik.handleChange}
              error={formik.touched.email && Boolean(formik.errors.email)}
              helperText={formik.touched.email && formik.errors.email}
              margin="normal"
              InputProps={{ sx: { borderRadius: 3 } }}
            />
            <TextField
              fullWidth
              id="password"
              name="password"
              label="Password"
              type="password"
              value={formik.values.password}
              onChange={formik.handleChange}
              error={formik.touched.password && Boolean(formik.errors.password)}
              helperText={formik.touched.password && formik.errors.password}
              margin="normal"
              InputProps={{ sx: { borderRadius: 3 } }}
            />
            <Button
              type="submit"
              fullWidth
              variant="contained"
              color="primary"
              size="large"
              sx={{ mt: 3, borderRadius: 3, fontWeight: 600, py: 1.5, fontSize: 18 }}
            >
              Login
            </Button>
          </form>
        </Paper>
      </Box>
    </Container>
  );
};

export default Login;
</file>

<file path="frontend/src/pages/PatientManagement.tsx">
import React, { useEffect, useState } from 'react';
import {
    Box,
    Button,
    Dialog,
    DialogTitle,
    DialogContent,
    IconButton,
    Paper,
    Table,
    TableBody,
    TableCell,
    TableContainer,
    TableHead,
    TableRow,
    Typography,
    Avatar,
    Skeleton,
} from '@mui/material';
import { Add as AddIcon, Edit as EditIcon, Delete as DeleteIcon } from '@mui/icons-material';
import { Patient, CreatePatientDto } from '../types/user';
import { patientService } from '../services/userService';
import UserForm from '../components/UserForm';
import PersonIcon from '@mui/icons-material/Person';

export const PatientManagement: React.FC = () => {
    const [patients, setPatients] = useState<Patient[]>([]);
    const [openDialog, setOpenDialog] = useState(false);
    const [selectedPatient, setSelectedPatient] = useState<Patient | null>(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);

    const fetchPatients = async () => {
        try {
            setLoading(true);
            const data = await patientService.getAll();
            console.log('Patients Data:', JSON.stringify(data, null, 2));
            setPatients(data);
            setError(null);
        } catch (err) {
            setError('Failed to fetch patients');
            console.error('Error fetching patients:', err);
        } finally {
            setLoading(false);
        }
    };

    useEffect(() => {
        fetchPatients();
    }, []);

    const handleCreate = async (data: CreatePatientDto) => {
        try {
            await patientService.create(data);
            setOpenDialog(false);
            fetchPatients();
        } catch (err) {
            setError('Failed to create patient');
            console.error('Error creating patient:', err);
        }
    };

    const handleUpdate = async (data: CreatePatientDto) => {
        if (!selectedPatient) return;
        try {
            await patientService.update(selectedPatient.user_id, data);
            setOpenDialog(false);
            setSelectedPatient(null);
            fetchPatients();
        } catch (err) {
            setError('Failed to update patient');
            console.error('Error updating patient:', err);
        }
    };

    const handleDelete = async (id: string) => {
        if (!window.confirm('Are you sure you want to delete this patient?')) return;
        try {
            await patientService.delete(id);
            fetchPatients();
        } catch (err) {
            setError('Failed to delete patient');
            console.error('Error deleting patient:', err);
        }
    };

    const handleEdit = (patient: Patient) => {
        setSelectedPatient(patient);
        setOpenDialog(true);
    };

    const handleCloseDialog = () => {
        setOpenDialog(false);
        setSelectedPatient(null);
    };

    if (loading) {
        return (
            <Box sx={{ p: 3 }}>
                <Skeleton variant="rectangular" width="100%" height={60} sx={{ mb: 2, borderRadius: 3 }} />
                <Skeleton variant="rectangular" width="100%" height={400} sx={{ borderRadius: 3 }} />
            </Box>
        );
    }

    if (error) {
        return <Typography color="error">{error}</Typography>;
    }

    return (
        <Box sx={{ p: { xs: 1, sm: 3 } }}>
            <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 3 }}>
                <Typography variant="h4" fontWeight={700} color="primary.main">Patient Management</Typography>
                <Button
                    variant="contained"
                    size="large"
                    startIcon={<AddIcon />}
                    onClick={() => setOpenDialog(true)}
                    sx={{ borderRadius: 3, fontWeight: 600 }}
                >
                    Add Patient
                </Button>
            </Box>

            <TableContainer component={Paper} sx={{ borderRadius: 2, boxShadow: 4, p: 2 }}>
                <Table>
                    <TableHead>
                        <TableRow sx={{ background: 'linear-gradient(90deg, #e3f2fd 0%, #fce4ec 100%)' }}>
                            <TableCell></TableCell>
                            <TableCell>Name</TableCell>
                            <TableCell>Age</TableCell>
                            <TableCell>Gender</TableCell>
                            <TableCell>Phone</TableCell>
                            <TableCell>Address</TableCell>
                            <TableCell>Medical History</TableCell>
                            <TableCell>Patient Type</TableCell>
                            <TableCell>Preferred Contact</TableCell>
                            <TableCell>Timezone</TableCell>
                            <TableCell>Actions</TableCell>
                        </TableRow>
                    </TableHead>
                    <TableBody>
                        {patients.map((patient) => (
                            <TableRow key={patient.user_id} hover sx={{ transition: 'background 0.2s', '&:hover': { background: 'primary.light', cursor: 'pointer' } }}>
                                <TableCell>
                                    <Avatar sx={{ bgcolor: 'primary.main' }}>
                                        <PersonIcon />
                                    </Avatar>
                                </TableCell>
                                <TableCell>{patient.name}</TableCell>
                                <TableCell>{patient.age}</TableCell>
                                <TableCell>{patient.gender}</TableCell>
                                <TableCell>{patient.phone}</TableCell>
                                <TableCell>{patient.address}</TableCell>
                                <TableCell>{patient.medical_history || '-'}</TableCell>
                                <TableCell>{patient.patient_type}</TableCell>
                                <TableCell>{patient.preferred_contact_method || '-'}</TableCell>
                                <TableCell>{patient.timezone || '-'}</TableCell>
                                <TableCell>
                                    <IconButton
                                        color="primary"
                                        onClick={() => handleEdit(patient)}
                                    >
                                        <EditIcon />
                                    </IconButton>
                                    <IconButton
                                        color="error"
                                        onClick={() => handleDelete(patient.user_id)}
                                    >
                                        <DeleteIcon />
                                    </IconButton>
                                </TableCell>
                            </TableRow>
                        ))}
                    </TableBody>
                </Table>
            </TableContainer>

            <Dialog open={openDialog} onClose={handleCloseDialog} maxWidth="md" fullWidth PaperProps={{ sx: { borderRadius: 4 } }}>
                <DialogTitle sx={{ fontWeight: 700, color: 'primary.main' }}>
                    {selectedPatient ? 'Edit Patient' : 'Add New Patient'}
                </DialogTitle>
                <DialogContent sx={{ p: 2, borderRadius: 2 }}>
                    <UserForm
                        type="patient"
                        initialData={selectedPatient ? {
                            name: selectedPatient.name,
                            age: selectedPatient.age,
                            gender: selectedPatient.gender,
                            phone: selectedPatient.phone,
                            address: selectedPatient.address,
                            medical_history: selectedPatient.medical_history || undefined,
                            patient_type: selectedPatient.patient_type,
                            preferred_contact_method: selectedPatient.preferred_contact_method || undefined,
                            timezone: selectedPatient.timezone || undefined
                        } : undefined}
                        onSubmit={selectedPatient ? handleUpdate : handleCreate}
                        onCancel={handleCloseDialog}
                    />
                </DialogContent>
            </Dialog>
        </Box>
    );
};
</file>

<file path="frontend/src/pages/Prediction.tsx">
import React from 'react';
import { useFormik } from 'formik';
import * as Yup from 'yup';
import {
  Box,
  Container,
  Paper,
  Typography,
  TextField,
  Button,
  FormControlLabel,
  Checkbox,
  Alert,
  MenuItem
} from '@mui/material';
import axios from 'axios';

const validationSchema = Yup.object({
  patient_id: Yup.string().required('Required'),
  age: Yup.number().required('Required').min(0, 'Age must be positive'),
  gender: Yup.string().required('Required'),
});

const Prediction: React.FC = () => {
  const [error, setError] = React.useState<string | null>(null);
  const [prediction, setPrediction] = React.useState<string | null>(null);
  const [symptoms, setSymptoms] = React.useState({
    fever: false,
    cough: false,
    fatigue: false,
    headache: false,
    soreThroat: false,
    runnyNose: false,
    bodyAche: false,
    nausea: false,
    vomiting: false,
    diarrhea: false,
    shortnessBreath: false,
    chestPain: false,
    rash: false,
    jointPain: false,
  });

  const formik = useFormik({
    initialValues: {
      patient_id: '',
      age: '',
      gender: '',
    },
    validationSchema,
    onSubmit: async (values) => {
      try {
        const token = localStorage.getItem('token');
        const response = await axios.post(
          'http://localhost:8007/api/predict/',
          {
            ...values,
            symptoms,
          },
          {
            headers: {
              Authorization: `Bearer ${token}`,
            },
          }
        );
        if (response.data) {
          setPrediction(response.data.predicted_disease);
        }
      } catch (err: any) {
        setError(err.response?.data?.error || 'Failed to get prediction');
      }
    },
  });

  const handleSymptomChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setSymptoms({
      ...symptoms,
      [event.target.name]: event.target.checked,
    });
  };

  return (
    <Container maxWidth="sm">
      <Box sx={{ mt: 4 }}>
        <Paper elevation={3} sx={{ p: 4 }}>
          <Typography variant="h4" component="h1" gutterBottom align="center">
            Disease Prediction
          </Typography>
          {error && (
            <Alert severity="error" sx={{ mb: 2 }}>
              {error}
            </Alert>
          )}
          {prediction && (
            <Alert severity="info" sx={{ mb: 2 }}>
              Predicted condition: {prediction}
            </Alert>
          )}
          <form onSubmit={formik.handleSubmit}>
            <TextField
              fullWidth
              id="patient_id"
              name="patient_id"
              label="Patient ID"
              value={formik.values.patient_id}
              onChange={formik.handleChange}
              error={formik.touched.patient_id && Boolean(formik.errors.patient_id)}
              helperText={formik.touched.patient_id && formik.errors.patient_id}
              margin="normal"
            />
            <TextField
              fullWidth
              id="age"
              name="age"
              label="Age"
              type="number"
              value={formik.values.age}
              onChange={formik.handleChange}
              error={formik.touched.age && Boolean(formik.errors.age)}
              helperText={formik.touched.age && formik.errors.age}
              margin="normal"
            />
            <TextField
              select
              fullWidth
              id="gender"
              name="gender"
              label="Gender"
              value={formik.values.gender}
              onChange={formik.handleChange}
              error={formik.touched.gender && Boolean(formik.errors.gender)}
              helperText={formik.touched.gender && formik.errors.gender}
              margin="normal"
            >
              <MenuItem value="male">Male</MenuItem>
              <MenuItem value="female">Female</MenuItem>
            </TextField>
            <Typography variant="h6" sx={{ mt: 2, mb: 1 }}>
              Symptoms
            </Typography>
            <Box sx={{ display: 'flex', flexDirection: 'column' }}>
              {Object.entries(symptoms).map(([key, value]) => (
                <FormControlLabel
                  key={key}
                  control={
                    <Checkbox
                      checked={value}
                      onChange={handleSymptomChange}
                      name={key}
                    />
                  }
                  label={key
                    .replace(/([A-Z])/g, ' $1')
                    .replace(/^./, (str) => str.toUpperCase())}
                />
              ))}
            </Box>
            <Button
              type="submit"
              fullWidth
              variant="contained"
              color="primary"
              sx={{ mt: 3 }}
            >
              Get Prediction
            </Button>
          </form>
        </Paper>
      </Box>
    </Container>
  );
};

export default Prediction;
</file>

<file path="frontend/src/services/authService.ts">
import axios from 'axios';
import { RegisterRequest, LoginRequest, AuthResponse } from '../types/auth';

const API_URL = process.env.REACT_APP_AUTH_API_URL || 'http://localhost:8000/api/users';

export const authService = {
    async register(data: RegisterRequest): Promise<AuthResponse> {
        const response = await axios.post(`${API_URL}/register/`, data);
        return response.data;
    },

    async login(data: LoginRequest): Promise<AuthResponse> {
        const response = await axios.post(`${API_URL}/login/`, data);
        return response.data;
    },

    async getProfile(): Promise<any> {
        const response = await axios.get(`${API_URL}/profile/`, {
            headers: {
                Authorization: `Bearer ${localStorage.getItem('access_token')}`
            }
        });
        return response.data;
    },

    async refreshToken(): Promise<AuthResponse> {
        const response = await axios.post(`${API_URL}/token/refresh/`, {
            refresh: localStorage.getItem('refresh_token')
        });
        return response.data;
    },

    logout(): void {
        localStorage.removeItem('access_token');
        localStorage.removeItem('refresh_token');
    }
};
</file>

<file path="frontend/src/store/slices/appointmentSlice.ts">
import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import { Appointment } from '../../types/appointment';

interface AppointmentState {
  appointments: Appointment[];
  loading: boolean;
  error: string | null;
}

const initialState: AppointmentState = {
  appointments: [],
  loading: false,
  error: null,
};

const appointmentSlice = createSlice({
  name: 'appointments',
  initialState,
  reducers: {
    setAppointments: (state: AppointmentState, action: PayloadAction<Appointment[]>) => {
      state.appointments = action.payload;
    },
    addAppointment: (state: AppointmentState, action: PayloadAction<Appointment>) => {
      state.appointments.push(action.payload);
    },
    updateAppointment: (state: AppointmentState, action: PayloadAction<Appointment>) => {
      const index = state.appointments.findIndex((a: Appointment) => a.id === action.payload.id);
      if (index !== -1) {
        state.appointments[index] = action.payload;
      }
    },
    deleteAppointment: (state: AppointmentState, action: PayloadAction<string>) => {
      state.appointments = state.appointments.filter((a: Appointment) => a.id !== action.payload);
    },
    setLoading: (state: AppointmentState, action: PayloadAction<boolean>) => {
      state.loading = action.payload;
    },
    setError: (state: AppointmentState, action: PayloadAction<string | null>) => {
      state.error = action.payload;
    },
  },
});

export const {
  setAppointments,
  addAppointment,
  updateAppointment,
  deleteAppointment,
  setLoading,
  setError,
} = appointmentSlice.actions;

export default appointmentSlice.reducer;
</file>

<file path="frontend/src/store/slices/doctorSlice.ts">
import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import { Doctor } from '../../types/user';

interface DoctorState {
  doctors: Doctor[];
  loading: boolean;
  error: string | null;
}

const initialState: DoctorState = {
  doctors: [],
  loading: false,
  error: null,
};

const doctorSlice = createSlice({
  name: 'doctors',
  initialState,
  reducers: {
    setDoctors: (state, action: PayloadAction<Doctor[]>) => {
      state.doctors = action.payload;
    },
    addDoctor: (state, action: PayloadAction<Doctor>) => {
      state.doctors.push(action.payload);
    },
    updateDoctor: (state, action: PayloadAction<Doctor>) => {
      const index = state.doctors.findIndex(doctor => doctor.user_id === action.payload.user_id);
      if (index !== -1) {
        state.doctors[index] = action.payload;
      }
    },
    deleteDoctor: (state, action: PayloadAction<string>) => {
      state.doctors = state.doctors.filter(doctor => doctor.user_id !== action.payload);
    },
    setLoading: (state, action: PayloadAction<boolean>) => {
      state.loading = action.payload;
    },
    setError: (state, action: PayloadAction<string | null>) => {
      state.error = action.payload;
    },
  },
});

export const {
  setDoctors,
  addDoctor,
  updateDoctor,
  deleteDoctor,
  setLoading,
  setError,
} = doctorSlice.actions;

export default doctorSlice.reducer;
</file>

<file path="frontend/src/store/slices/labSlice.ts">
import { createSlice, PayloadAction } from '@reduxjs/toolkit';

interface LabResult {
  id: string;
  patientId: string;
  testName: string;
  testDate: string;
  result: string;
  status: 'pending' | 'completed';
  notes: string;
}

interface LabState {
  results: LabResult[];
  loading: boolean;
  error: string | null;
}

const initialState: LabState = {
  results: [],
  loading: false,
  error: null,
};

const labSlice = createSlice({
  name: 'lab',
  initialState,
  reducers: {
    setResults: (state, action: PayloadAction<LabResult[]>) => {
      state.results = action.payload;
    },
    addResult: (state, action: PayloadAction<LabResult>) => {
      state.results.push(action.payload);
    },
    updateResult: (state, action: PayloadAction<LabResult>) => {
      const index = state.results.findIndex(r => r.id === action.payload.id);
      if (index !== -1) {
        state.results[index] = action.payload;
      }
    },
    deleteResult: (state, action: PayloadAction<string>) => {
      state.results = state.results.filter(r => r.id !== action.payload);
    },
    setLoading: (state, action: PayloadAction<boolean>) => {
      state.loading = action.payload;
    },
    setError: (state, action: PayloadAction<string | null>) => {
      state.error = action.payload;
    },
  },
});

export const {
  setResults,
  addResult,
  updateResult,
  deleteResult,
  setLoading,
  setError,
} = labSlice.actions;

export default labSlice.reducer;
</file>

<file path="frontend/src/store/slices/patientSlice.ts">
import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import { Patient } from '../../types/user';

interface PatientState {
  patients: Patient[];
  loading: boolean;
  error: string | null;
}

const initialState: PatientState = {
  patients: [],
  loading: false,
  error: null,
};

const patientSlice = createSlice({
  name: 'patients',
  initialState,
  reducers: {
    setPatients: (state, action: PayloadAction<Patient[]>) => {
      state.patients = action.payload;
    },
    addPatient: (state, action: PayloadAction<Patient>) => {
      state.patients.push(action.payload);
    },
    updatePatient: (state, action: PayloadAction<Patient>) => {
      const index = state.patients.findIndex(patient => patient.user_id === action.payload.user_id);
      if (index !== -1) {
        state.patients[index] = action.payload;
      }
    },
    deletePatient: (state, action: PayloadAction<string>) => {
      state.patients = state.patients.filter(patient => patient.user_id !== action.payload);
    },
    setLoading: (state, action: PayloadAction<boolean>) => {
      state.loading = action.payload;
    },
    setError: (state, action: PayloadAction<string | null>) => {
      state.error = action.payload;
    },
  },
});

export const {
  setPatients,
  addPatient,
  updatePatient,
  deletePatient,
  setLoading,
  setError,
} = patientSlice.actions;

export default patientSlice.reducer;
</file>

<file path="frontend/src/store/slices/themeSlice.ts">
import { createSlice, PayloadAction } from '@reduxjs/toolkit';

type ThemeMode = 'light' | 'dark';

interface ThemeState {
  mode: ThemeMode;
}

const initialState: ThemeState = {
  mode: (localStorage.getItem('theme') as ThemeMode) || 'light',
};

const themeSlice = createSlice({
  name: 'theme',
  initialState,
  reducers: {
    setTheme: (state, action: PayloadAction<ThemeMode>) => {
      state.mode = action.payload;
    },
  },
});

export const { setTheme } = themeSlice.actions;

export default themeSlice.reducer;
</file>

<file path="frontend/src/store/slices/userSlice.ts">
import { createSlice, PayloadAction } from '@reduxjs/toolkit';

interface User {
  id: string;
  name: string;
  email: string;
  role: 'admin' | 'doctor' | 'patient';
  status: 'active' | 'inactive';
}

interface UserState {
  currentUser: User | null;
  users: User[];
  loading: boolean;
  error: string | null;
}

const initialState: UserState = {
  currentUser: null,
  users: [],
  loading: false,
  error: null,
};

const userSlice = createSlice({
  name: 'users',
  initialState,
  reducers: {
    setCurrentUser: (state, action: PayloadAction<User | null>) => {
      state.currentUser = action.payload;
    },
    setUsers: (state, action: PayloadAction<User[]>) => {
      state.users = action.payload;
    },
    addUser: (state, action: PayloadAction<User>) => {
      state.users.push(action.payload);
    },
    updateUser: (state, action: PayloadAction<User>) => {
      const index = state.users.findIndex(u => u.id === action.payload.id);
      if (index !== -1) {
        state.users[index] = action.payload;
      }
      if (state.currentUser?.id === action.payload.id) {
        state.currentUser = action.payload;
      }
    },
    deleteUser: (state, action: PayloadAction<string>) => {
      state.users = state.users.filter(u => u.id !== action.payload);
      if (state.currentUser?.id === action.payload) {
        state.currentUser = null;
      }
    },
    setLoading: (state, action: PayloadAction<boolean>) => {
      state.loading = action.payload;
    },
    setError: (state, action: PayloadAction<string | null>) => {
      state.error = action.payload;
    },
  },
});

export const {
  setCurrentUser,
  setUsers,
  addUser,
  updateUser,
  deleteUser,
  setLoading,
  setError,
} = userSlice.actions;

export default userSlice.reducer;
</file>

<file path="frontend/src/store/index.ts">
import { configureStore } from '@reduxjs/toolkit';
import appointmentReducer from './slices/appointmentSlice';
import doctorReducer from './slices/doctorSlice';
import patientReducer from './slices/patientSlice';
import userReducer from './slices/userSlice';
import authReducer from './slices/authSlice';
import labReducer from './slices/labSlice';
import themeReducer from './slices/themeSlice';

export const store = configureStore({
  reducer: {
    auth: authReducer,
    appointments: appointmentReducer,
    doctors: doctorReducer,
    patients: patientReducer,
    users: userReducer,
    lab: labReducer,
    theme: themeReducer,
  },
});

export type RootState = ReturnType<typeof store.getState>;
export type AppDispatch = typeof store.dispatch;
</file>

<file path="frontend/src/types/auth.ts">
export interface User {
    id: string;
    email: string;
    role: 'patient' | 'doctor' | 'admin';
    is_active: boolean;
    created_at: string;
    updated_at: string;
}

export interface AuthResponse {
    user: {
        id: string;
        email: string;
        username: string;
        role: 'patient' | 'doctor' | 'admin';
        is_active: boolean;
        created_at: string;
        updated_at: string;
    };
    access: string;
    refresh: string;
}

export interface LoginRequest {
    email: string;
    password: string;
}

export interface RegisterRequest {
    email: string;
    username: string;
    password: string;
    password2: string;
    role: 'patient' | 'doctor';
    // Patient-specific fields
    name?: string;
    age?: number;
    gender?: 'male' | 'female' | 'other';
    phone?: string;
    address?: string;
    // Doctor-specific fields
    specialization?: string;
    license_number?: string;
    years_of_experience?: number;
}

export interface AuthState {
    user: User | null;
    access: string | null;
    refresh: string | null;
    isAuthenticated: boolean;
    loading: boolean;
    error: string | null;
}
</file>

<file path="frontend/src/types/notistack.d.ts">
declare module 'notistack' {
  import { SnackbarProps } from '@mui/material/Snackbar';
  import { AlertProps } from '@mui/material/Alert';

  export interface OptionsObject {
    variant?: 'default' | 'error' | 'success' | 'warning' | 'info';
    autoHideDuration?: number;
    anchorOrigin?: {
      vertical: 'top' | 'bottom';
      horizontal: 'left' | 'center' | 'right';
    };
    onClose?: () => void;
    action?: React.ReactNode;
    content?: React.ReactNode;
    persist?: boolean;
    preventDuplicate?: boolean;
    style?: React.CSSProperties;
    className?: string;
    SnackbarProps?: Partial<SnackbarProps>;
    AlertProps?: Partial<AlertProps>;
  }

  export interface ProviderContext {
    enqueueSnackbar: (message: string | React.ReactNode, options?: OptionsObject) => string | number;
    closeSnackbar: (key?: string | number) => void;
  }

  export const useSnackbar: () => ProviderContext;

  export const SnackbarProvider: React.ComponentType<{
    children: React.ReactNode;
    maxSnack?: number;
    preventDuplicate?: boolean;
    dense?: boolean;
    iconVariant?: Record<string, React.ReactNode>;
    hideIconVariant?: boolean;
    anchorOrigin?: OptionsObject['anchorOrigin'];
    classes?: Record<string, string>;
    style?: React.CSSProperties;
    className?: string;
  }>;
}
</file>

<file path="frontend/src/App.css">
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}
</file>

<file path="frontend/src/App.test.tsx">
import React from 'react';
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});
</file>

<file path="frontend/src/index.css">
body {
  margin: 0;
  padding: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  box-sizing: border-box;
  background: none;
}

*, *::before, *::after {
  box-sizing: inherit;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}
</file>

<file path="frontend/src/logo.svg">
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>
</file>

<file path="frontend/src/react-app-env.d.ts">
/// <reference types="react-scripts" />
</file>

<file path="frontend/src/reportWebVitals.ts">
import { ReportHandler } from 'web-vitals';

const reportWebVitals = (onPerfEntry?: ReportHandler) => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;
</file>

<file path="frontend/src/setupTests.ts">
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';
</file>

<file path="frontend/src/theme.ts">
import { createTheme } from '@mui/material/styles';

const theme = createTheme({
  palette: {
    primary: {
      main: '#1976d2',
      light: '#63a4ff',
      dark: '#004ba0',
      contrastText: '#fff',
    },
    secondary: {
      main: '#ff4081',
      light: '#ff79b0',
      dark: '#c60055',
      contrastText: '#fff',
    },
    background: {
      default: 'linear-gradient(135deg, #e3f2fd 0%, #fce4ec 100%)',
      paper: '#ffffff',
    },
    success: {
      main: '#4caf50',
      contrastText: '#fff',
    },
    error: {
      main: '#f44336',
      contrastText: '#fff',
    },
    warning: {
      main: '#ff9800',
      contrastText: '#fff',
    },
    info: {
      main: '#2196f3',
      contrastText: '#fff',
    },
  },
  typography: {
    fontFamily: 'Poppins, Roboto, Helvetica, Arial, sans-serif',
    h1: {
      fontSize: '2.8rem',
      fontWeight: 700,
      letterSpacing: '-1px',
    },
    h2: {
      fontSize: '2.2rem',
      fontWeight: 600,
    },
    h3: {
      fontSize: '1.8rem',
      fontWeight: 600,
    },
    h4: {
      fontSize: '1.4rem',
      fontWeight: 500,
    },
    h5: {
      fontSize: '1.1rem',
      fontWeight: 500,
    },
    h6: {
      fontSize: '1rem',
      fontWeight: 500,
    },
    button: {
      textTransform: 'none',
      fontWeight: 600,
      letterSpacing: '0.5px',
    },
  },
  shape: {
    borderRadius: 16,
  },
  components: {
    MuiButton: {
      styleOverrides: {
        root: {
          borderRadius: 12,
          boxShadow: '0 2px 8px rgba(25, 118, 210, 0.08)',
          fontWeight: 600,
          transition: 'all 0.2s',
        },
      },
    },
    MuiCard: {
      styleOverrides: {
        root: {
          borderRadius: 20,
          boxShadow: '0 6px 24px rgba(25, 118, 210, 0.10)',
          transition: 'box-shadow 0.3s',
          '&:hover': {
            boxShadow: '0 12px 32px rgba(25, 118, 210, 0.18)',
          },
        },
      },
    },
    MuiPaper: {
      styleOverrides: {
        root: {
          borderRadius: 18,
        },
      },
    },
    MuiAppBar: {
      styleOverrides: {
        root: {
          background: 'linear-gradient(90deg, #1976d2 0%, #ff4081 100%)',
          boxShadow: '0 2px 8px rgba(25, 118, 210, 0.10)',
        },
      },
    },
  },
});

export default theme;
</file>

<file path="frontend/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*
</file>

<file path="frontend/package.json">
{
  "name": "healthcare-frontend",
  "version": "0.1.0",
  "private": true,
  "proxy": "http://localhost:8000",
  "dependencies": {
    "@emotion/react": "^11.11.3",
    "@emotion/styled": "^11.11.0",
    "@mui/icons-material": "^5.15.10",
    "@mui/material": "^5.15.10",
    "@reduxjs/toolkit": "^2.2.1",
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "@types/jest": "^27.5.2",
    "@types/node": "^16.18.80",
    "@types/react": "^18.2.55",
    "@types/react-dom": "^18.2.19",
    "axios": "^1.6.7",
    "formik": "^2.4.5",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-redux": "^9.1.0",
    "react-router-dom": "^6.22.0",
    "react-scripts": "5.0.1",
    "typescript": "^4.9.5",
    "web-vitals": "^2.1.4",
    "yup": "^1.3.3"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}
</file>

<file path="frontend/README.md">
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in the browser.

The page will reload if you make edits.\
You will also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can’t go back!**

If you aren’t satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you’re on your own.

You don’t have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn’t feel obligated to use this feature. However we understand that this tool wouldn’t be useful if you couldn’t customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).
</file>

<file path="frontend/tsconfig.json">
{
  "compilerOptions": {
    "target": "es5",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noFallthroughCasesInSwitch": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx"
  },
  "include": [
    "src"
  ]
}
</file>

<file path="gateway/src/nginx.conf">
# Rate limiting zones
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;

# Upstream definitions
upstream user {
    server user_service:8000;
}

upstream doctor {
    server doctor_service:8000;
}

upstream patient {
    server patient-service:8000;
}

upstream appointment {
    server appointment_service:8000;
}

upstream laboratory {
    server laboratory_service:8000;
}

upstream notification {
    server notification_service:8000;
}

upstream chatbot {
    server chatbot_service:8000;
}

server {
    listen 8000;
    server_name localhost;

    # Global CORS headers
    add_header 'Access-Control-Allow-Origin' 'http://localhost:3000' always;
    add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
    add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
    add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
    add_header 'Access-Control-Allow-Credentials' 'true' always;

    # Handle OPTIONS method globally
    if ($request_method = 'OPTIONS') {
        add_header 'Access-Control-Allow-Origin' 'http://localhost:3000' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;
        add_header 'Access-Control-Max-Age' 1728000;
        add_header 'Content-Type' 'text/plain; charset=utf-8';
        add_header 'Content-Length' 0;
        return 204;
    }

    # Root location - simple API gateway message
    location = / {
        default_type application/json;
        return 200 '{"message": "Healthcare Microservices API Gateway", "status": "running"}';
    }

    # Core Services
    location /api/users/ {
        limit_req zone=api_limit burst=20 nodelay;
        
        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Content-Type-Options "nosniff" always;

        proxy_pass http://user;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Main Healthcare Services
    location /api/doctors/ {
        limit_req zone=api_limit burst=20 nodelay;
        
        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Content-Type-Options "nosniff" always;

        proxy_pass http://doctor;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /api/patients/ {
        limit_req zone=api_limit burst=20 nodelay;
        
        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Content-Type-Options "nosniff" always;

        proxy_pass http://patient;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /api/appointments/ {
        limit_req zone=api_limit burst=20 nodelay;
        
        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Content-Type-Options "nosniff" always;

        proxy_pass http://appointment;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /api/laboratory/ {
        limit_req zone=api_limit burst=20 nodelay;
        
        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Content-Type-Options "nosniff" always;
        
        # CORS headers
        add_header 'Access-Control-Allow-Origin' 'http://localhost:3000' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
        add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;
        
        # Handle OPTIONS method
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 204;
        }

        proxy_pass http://laboratory;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Support Services
    location /api/notifications/ {
        limit_req zone=api_limit burst=20 nodelay;
        
        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Content-Type-Options "nosniff" always;
        
        # CORS headers
        add_header 'Access-Control-Allow-Origin' 'http://localhost:3000' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
        add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;
        
        # Handle OPTIONS method
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 204;
        }

        proxy_pass http://notification;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /api/chatbot/ {
        limit_req zone=api_limit burst=20 nodelay;
        
        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Content-Type-Options "nosniff" always;
        
        # CORS headers
        add_header 'Access-Control-Allow-Origin' 'http://localhost:3000' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
        add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;
        
        # Handle OPTIONS method
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 204;
        }

        proxy_pass http://chatbot;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Health check endpoint
    location /health {
        access_log off;
        return 200 'healthy\n';
    }

    # Error handling
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
}
</file>

<file path="gateway/Dockerfile">
FROM nginx:alpine

COPY src/ /etc/nginx/conf.d/

EXPOSE 80
</file>

<file path="services/admin_service/admin_service/asgi.py">
"""
ASGI config for admin_service project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'admin_service.settings')

application = get_asgi_application()
</file>

<file path="services/admin_service/admin_service/settings.py">
"""
Django settings for admin_service project.

Generated by 'django-admin startproject' using Django 3.1.12.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'g$#5gen-&9(ifelwr7n_hb-tv!%x%03$vtb_jpexh2i^w&(69f'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'rest_framework',
    'drf_yasg',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'admin_service.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'admin_service.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'user_db',
        'USER': 'user',
        'PASSWORD': '123456',
        'HOST': 'mysql_db',
        'PORT': '3306',
        'OPTIONS': {
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
            'charset': 'utf8mb4',
        },
    }
}



# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
</file>

<file path="services/admin_service/admin_service/urls.py">
"""admin_service URL Configuration

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/3.1/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path, re_path
from drf_yasg.views import get_schema_view
from drf_yasg import openapi
from rest_framework import permissions

schema_view = get_schema_view(
    openapi.Info(
        title="Admin service Docs",
        default_version='v1',
        description="API documentation",
    ),
    public=True,
    permission_classes=(permissions.AllowAny,),
)

urlpatterns = [
    path('admin/', admin.site.urls),
    # DRF Yasg URLs
    re_path(r'^swagger(?P<format>\.json|\.yaml)$', schema_view.without_ui(cache_timeout=0), name='schema-json'),
    path('swagger/', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'),
    path('redoc/', schema_view.with_ui('redoc', cache_timeout=0), name='schema-redoc'),
]
</file>

<file path="services/admin_service/admin_service/wsgi.py">
"""
WSGI config for admin_service project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'admin_service.settings')

application = get_wsgi_application()
</file>

<file path="services/admin_service/Dockerfile">
FROM python:3.11.9

ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

WORKDIR /app

COPY requirements.txt /app/
RUN pip install -r requirements.txt
RUN mkdir -p /app/staticfiles

COPY . /app/
</file>

<file path="services/admin_service/manage.py">
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'admin_service.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()
</file>

<file path="services/admin_service/requirements.txt">
Django>=4.2,<5.0
djangorestframework>=3.14.0
mysqlclient>=2.1.0
django-environ>=0.10.0
drf-yasg==1.21.5
pyyaml>=6.0
uritemplate>=4.1.1
</file>

<file path="services/appointment_service/appointment_service/__init__.py">

</file>

<file path="services/appointment_service/appointment_service/asgi.py">
"""
ASGI config for appointment_service project.
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'appointment_service.settings')

application = get_asgi_application()
</file>

<file path="services/appointment_service/appointment_service/models.py">
from django.db import models
import uuid
from django.core.validators import MinValueValidator, MaxValueValidator

class Appointment(models.Model):
    STATUS_CHOICES = [
        ('pending', 'Pending'),
        ('confirmed', 'Confirmed'),
        ('cancelled', 'Cancelled'),
        ('completed', 'Completed')
    ]

    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    patient_id = models.UUIDField()  # References patient-service
    doctor_id = models.UUIDField()   # References doctor-service
    date = models.DateField()
    time = models.TimeField()
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='pending')
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    notes = models.TextField(blank=True, null=True)
    service_type = models.CharField(max_length=100)  # Type of medical service
    duration = models.IntegerField(  # Duration in minutes
        validators=[MinValueValidator(15), MaxValueValidator(240)],
        default=30
    )

    class Meta:
        indexes = [
            models.Index(fields=['patient_id']),
            models.Index(fields=['doctor_id']),
            models.Index(fields=['date', 'time']),
            models.Index(fields=['status'])
        ]
        ordering = ['date', 'time']

    def __str__(self):
        return f"Appointment {self.id} - {self.patient_id} with {self.doctor_id} on {self.date} at {self.time}"
</file>

<file path="services/appointment_service/appointment_service/serializers.py">
from rest_framework import serializers
from .models import Appointment

class AppointmentSerializer(serializers.ModelSerializer):
    class Meta:
        model = Appointment
        fields = [
            'id', 'patient_id', 'doctor_id', 'date', 'time',
            'status', 'created_at', 'updated_at', 'notes',
            'service_type', 'duration'
        ]
        read_only_fields = ['id', 'created_at', 'updated_at']
</file>

<file path="services/appointment_service/appointment_service/settings.py">
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY', 'django-insecure-your-secret-key-here')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DJANGO_DEBUG', 'True') == 'True'

ALLOWED_HOSTS = ['*']

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'drf_yasg',
    'corsheaders',
    'appointment_service',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'appointment_service.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'appointment_service.wsgi.application'

# Database
MONGODB_HOST = os.getenv('MONGODB_HOST', 'localhost')
MONGODB_PORT = os.getenv('MONGODB_PORT', '27017')

DATABASES = {
    'default': {
        'ENGINE': 'djongo',
        'NAME': 'appointment_db',
        'ENFORCE_SCHEMA': False,
        'CLIENT': {
            'host': f'mongodb://{MONGODB_HOST}:{MONGODB_PORT}/',
        }
    }
}

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# CORS settings - Allow all origins for development
# For production, you should restrict this to your frontend's actual origin
CORS_ALLOW_ALL_ORIGINS = True

# REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],
}

# Swagger settings
SWAGGER_SETTINGS = {
    'SECURITY_DEFINITIONS': {
        'Basic': {
            'type': 'basic'
        }
    },
    'USE_SESSION_AUTH': False,
}
</file>

<file path="services/appointment_service/appointment_service/urls.py">
from django.contrib import admin
from django.urls import path, include
from rest_framework.routers import DefaultRouter
from drf_yasg.views import get_schema_view
from drf_yasg import openapi
from rest_framework import permissions
from .views import AppointmentViewSet

router = DefaultRouter()
router.register(r'appointments', AppointmentViewSet, basename='appointment')

schema_view = get_schema_view(
   openapi.Info(
      title="Appointment Service API",
      default_version='v1',
      description="API documentation for the Appointment Service",
      terms_of_service="https://www.google.com/policies/terms/",
      contact=openapi.Contact(email="contact@example.com"),
      license=openapi.License(name="BSD License"),
   ),
   public=True,
   permission_classes=(permissions.AllowAny,),
)

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/', include(router.urls)),
    path('swagger/', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'),
    path('redoc/', schema_view.with_ui('redoc', cache_timeout=0), name='schema-redoc'),
]
</file>

<file path="services/appointment_service/appointment_service/views.py">
from rest_framework import viewsets, status
from rest_framework.response import Response
from rest_framework.decorators import action
from .models import Appointment
from .serializers import AppointmentSerializer

class AppointmentViewSet(viewsets.ModelViewSet):
    queryset = Appointment.objects.all()
    serializer_class = AppointmentSerializer

    @action(detail=True, methods=['post'])
    def confirm(self, request, pk=None):
        appointment = self.get_object()
        appointment.status = 'confirmed'
        appointment.save()
        return Response({'status': 'appointment confirmed'})

    @action(detail=True, methods=['post'])
    def cancel(self, request, pk=None):
        appointment = self.get_object()
        appointment.status = 'cancelled'
        appointment.save()
        return Response({'status': 'appointment cancelled'})

    @action(detail=True, methods=['post'])
    def complete(self, request, pk=None):
        appointment = self.get_object()
        appointment.status = 'completed'
        appointment.save()
        return Response({'status': 'appointment completed'})
</file>

<file path="services/appointment_service/appointment_service/wsgi.py">
"""
WSGI config for appointment_service project.
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'appointment_service.settings')

application = get_wsgi_application()
</file>

<file path="services/appointment_service/Dockerfile">
FROM python:3.9-slim

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Create directory for static files
RUN mkdir -p /app/staticfiles

# Copy requirements first to leverage Docker cache
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy the rest of the application
COPY . .

# Expose the port the app runs on
EXPOSE 8000

# Command to run the application
CMD ["python", "manage.py", "runserver", "0.0.0.0:8000"]
</file>

<file path="services/appointment_service/manage.py">
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'appointment_service.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()
</file>

<file path="services/appointment_service/README.md">
# Appointment Service

This service manages appointments between patients and doctors in the healthcare system.

## API Endpoints

### Get All Appointments
- **URL**: `/api/appointments/`
- **Method**: `GET`
- **Response**: List of all appointments

### Get Appointment by ID
- **URL**: `/api/appointments/<uuid:id>/`
- **Method**: `GET`
- **Response**: Appointment details

### Create New Appointment
- **URL**: `/api/appointments/`
- **Method**: `POST`
- **Body**:
  ```json
  {
    "patient_id": "uuid",
    "doctor_id": "uuid",
    "date": "YYYY-MM-DD",
    "time": "HH:MM:SS",
    "service_type": "string",
    "duration": "integer",
    "notes": "string (optional)"
  }
  ```

### Update Appointment
- **URL**: `/api/appointments/<uuid:id>/`
- **Method**: `PUT`
- **Body**: Same as create, but all fields are optional

### Confirm Appointment
- **URL**: `/api/appointments/<uuid:id>/confirm/`
- **Method**: `POST`
- **Response**: Confirmation status

### Cancel Appointment
- **URL**: `/api/appointments/<uuid:id>/cancel/`
- **Method**: `POST`
- **Response**: Cancellation status

### Complete Appointment
- **URL**: `/api/appointments/<uuid:id>/complete/`
- **Method**: `POST`
- **Response**: Completion status

## API Documentation
- Swagger UI: `/swagger/`
- ReDoc: `/redoc/`

## Development
1. Install dependencies:
   ```bash
   pip install -r requirements.txt
   ```

2. Run migrations:
   ```bash
   python manage.py makemigrations
   python manage.py migrate
   ```

3. Start the development server:
   ```bash
   python manage.py runserver
   ```

4. Access the service at: `http://localhost:8000`
</file>

<file path="services/appointment_service/requirements.txt">
Django==3.2.23
djangorestframework==3.14.0
djongo==1.3.6
pymongo==3.12.3
python-dotenv==1.0.0
sqlparse==0.2.4
drf-yasg==1.21.7
django-cors-headers
</file>

<file path="services/chatbot_service/app/__init__.py">

</file>

<file path="services/chatbot_service/app/urls.py">
from django.urls import path
from .views import chat
 
urlpatterns = [
    path('chat/', chat),
]
</file>

<file path="services/chatbot_service/app/views.py">
import os
import json
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.utils.decorators import method_decorator

# Đường dẫn tuyệt đối tới file KB
KB_PATH = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'kb', 'diseases.json')

with open(KB_PATH, encoding='utf-8') as f:
    KB = json.load(f)

ALL_SYMPTOMS = set()
for disease in KB.values():
    ALL_SYMPTOMS.update(disease['symptoms'])

@csrf_exempt
def chat(request):
    if request.method == 'OPTIONS':
        response = JsonResponse({'detail': 'CORS preflight'})
        response["Access-Control-Allow-Origin"] = "*"
        response["Access-Control-Allow-Methods"] = "POST, OPTIONS"
        response["Access-Control-Allow-Headers"] = "Content-Type"
        return response
    if request.method != 'POST':
        return JsonResponse({'error': 'Chỉ hỗ trợ POST'}, status=405)
    try:
        data = json.loads(request.body)
        history = data.get('history', [])
        # Lấy các triệu chứng user đã xác nhận "Có" hoặc nhập tự do
        user_symptoms = set()
        for msg in history:
            if msg['sender'] == 'user':
                if msg.get('answer', '').lower() == 'có':
                    # Trích xuất triệu chứng từ câu hỏi của bot mà user trả lời "Có"
                    question_text = msg['text'] # Đây là câu hỏi của bot, ví dụ: "Bạn có bị ho không?"
                    if question_text.startswith('Bạn có bị ') and question_text.endswith(' không?'):
                        symptom = question_text.replace('Bạn có bị ', '').replace(' không?', '')
                        user_symptoms.add(symptom)
                elif not msg.get('answer'): # User nhập tự do
                    # Tìm các triệu chứng có trong text người dùng nhập
                    for symptom_kb in ALL_SYMPTOMS: # Đổi tên biến để tránh nhầm lẫn
                        if symptom_kb in msg['text'].lower():
                            user_symptoms.add(symptom_kb)

        # Lấy các triệu chứng user đã xác nhận 'Không'
        negative_symptoms = set([
            msg['text'] for msg in history if msg['sender'] == 'user' and msg.get('answer', '').lower() == 'không'
        ])
        # Lấy các triệu chứng đã hỏi
        asked_symptoms = set([
            msg['text'].replace('Bạn có bị ', '').replace(' không?', '')
            for msg in history if msg['sender'] == 'bot' and msg['text'].startswith('Bạn có bị ')
        ])
        # Nếu chưa có triệu chứng nào, hỏi triệu chứng đầu tiên hoặc báo không nhận diện được triệu chứng
        if not user_symptoms:
            # Kiểm tra nếu user đã nhập tự do nhưng không khớp triệu chứng nào
            if any(msg['sender'] == 'user' and not msg.get('answer') and msg['text'].strip() for msg in history):
                response = JsonResponse({"reply": "Tôi chưa từng nghe triệu chứng đó, bạn còn gặp triệu chứng nào khác không?", "audio": "Tôi chưa từng nghe triệu chứng đó, bạn còn gặp triệu chứng nào khác không?"})
                response["Access-Control-Allow-Origin"] = "*"
                return response
            response = JsonResponse({"reply": "Triệu chứng bạn gặp phải là gì?", "audio": "Triệu chứng bạn gặp phải là gì?"})
            response["Access-Control-Allow-Origin"] = "*"
            return response
        # 1. Lọc danh sách bệnh còn lại dựa trên các triệu chứng user đã xác nhận
        possible_diseases = []
        for code, disease in KB.items():
            # Loại trừ bệnh nếu user đã trả lời 'không' cho bất kỳ triệu chứng nào của bệnh
            if all(sym in disease['symptoms'] for sym in user_symptoms) and not any(sym in disease['symptoms'] for sym in negative_symptoms):
                possible_diseases.append((code, disease))
        if not possible_diseases:
            # Nếu không còn bệnh nào phù hợp, hướng dẫn nhập thêm triệu chứng
            response = JsonResponse({"reply": "Chưa đủ dữ liệu để chẩn đoán. Bạn hãy nhập thêm triệu chứng khác nếu có!", "audio": "Chưa đủ dữ liệu để chẩn đoán. Bạn hãy nhập thêm triệu chứng khác nếu có!"})
            response["Access-Control-Allow-Origin"] = "*"
            return response
        # Nếu chỉ còn 1 bệnh, chỉ chẩn đoán khi đủ độ tin cậy hoặc đã hỏi hết triệu chứng, nếu không hỏi tiếp triệu chứng còn lại
        if len(possible_diseases) == 1:
            code, disease = possible_diseases[0]
            remaining_symptoms = [sym for sym in disease['symptoms'] if sym not in user_symptoms and sym not in asked_symptoms and sym not in negative_symptoms]
            match = len(user_symptoms & set(disease['symptoms']))
            confidence = int(100 * match / len(disease['symptoms']))
            if confidence >= 80 or not remaining_symptoms:
                name = disease['name']
                treatment = disease['treatment']
                reply = f"Bạn có thể đang bị {name} (độ tin cậy {confidence}%). Khuyến nghị: {treatment}"
                response = JsonResponse({"reply": reply, "audio": reply})
                response["Access-Control-Allow-Origin"] = "*"
                return response
            # Nếu chưa đủ độ tin cậy, hỏi tiếp triệu chứng còn lại của bệnh này
            next_symptom = remaining_symptoms[0]
            response = JsonResponse({"reply": f"Bạn có bị {next_symptom} không?", "audio": f"Bạn có bị {next_symptom} không?"})
            response["Access-Control-Allow-Origin"] = "*"
            return response
        # Nếu còn nhiều bệnh, hỏi triệu chứng phân biệt nhất
        symptom_count = {}
        for code, disease in possible_diseases:
            for symptom in disease['symptoms']:
                if symptom not in user_symptoms and symptom not in asked_symptoms and symptom not in negative_symptoms:
                    symptom_count[symptom] = symptom_count.get(symptom, 0) + 1
        if not symptom_count:
            # Không còn triệu chứng nào để hỏi, đề xuất nhập thêm triệu chứng tự do
            response = JsonResponse({"reply": "Chưa đủ dữ liệu để chẩn đoán. Bạn hãy nhập thêm triệu chứng khác nếu có!", "audio": "Chưa đủ dữ liệu để chẩn đoán. Bạn hãy nhập thêm triệu chứng khác nếu có!"})
            response["Access-Control-Allow-Origin"] = "*"
            return response
        n = len(possible_diseases)
        best_symptom = min(symptom_count, key=lambda s: abs(symptom_count[s] - n/2))
        response = JsonResponse({"reply": f"Bạn có bị {best_symptom} không?", "audio": f"Bạn có bị {best_symptom} không?"})
        response["Access-Control-Allow-Origin"] = "*"
        return response
    except Exception as e:
        response = JsonResponse({'error': str(e)})
        response["Access-Control-Allow-Origin"] = "*"
        return response
</file>

<file path="services/chatbot_service/chatbot_core/asgi.py">
"""
ASGI config for chatbot_core project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'chatbot_core.settings')

application = get_asgi_application()
</file>

<file path="services/chatbot_service/chatbot_core/settings.py">
"""
Django settings for chatbot_core project.

Generated by 'django-admin startproject' using Django 4.2.21.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-vy%8p2uqmzfb@!orq%*kz$(-yql*4n@+wtb6mpvmf#ur41@-0_'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'app',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'chatbot_core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'chatbot_core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
</file>

<file path="services/chatbot_service/chatbot_core/urls.py">
"""
URL configuration for chatbot_core project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/4.2/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/', include('app.urls')),
]
</file>

<file path="services/chatbot_service/chatbot_core/wsgi.py">
"""
WSGI config for chatbot_core project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'chatbot_core.settings')

application = get_wsgi_application()
</file>

<file path="services/chatbot_service/kb/diseases.json">
{
  "flu": {
    "name": "Cúm mùa",
    "symptoms": ["sốt", "ho", "đau đầu", "mệt mỏi"],
    "treatment": "Nghỉ ngơi, uống nước, uống paracetamol 500mg mỗi 6h"
  },
  "dengue": {
    "name": "Sốt xuất huyết",
    "symptoms": ["sốt", "đau đầu", "phát ban", "đau sau mắt"],
    "treatment": "Uống nhiều nước, không dùng ibuprofen, theo dõi tiểu cầu"
  },
  "covid19": {
    "name": "COVID-19",
    "symptoms": [
      "sốt",
      "ho",
      "mệt mỏi",
      "mất vị giác",
      "khó thở",
      "đau họng",
      "đau đầu",
      "chảy nước mũi",
      "đau nhức cơ thể",
      "tiêu chảy",
      "nôn",
      "mất khứu giác"
    ],
    "treatment": "Cách ly, nghỉ ngơi, uống nhiều nước, dùng thuốc hạ sốt nếu cần, liên hệ y tế nếu khó thở."
  },
  "allergy": {
    "name": "Dị ứng",
    "symptoms": [
      "ngứa",
      "phát ban",
      "hắt hơi",
      "chảy nước mũi",
      "ngứa mũi",
      "ngứa mắt",
      "ngứa vòm miệng",
      "nghẹt mũi",
      "chảy nước mắt",
      "sưng môi",
      "sưng lưỡi",
      "sưng mặt",
      "sưng cổ họng",
      "nổi mề đay",
      "sốc phản vệ",
      "sưng/phù to tại vết đốt",
      "ho",
      "tức ngực",
      "thở khò khè",
      "khó thở",
      "ngứa da",
      "phát ban da",
      "nổi mụn nước",
      "đóng vảy da",
      "tróc vảy da"
    ],
    "treatment": "Tránh tiếp xúc dị nguyên, dùng thuốc kháng histamin, glucocorticoid, epinephrine khi sốc phản vệ, liệu pháp miễn dịch nếu cần, đến bác sĩ nếu triệu chứng nặng.",
    "description": "Dị ứng xảy ra khi hệ miễn dịch nhầm lẫn một chất vô hại thành mối đe dọa, tạo kháng thể IgE và giải phóng histamin gây triệu chứng. Dị ứng có thể do phấn hoa, thực phẩm, côn trùng, thuốc, mủ cao su... Sốc phản vệ là biến chứng nguy hiểm nhất, có thể đe dọa tính mạng.",
    "risk_factors": "Người có tiền sử gia đình dị ứng, hen suyễn, trẻ em, người từng bị dị ứng hoặc hen suyễn.",
    "diagnosis": "Chẩn đoán dựa vào thử nghiệm da, xét nghiệm máu tìm IgE đặc hiệu, khai thác tiền sử tiếp xúc dị nguyên.",
    "immunotherapy": "Có thể dùng liệu pháp miễn dịch tiêm hoặc ngậm dưới lưỡi để giảm nhạy cảm dị nguyên."
  },
  "asthma": {
    "name": "Hen phế quản",
    "symptoms": ["khó thở", "ho", "khò khè", "tức ngực"],
    "treatment": "Dùng thuốc giãn phế quản, tránh dị nguyên, đến bệnh viện nếu khó thở nặng."
  },
  "pneumonia": {
    "name": "Viêm phổi",
    "symptoms": ["sốt", "ho", "đau ngực", "khó thở", "ớn lạnh"],
    "treatment": "Khám bác sĩ, dùng kháng sinh theo chỉ định, nghỉ ngơi, uống nhiều nước."
  },
  "migraine": {
    "name": "Đau nửa đầu",
    "symptoms": ["đau đầu", "buồn nôn", "nhạy cảm ánh sáng", "chóng mặt"],
    "treatment": "Nghỉ ngơi nơi yên tĩnh, dùng thuốc giảm đau, tránh căng thẳng."
  },
  "gastritis": {
    "name": "Viêm dạ dày",
    "symptoms": [
      "đau bụng",
      "buồn nôn",
      "ợ nóng",
      "đầy hơi",
      "khó tiêu",
      "cồn cào dạ dày",
      "nóng rát dạ dày",
      "đầy bụng trên",
      "nôn ra máu",
      "đi ngoài ra máu"
    ],
    "treatment": "Ăn nhẹ, tránh đồ cay nóng, dùng thuốc theo chỉ định bác sĩ. Nếu do H.pylori: dùng kháng sinh. Nếu do NSAID/rượu: ngưng sử dụng. Có thể dùng thuốc ức chế bơm proton, chẹn H2, kháng acid. Bổ sung vitamin B12 nếu thiếu. Tuân thủ điều trị và tái khám định kỳ.",
    "description": "Viêm dạ dày là tình trạng niêm mạc dạ dày bị viêm nhiễm, kích ứng, có thể cấp tính hoặc mạn tính. Bệnh gây đau, khó chịu vùng bụng trên, ảnh hưởng sinh hoạt và ăn uống.",
    "causes": "Tổn thương hàng rào bảo vệ niêm mạc, tăng tiết acid, nhiễm khuẩn (H.pylori), dùng thuốc NSAID kéo dài, viêm dạ dày tự miễn, rượu bia, stress, bệnh lý khác.",
    "risk_factors": "Người lớn tuổi, bệnh tự miễn, nhiễm trùng, dùng NSAID dài ngày, nghiện rượu, stress, sau hóa trị/xạ trị, bệnh lý khác (HIV/AIDS, Crohn, Celiac, ký sinh trùng, trào ngược mật).",
    "complications": "Có thể gây loét, xuất huyết, thủng dạ dày, tăng nguy cơ ung thư dạ dày nếu mạn tính.",
    "diagnosis": "Nội soi tiêu hóa, xét nghiệm H.pylori (phân, máu, test hơi thở), xét nghiệm máu ẩn trong phân, chụp X quang, sinh thiết niêm mạc.",
    "prevention": "Không uống rượu bia, bỏ thuốc lá, dùng thuốc giảm đau theo chỉ định, ăn uống lành mạnh, tránh thực phẩm cay nóng/dầu mỡ, kiểm soát stress, tuân thủ điều trị và tái khám."
  },
  "hypertension": {
    "name": "Tăng huyết áp",
    "symptoms": [
      "đau đầu",
      "chóng mặt",
      "mờ mắt",
      "mệt mỏi",
      "đau ngực",
      "khó thở",
      "tiểu máu",
      "liệt nửa người"
    ],
    "treatment": "Ăn nhạt, tập thể dục, dùng thuốc hạ áp theo chỉ định, kiểm tra huyết áp định kỳ, không tự ý bỏ thuốc. Các nhóm thuốc: chẹn kênh calci, ức chế men chuyển, ức chế thụ thể, chẹn beta, lợi tiểu. Mục tiêu huyết áp <140/90mmHg.",
    "description": "Tăng huyết áp là tình trạng huyết áp tâm thu ≥140mmHg và/hoặc tâm trương ≥90mmHg. Bệnh diễn biến thầm lặng, có thể gây biến chứng nguy hiểm như nhồi máu cơ tim, đột quỵ, suy thận nếu không điều trị.",
    "causes": "90% là tăng huyết áp vô căn (không rõ nguyên nhân). 10% do bệnh thận, nội tiết, tim mạch, thuốc, ngộ độc thai nghén, rối loạn thần kinh.",
    "risk_factors": "Nam giới, nữ mãn kinh, tiền sử gia đình, béo phì, ít vận động, hút thuốc, ăn mặn, stress, uống nhiều rượu bia, bệnh thận mạn, đái tháo đường, ngừng thở khi ngủ.",
    "prevention": "Ăn giảm muối, nhiều rau xanh, ít mỡ động vật, tập thể dục đều, bỏ thuốc lá, giảm cân, hạn chế rượu bia, kiểm soát stress, duy trì BMI và vòng bụng hợp lý.",
    "diagnosis": "Đo huyết áp tại phòng khám, tại nhà hoặc bằng Holter 24h. Tăng huyết áp khi huyết áp ≥140/90mmHg (phòng khám), ≥135/85mmHg (tại nhà).",
    "complications": "Nhồi máu cơ tim, đột quỵ, suy thận, tổn thương võng mạc, lóc tách động mạch chủ, suy tim.",
    "emergency": "Cơn tăng huyết áp: huyết áp >180/120mmHg, có hoặc không có tổn thương cơ quan đích. Cần điều trị cấp cứu nếu có dấu hiệu tổn thương cơ quan đích."
  },
  "chickenpox": {
    "name": "Thủy đậu",
    "symptoms": ["sốt", "phát ban", "ngứa", "mụn nước"],
    "treatment": "Nghỉ ngơi, giữ vệ sinh da, tránh gãi, dùng thuốc giảm ngứa."
  },
  "hepatitis": {
    "name": "Viêm gan",
    "symptoms": [
      "mệt mỏi",
      "vàng da",
      "nước tiểu sẫm",
      "buồn nôn",
      "sốt",
      "không ngon miệng",
      "đau bụng",
      "nôn",
      "đau cơ",
      "đau khớp",
      "ngứa",
      "mất tập trung",
      "trí nhớ kém",
      "bầm tím",
      "chảy máu"
    ],
    "treatment": "Nghỉ ngơi, ăn uống lành mạnh, tránh rượu bia, điều trị nguyên nhân (virus, tự miễn, độc chất), dùng thuốc theo chỉ định bác sĩ, ghép gan nếu suy gan nặng.",
    "description": "Viêm gan là tình trạng các tế bào gan bị tổn thương và viêm, có thể do virus, rượu, thuốc, tự miễn hoặc nhiễm trùng khác. Bệnh tiến triển thầm lặng, có thể gây xơ gan, ung thư gan nếu không điều trị.",
    "causes": "Virus viêm gan (A, B, C, D, E), rượu, thuốc, bệnh tự miễn, nhiễm trùng khác, độc chất.",
    "types": "Viêm gan A, E lây qua đường tiêu hóa; B, C, D lây qua máu, tình dục, mẹ sang con. B, C có thể thành mạn tính, gây xơ gan, ung thư gan.",
    "risk_factors": "Tiêm chích, truyền máu, quan hệ không an toàn, sống nơi vệ sinh kém, tiếp xúc máu/mẫu bệnh phẩm, dùng chung kim tiêm, bệnh tự miễn, uống rượu nhiều.",
    "prevention": "Tiêm vắc-xin (A, B), không dùng chung kim tiêm, ăn chín uống sôi, quan hệ an toàn, hạn chế rượu bia, duy trì lối sống lành mạnh.",
    "diagnosis": "Xét nghiệm máu (men gan, Bilirubin, PCR, kháng thể), siêu âm gan, CT, MRI, sinh thiết gan.",
    "complications": "Xơ gan, suy gan, ung thư gan, xuất huyết tiêu hóa, tử vong nếu không điều trị."
  }
}
</file>

<file path="services/chatbot_service/Dockerfile">
FROM python:3.10-slim

WORKDIR /app

COPY . /app

RUN pip install --no-cache-dir django

EXPOSE 8000

CMD ["python", "manage.py", "runserver", "0.0.0.0:8000"]
</file>

<file path="services/chatbot_service/manage.py">
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'chatbot_core.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()
</file>

<file path="services/doctor_service/doctor/migrations/0001_initial.py">
# Generated by Django 4.2.21 on 2025-06-10 03:41

from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Doctor',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('user_id', models.UUIDField(unique=True)),
                ('specialization', models.CharField(max_length=100)),
                ('license_number', models.CharField(max_length=50, unique=True)),
                ('years_of_experience', models.IntegerField()),
                ('education', models.TextField()),
                ('certifications', models.TextField(blank=True, null=True)),
                ('languages', models.CharField(max_length=200)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('username', models.CharField(max_length=150, unique=True)),
                ('role', models.CharField(choices=[('patient', 'Patient'), ('doctor', 'Doctor'), ('admin', 'Admin')], max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('date_joined', models.DateTimeField(auto_now_add=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='doctor_user_set', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='doctor_user_set', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Schedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day_of_week', models.IntegerField(choices=[(0, 'Monday'), (1, 'Tuesday'), (2, 'Wednesday'), (3, 'Thursday'), (4, 'Friday'), (5, 'Saturday'), (6, 'Sunday')])),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('is_available', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('doctor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedules', to='doctor.doctor')),
            ],
            options={
                'unique_together': {('doctor', 'day_of_week')},
            },
        ),
    ]
</file>

<file path="services/doctor_service/doctor/admin.py">
from django.contrib import admin

# Register your models here.
</file>

<file path="services/doctor_service/doctor/apps.py">
from django.apps import AppConfig


class DoctorConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'doctor'
</file>

<file path="services/doctor_service/doctor/managers.py">
from django.contrib.auth.models import BaseUserManager

class UserManager(BaseUserManager):
    def create_user(self, email, username, password=None, role=None, **extra_fields):
        if not email:
            raise ValueError('The Email field must be set')
        if not username:
            raise ValueError('The Username field must be set')
        if not role:
            raise ValueError('The Role field must be set')
        email = self.normalize_email(email)
        user = self.model(email=email, username=username, role=role, **extra_fields)
        user.set_password(password)
        user.save(using=self._db)
        return user

    def create_superuser(self, email, username, password=None, **extra_fields):
        extra_fields.setdefault('is_staff', True)
        extra_fields.setdefault('is_superuser', True)
        extra_fields.setdefault('role', 'admin')
        return self.create_user(email, username, password, **extra_fields)
</file>

<file path="services/doctor_service/doctor/tests.py">
from django.test import TestCase

# Create your tests here.
</file>

<file path="services/doctor_service/doctor_service/asgi.py">
"""
ASGI config for doctor_service project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'doctor_service.settings')

application = get_asgi_application()
</file>

<file path="services/doctor_service/doctor_service/urls.py">
"""
URL configuration for patient-service project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/5.2/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import include, path
from drf_yasg import openapi
from drf_yasg.views import get_schema_view
from rest_framework import permissions

schema_view = get_schema_view(
    openapi.Info(
        title="Doctor Service API",
        default_version='v1',
        description="API documentation for Doctor Service",
    ),
    public=True,
    permission_classes=(permissions.AllowAny,),
)

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/doctors/', include('doctor.urls')),
    
    # Swagger documentation
    path('swagger/', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'),
    path('redoc/', schema_view.with_ui('redoc', cache_timeout=0), name='schema-redoc'),
]
</file>

<file path="services/doctor_service/doctor_service/wsgi.py">
"""
WSGI config for doctor_service project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'doctor_service.settings')

application = get_wsgi_application()
</file>

<file path="services/doctor_service/Dockerfile">
FROM python:3.11.9

ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

WORKDIR /app

COPY requirements.txt /app/
RUN pip install -r requirements.txt
RUN mkdir -p /app/staticfiles

COPY . /app/
</file>

<file path="services/doctor_service/manage.py">
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'doctor_service.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()
</file>

<file path="services/laboratory_service/disease_prediction/ai_models/__init__.py">
# This file is intentionally left empty to mark the directory as a Python package.
</file>

<file path="services/laboratory_service/disease_prediction/ai_models/predictor.py">
import numpy as np
from sklearn.ensemble import RandomForestClassifier
import joblib
import os

class DiseasePredictor:
    def __init__(self):
        self.model = RandomForestClassifier(n_estimators=100, random_state=42)
        self.model_path = os.path.join(os.path.dirname(__file__), 'disease_model.joblib')
        
        # Load model if it exists, otherwise create a new one
        if os.path.exists(self.model_path):
            self.model = joblib.load(self.model_path)
        else:
            # Initialize with training data for multiple diseases
            # Features: [age, gender, fever, cough, fatigue, headache, sore_throat, 
            #           runny_nose, body_ache, nausea, vomiting, diarrhea, 
            #           shortness_breath, chest_pain, rash, joint_pain]
            X = np.array([
                # Flu cases
                [25, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0],
                [30, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0],
                
                # COVID-19 cases
                [35, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0],
                [40, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0],
                
                # Common Cold cases
                [20, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
                [45, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
                
                # Dengue Fever cases
                [28, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1],
                [32, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1],
                
                # Malaria cases
                [38, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0],
                [42, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0],
                
                # Typhoid cases
                [22, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0],
                [27, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0],
                
                # Pneumonia cases
                [50, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0],
                [55, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0],
                
                # Bronchitis cases
                [33, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0],
                [37, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0],
                
                # Gastroenteritis cases
                [29, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0],
                [31, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0],
                
                # Arthritis cases
                [60, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
                [65, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]
            ])
            
            y = np.array([
                'Flu', 'Flu',
                'COVID-19', 'COVID-19',
                'Common Cold', 'Common Cold',
                'Dengue Fever', 'Dengue Fever',
                'Malaria', 'Malaria',
                'Typhoid', 'Typhoid',
                'Pneumonia', 'Pneumonia',
                'Bronchitis', 'Bronchitis',
                'Gastroenteritis', 'Gastroenteritis',
                'Arthritis', 'Arthritis'
            ])
            
            self.model.fit(X, y)
            joblib.dump(self.model, self.model_path)

    def predict(self, age, gender, symptoms, lab_results):
        # Convert gender to numeric (1 for male, 0 for female)
        gender_numeric = 1 if gender.lower() == 'male' else 0
        
        # Convert symptoms to numeric features, ensuring all 16 features are present
        features = [
            age,
            gender_numeric,
            symptoms.get('fever', 0),
            symptoms.get('cough', 0),
            symptoms.get('fatigue', 0),
            symptoms.get('headache', 0),
            symptoms.get('sore_throat', 0),
            symptoms.get('runny_nose', 0),
            symptoms.get('body_ache', 0),
            symptoms.get('nausea', 0),
            symptoms.get('vomiting', 0),
            symptoms.get('diarrhea', 0),
            symptoms.get('shortness_breath', 0),
            symptoms.get('chest_pain', 0),
            symptoms.get('rash', 0),
            symptoms.get('joint_pain', 0)
        ]
        
        # Make prediction
        prediction = self.model.predict([features])[0]
        confidence = np.max(self.model.predict_proba([features])[0])
        
        return prediction, confidence
</file>

<file path="services/laboratory_service/disease_prediction/migrations/__init__.py">
# This file is intentionally left empty to mark the directory as a Python package.
</file>

<file path="services/laboratory_service/disease_prediction/models/__init__.py">
# This file is intentionally left empty to mark the directory as a Python package.
</file>

<file path="services/laboratory_service/disease_prediction/models/prediction.py">
from django.db import models

class DiseasePrediction(models.Model):
    patient_id = models.CharField(max_length=100)
    age = models.IntegerField()
    gender = models.CharField(max_length=10)
    symptoms = models.JSONField()
    lab_results = models.JSONField()
    predicted_disease = models.CharField(max_length=100)
    confidence_score = models.FloatField()
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        db_table = 'disease_predictions'
</file>

<file path="services/laboratory_service/disease_prediction/serializers/__init__.py">
# This file is intentionally left empty to mark the directory as a Python package.
</file>

<file path="services/laboratory_service/disease_prediction/serializers/prediction.py">
from rest_framework import serializers
from disease_prediction.models.prediction import DiseasePrediction

class DiseasePredictionSerializer(serializers.ModelSerializer):
    class Meta:
        model = DiseasePrediction
        fields = '__all__'
        read_only_fields = ('created_at', 'updated_at')
</file>

<file path="services/laboratory_service/disease_prediction/views/__init__.py">
# This file is intentionally left empty to mark the directory as a Python package.
</file>

<file path="services/laboratory_service/disease_prediction/views/prediction.py">
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from disease_prediction.serializers.prediction import DiseasePredictionSerializer
from disease_prediction.models.prediction import DiseasePrediction
from disease_prediction.ai_models.predictor import DiseasePredictor
from drf_yasg.utils import swagger_auto_schema
from drf_yasg import openapi

class DiseasePredictionView(APIView):
    @swagger_auto_schema(
        operation_description="Predict disease based on patient data",
        request_body=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            required=['patient_id', 'age', 'gender'],
            properties={
                'patient_id': openapi.Schema(type=openapi.TYPE_STRING, description='Patient ID'),
                'age': openapi.Schema(type=openapi.TYPE_INTEGER, description='Patient age'),
                'gender': openapi.Schema(type=openapi.TYPE_STRING, description='Patient gender (male/female)'),
                'symptoms': openapi.Schema(
                    type=openapi.TYPE_OBJECT,
                    properties={
                        'fever': openapi.Schema(type=openapi.TYPE_BOOLEAN, description='Has fever'),
                        'cough': openapi.Schema(type=openapi.TYPE_BOOLEAN, description='Has cough'),
                        'fatigue': openapi.Schema(type=openapi.TYPE_BOOLEAN, description='Has fatigue'),
                        'headache': openapi.Schema(type=openapi.TYPE_BOOLEAN, description='Has headache'),
                        'sore_throat': openapi.Schema(type=openapi.TYPE_BOOLEAN, description='Has sore throat'),
                        'runny_nose': openapi.Schema(type=openapi.TYPE_BOOLEAN, description='Has runny nose'),
                        'body_ache': openapi.Schema(type=openapi.TYPE_BOOLEAN, description='Has body ache'),
                        'nausea': openapi.Schema(type=openapi.TYPE_BOOLEAN, description='Has nausea'),
                        'vomiting': openapi.Schema(type=openapi.TYPE_BOOLEAN, description='Has vomiting'),
                        'diarrhea': openapi.Schema(type=openapi.TYPE_BOOLEAN, description='Has diarrhea'),
                        'shortness_breath': openapi.Schema(type=openapi.TYPE_BOOLEAN, description='Has shortness of breath'),
                        'chest_pain': openapi.Schema(type=openapi.TYPE_BOOLEAN, description='Has chest pain'),
                        'rash': openapi.Schema(type=openapi.TYPE_BOOLEAN, description='Has rash'),
                        'joint_pain': openapi.Schema(type=openapi.TYPE_BOOLEAN, description='Has joint pain'),
                    }
                ),
                'lab_results': openapi.Schema(
                    type=openapi.TYPE_OBJECT,
                    properties={
                        'wbc_count': openapi.Schema(type=openapi.TYPE_NUMBER, description='White blood cell count'),
                        'rbc_count': openapi.Schema(type=openapi.TYPE_NUMBER, description='Red blood cell count'),
                        'hemoglobin': openapi.Schema(type=openapi.TYPE_NUMBER, description='Hemoglobin level'),
                    }
                ),
            },
        ),
        responses={
            201: DiseasePredictionSerializer,
            400: 'Bad Request - Missing required fields',
        }
    )
    def post(self, request):
        # Get data from request
        patient_id = request.data.get('patient_id')
        age = request.data.get('age')
        gender = request.data.get('gender')
        symptoms = request.data.get('symptoms', {})
        lab_results = request.data.get('lab_results', {})

        # Validate required fields
        if not all([patient_id, age, gender]):
            return Response(
                {'error': 'Missing required fields: patient_id, age, gender'},
                status=status.HTTP_400_BAD_REQUEST
            )

        # Get prediction from AI model
        predictor = DiseasePredictor()
        predicted_disease, confidence_score = predictor.predict(age, gender, symptoms, lab_results)

        # Create prediction record
        prediction = DiseasePrediction.objects.create(
            patient_id=patient_id,
            age=age,
            gender=gender,
            symptoms=symptoms,
            lab_results=lab_results,
            predicted_disease=predicted_disease,
            confidence_score=confidence_score
        )

        # Serialize and return response
        serializer = DiseasePredictionSerializer(prediction)
        return Response(serializer.data, status=status.HTTP_201_CREATED)
</file>

<file path="services/laboratory_service/disease_prediction/__init__.py">
# This file is intentionally left empty to mark the directory as a Python package.
</file>

<file path="services/laboratory_service/disease_prediction/apps.py">
from django.apps import AppConfig


class DiseasePredictionConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'disease_prediction'
</file>

<file path="services/laboratory_service/laboratory_service/__init__.py">
# This file is intentionally left empty to mark the directory as a Python package.
</file>

<file path="services/laboratory_service/laboratory_service/asgi.py">
"""
ASGI config for laboratory_service project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'laboratory_service.settings')

application = get_asgi_application()
</file>

<file path="services/laboratory_service/laboratory_service/settings.py">
import os
from pathlib import Path

BASE_DIR = Path(__file__).resolve().parent.parent

SECRET_KEY = 'django-insecure-your-secret-key-here'

DEBUG = True

ALLOWED_HOSTS = ['*']

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'drf_yasg',
    'corsheaders',
    'disease_prediction.apps.DiseasePredictionConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'laboratory_service.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'laboratory_service.wsgi.application'

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

STATIC_URL = 'static/'
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10
}

# Swagger settings
SWAGGER_SETTINGS = {
    'SECURITY_DEFINITIONS': {
        'Bearer': {
            'type': 'apiKey',
            'name': 'Authorization',
            'in': 'header'
        }
    },
    'USE_SESSION_AUTH': False,
}

REDOC_SETTINGS = {
    'LAZY_RENDERING': False,
}

# CORS settings
CORS_ALLOW_ALL_ORIGINS = True  # For development only
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",  # React frontend
    "http://127.0.0.1:3000",  # React frontend alternative
]
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

# Disable APPEND_SLASH to prevent redirect issues with POST requests
APPEND_SLASH = False
</file>

<file path="services/laboratory_service/laboratory_service/urls.py">
from django.contrib import admin
from django.urls import path, re_path
from disease_prediction.views.prediction import DiseasePredictionView
from rest_framework import permissions
from drf_yasg.views import get_schema_view
from drf_yasg import openapi

schema_view = get_schema_view(
   openapi.Info(
      title="Laboratory Service API",
      default_version='v1',
      description="API documentation for the Laboratory Service",
      terms_of_service="https://www.google.com/policies/terms/",
      contact=openapi.Contact(email="contact@laboratory.com"),
      license=openapi.License(name="BSD License"),
   ),
   public=True,
   permission_classes=(permissions.AllowAny,),
)

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/predict/', DiseasePredictionView.as_view(), name='predict-disease'),
    
    # Swagger documentation URLs
    re_path(r'^swagger(?P<format>\.json|\.yaml)$', schema_view.without_ui(cache_timeout=0), name='schema-json'),
    path('swagger/', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'),
    path('redoc/', schema_view.with_ui('redoc', cache_timeout=0), name='schema-redoc'),
]
</file>

<file path="services/laboratory_service/laboratory_service/wsgi.py">
"""
WSGI config for laboratory_service project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'laboratory_service.settings')

application = get_wsgi_application()
</file>

<file path="services/laboratory_service/Dockerfile">
FROM python:3.9-slim

WORKDIR /app

COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

COPY . .

EXPOSE 8000

# Create a startup script
RUN echo '#!/bin/bash\n\
python manage.py migrate\n\
python manage.py runserver 0.0.0.0:8000' > /app/start.sh && \
chmod +x /app/start.sh

CMD ["/app/start.sh"]
</file>

<file path="services/laboratory_service/manage.py">
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'laboratory_service.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()
</file>

<file path="services/laboratory_service/readme.md">
1. Flu:
```json
{
    "patient_id": "FLU001",
    "age": 30,
    "gender": "male",
    "symptoms": {
        "fever": true,
        "cough": true,
        "fatigue": true,
        "headache": true,
        "sore_throat": true,
        "runny_nose": true,
        "body_ache": true,
        "nausea": false,
        "vomiting": false,
        "diarrhea": false,
        "shortness_breath": false,
        "chest_pain": false,
        "rash": false,
        "joint_pain": false
    },
    "lab_results": {
        "wbc_count": 12000,
        "rbc_count": 4.5,
        "hemoglobin": 14.5
    }
}
```

2. COVID-19
```json
{
    "patient_id": "COVID001",
    "age": 35,
    "gender": "female",
    "symptoms": {
        "fever": true,
        "cough": true,
        "fatigue": true,
        "headache": true,
        "sore_throat": false,
        "runny_nose": false,
        "body_ache": true,
        "nausea": false,
        "vomiting": false,
        "diarrhea": false,
        "shortness_breath": true,
        "chest_pain": true,
        "rash": false,
        "joint_pain": false
    },
    "lab_results": {
        "wbc_count": 8000,
        "rbc_count": 4.2,
        "hemoglobin": 13.8
    }
}
```

3. Common Cold
```json
{
    "patient_id": "COLD001",
    "age": 25,
    "gender": "male",
    "symptoms": {
        "fever": false,
        "cough": true,
        "fatigue": false,
        "headache": false,
        "sore_throat": true,
        "runny_nose": true,
        "body_ache": false,
        "nausea": false,
        "vomiting": false,
        "diarrhea": false,
        "shortness_breath": false,
        "chest_pain": false,
        "rash": false,
        "joint_pain": false
    },
    "lab_results": {
        "wbc_count": 9000,
        "rbc_count": 4.7,
        "hemoglobin": 15.0
    }
}
```

4. Dengue Fever
```json
{
    "patient_id": "DENG001",
    "age": 28,
    "gender": "female",
    "symptoms": {
        "fever": true,
        "cough": false,
        "fatigue": true,
        "headache": true,
        "sore_throat": false,
        "runny_nose": false,
        "body_ache": true,
        "nausea": true,
        "vomiting": true,
        "diarrhea": true,
        "shortness_breath": false,
        "chest_pain": false,
        "rash": true,
        "joint_pain": true
    },
    "lab_results": {
        "wbc_count": 3000,
        "rbc_count": 3.8,
        "hemoglobin": 12.5
    }
}
```

5. Malaria

```json
{
    "patient_id": "MAL001",
    "age": 40,
    "gender": "male",
    "symptoms": {
        "fever": true,
        "cough": false,
        "fatigue": true,
        "headache": true,
        "sore_throat": false,
        "runny_nose": false,
        "body_ache": true,
        "nausea": true,
        "vomiting": true,
        "diarrhea": false,
        "shortness_breath": false,
        "chest_pain": false,
        "rash": false,
        "joint_pain": false
    },
    "lab_results": {
        "wbc_count": 5000,
        "rbc_count": 3.5,
        "hemoglobin": 11.8
    }
}
```

6. Typhoid

```json
{
    "patient_id": "TYP001",
    "age": 22,
    "gender": "female",
    "symptoms": {
        "fever": true,
        "cough": false,
        "fatigue": true,
        "headache": true,
        "sore_throat": false,
        "runny_nose": false,
        "body_ache": true,
        "nausea": true,
        "vomiting": true,
        "diarrhea": true,
        "shortness_breath": false,
        "chest_pain": false,
        "rash": false,
        "joint_pain": false
    },
    "lab_results": {
        "wbc_count": 4000,
        "rbc_count": 3.2,
        "hemoglobin": 10.5
    }
}
```

7. Pneumonia

```json
{
    "patient_id": "PNE001",
    "age": 55,
    "gender": "male",
    "symptoms": {
        "fever": true,
        "cough": true,
        "fatigue": true,
        "headache": false,
        "sore_throat": false,
        "runny_nose": false,
        "body_ache": true,
        "nausea": false,
        "vomiting": false,
        "diarrhea": false,
        "shortness_breath": true,
        "chest_pain": true,
        "rash": false,
        "joint_pain": false
    },
    "lab_results": {
        "wbc_count": 15000,
        "rbc_count": 4.0,
        "hemoglobin": 13.0
    }
}
```

8. Bronchitis
```json
{
    "patient_id": "BRON001",
    "age": 35,
    "gender": "female",
    "symptoms": {
        "fever": true,
        "cough": true,
        "fatigue": true,
        "headache": false,
        "sore_throat": true,
        "runny_nose": true,
        "body_ache": false,
        "nausea": false,
        "vomiting": false,
        "diarrhea": false,
        "shortness_breath": true,
        "chest_pain": false,
        "rash": false,
        "joint_pain": false
    },
    "lab_results": {
        "wbc_count": 11000,
        "rbc_count": 4.3,
        "hemoglobin": 14.0
    }
}
```

9. Gastroenteritis

```json
{
    "patient_id": "GAST001",
    "age": 30,
    "gender": "male",
    "symptoms": {
        "fever": false,
        "cough": false,
        "fatigue": true,
        "headache": false,
        "sore_throat": false,
        "runny_nose": false,
        "body_ache": true,
        "nausea": true,
        "vomiting": true,
        "diarrhea": true,
        "shortness_breath": false,
        "chest_pain": false,
        "rash": false,
        "joint_pain": false
    },
    "lab_results": {
        "wbc_count": 10000,
        "rbc_count": 4.1,
        "hemoglobin": 13.5
    }
}
```

10. Arthritis

```json
{
    "patient_id": "ARTH001",
    "age": 65,
    "gender": "female",
    "symptoms": {
        "fever": false,
        "cough": false,
        "fatigue": true,
        "headache": false,
        "sore_throat": false,
        "runny_nose": false,
        "body_ache": false,
        "nausea": false,
        "vomiting": false,
        "diarrhea": false,
        "shortness_breath": false,
        "chest_pain": false,
        "rash": false,
        "joint_pain": true
    },
    "lab_results": {
        "wbc_count": 8000,
        "rbc_count": 4.0,
        "hemoglobin": 12.8
    }
}
```

---

The disease prediction system uses a Random Forest Classifier, which is a type of machine learning algorithm. Let me explain the key aspects of this AI approach:
1. Type of AI/ML:
    * This is a Supervised Machine Learning model
    * Specifically, it's a Classification model (predicts discrete categories - in this case, disease types)
    * Uses Random Forest algorithm, which is an ensemble learning method
2. Random Forest Characteristics:
    * It's an ensemble of multiple decision trees
    * Each tree makes its own prediction, and the final prediction is based on majority voting
    * The model uses 100 trees (n_estimators=100)
    * Uses a random seed of 42 (random_state=42) for reproducibility
3. Features Used:
    - 16 input features:
        * Age (numeric)
        * Gender (binary: 1 for male, 0 for female)
        * Fever (binary)
        * Cough (binary)
        * Fatigue (binary)
        * Headache (binary)
        * Sore throat (binary)
        * Runny nose (binary)
        * Body ache (binary)
        * Nausea (binary)
        * Vomiting (binary)
        * Diarrhea (binary)
        * Shortness of breath (binary)
        * Chest pain (binary)
        * Rash (binary)
        * Joint pain (binary)
    - Output: Predicts one of 10 possible diseases:
        * Flu
        * COVID-19
        * Common Cold
        * Dengue Fever
        * Malaria
        * Typhoid
        * Pneumonia
        * Bronchitis
        * Gastroenteritis
        * Arthritis
        * Also provides a confidence score (probability) for        * the prediction
    - Training Data:
        - Currently uses synthetic/simulated data
        - 20 training examples (2 examples per disease)
        - Each example has all 16 features
    - Model Persistence:
        - Uses joblib to save and load the trained model
        - Model is saved as disease_model.joblib
        - If the model file exists, it loads the saved model; otherwise, it creates a new one
</file>

<file path="services/laboratory_service/requirements.txt">
Django==4.2.7
djangorestframework==3.14.0
pymongo==4.6.1
scikit-learn==1.3.2
pandas==2.1.3
numpy==1.26.2
python-dotenv==1.0.0
gunicorn==21.2.0
drf-yasg==1.21.7
django-cors-headers==4.3.1
</file>

<file path="services/laboratory_service/setup.sh">
#!/bin/bash

# Create Django project
django-admin startproject laboratory_service .

# Create app
python manage.py startapp disease_prediction

# Create necessary directories
mkdir -p disease_prediction/models
mkdir -p disease_prediction/serializers
mkdir -p disease_prediction/views
mkdir -p disease_prediction/ai_models
</file>

<file path="services/patient_service/patient_service/asgi.py">
"""
ASGI config for patient-service project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'patient_service.settings')

application = get_asgi_application()
</file>

<file path="services/patient_service/patient_service/urls.py">
"""
URL configuration for patient-service project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/5.2/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path, include
from drf_yasg.views import get_schema_view
from drf_yasg import openapi
from rest_framework import permissions

schema_view = get_schema_view(
    openapi.Info(
        title="Patient Service API",
        default_version='v1',
        description="API documentation for Patient Service",
    ),
    public=True,
    permission_classes=(permissions.AllowAny,),
)

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/patients/', include('patients.urls')),
    
    # Swagger documentation
    path('swagger/', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'),
    path('redoc/', schema_view.with_ui('redoc', cache_timeout=0), name='schema-redoc'),
]
</file>

<file path="services/patient_service/patient_service/wsgi.py">
"""
WSGI config for patient-service project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'patient_service.settings')

application = get_wsgi_application()
</file>

<file path="services/patient_service/patients/fixtures/fake_data.sql">
-- Clear existing data
DELETE FROM patients_patient;
DELETE FROM patients_user;

-- Insert Users (Patients and Doctors)
INSERT INTO patients_user (id, email, password, role, is_active, created_at, updated_at)
VALUES
    -- Admin user
    ('11111111-1111-1111-1111-111111111111', 'admin@healthcare.com', 'pbkdf2_sha256$600000$hashed_password', 'admin', true, NOW(), NOW()),
    
    -- Doctor users
    ('22222222-2222-2222-2222-222222222222', 'dr.smith@healthcare.com', 'pbkdf2_sha256$600000$hashed_password', 'doctor', true, NOW(), NOW()),
    ('33333333-3333-3333-3333-333333333333', 'dr.johnson@healthcare.com', 'pbkdf2_sha256$600000$hashed_password', 'doctor', true, NOW(), NOW()),
    ('44444444-4444-4444-4444-444444444444', 'dr.williams@healthcare.com', 'pbkdf2_sha256$600000$hashed_password', 'doctor', true, NOW(), NOW()),
    
    -- Patient users
    ('55555555-5555-5555-5555-555555555555', 'john.doe@email.com', 'pbkdf2_sha256$600000$hashed_password', 'patient', true, NOW(), NOW()),
    ('66666666-6666-6666-6666-666666666666', 'jane.smith@email.com', 'pbkdf2_sha256$600000$hashed_password', 'patient', true, NOW(), NOW()),
    ('77777777-7777-7777-7777-777777777777', 'mike.johnson@email.com', 'pbkdf2_sha256$600000$hashed_password', 'patient', true, NOW(), NOW()),
    ('88888888-8888-8888-8888-888888888888', 'sarah.williams@email.com', 'pbkdf2_sha256$600000$hashed_password', 'patient', true, NOW(), NOW()),
    ('99999999-9999-9999-9999-999999999999', 'david.brown@email.com', 'pbkdf2_sha256$600000$hashed_password', 'patient', true, NOW(), NOW());

-- Insert Patient Profiles
INSERT INTO patients_patient (user_id, name, age, gender, phone, address, medical_history, patient_type, preferred_contact_method, timezone, created_at, updated_at)
VALUES
    ('55555555-5555-5555-5555-555555555555', 'John Doe', 35, 'male', '+1234567890', '123 Main St, City', 'Hypertension, Allergies', 'remote', 'email', 'America/New_York', NOW(), NOW()),
    ('66666666-6666-6666-6666-666666666666', 'Jane Smith', 28, 'female', '+1234567891', '456 Oak Ave, Town', 'Asthma', 'offline', 'phone', 'America/Chicago', NOW(), NOW()),
    ('77777777-7777-7777-7777-777777777777', 'Mike Johnson', 42, 'male', '+1234567892', '789 Pine Rd, Village', 'Diabetes Type 2', 'remote', 'video', 'America/Los_Angeles', NOW(), NOW()),
    ('88888888-8888-8888-8888-888888888888', 'Sarah Williams', 31, 'female', '+1234567893', '321 Elm St, City', 'None', 'guest', 'email', 'America/New_York', NOW(), NOW()),
    ('99999999-9999-9999-9999-999999999999', 'David Brown', 45, 'male', '+1234567894', '654 Maple Dr, Town', 'Arthritis', 'offline', 'phone', 'America/Chicago', NOW(), NOW());

-- Insert Appointments (if you have an appointments table)
-- Note: Adjust the table name and fields according to your actual appointments model
INSERT INTO appointments_appointment (patient_id, doctor_id, appointment_date, status, notes, created_at, updated_at)
VALUES
    ('55555555-5555-5555-5555-555555555555', '22222222-2222-2222-2222-222222222222', NOW() + INTERVAL '1 day', 'scheduled', 'Regular checkup', NOW(), NOW()),
    ('66666666-6666-6666-6666-666666666666', '33333333-3333-3333-3333-333333333333', NOW() + INTERVAL '2 days', 'scheduled', 'Follow-up consultation', NOW(), NOW()),
    ('77777777-7777-7777-7777-777777777777', '44444444-4444-4444-4444-444444444444', NOW() + INTERVAL '3 days', 'scheduled', 'Initial consultation', NOW(), NOW());

-- Insert Lab Results (if you have a lab results table)
-- Note: Adjust the table name and fields according to your actual lab results model
INSERT INTO lab_results_labresult (patient_id, test_name, result, test_date, notes, created_at, updated_at)
VALUES
    ('55555555-5555-5555-5555-555555555555', 'Blood Test', 'Normal', NOW() - INTERVAL '7 days', 'Regular checkup results', NOW(), NOW()),
    ('66666666-6666-6666-6666-666666666666', 'X-Ray', 'Clear', NOW() - INTERVAL '14 days', 'Chest X-Ray results', NOW(), NOW()),
    ('77777777-7777-7777-7777-777777777777', 'MRI', 'Normal', NOW() - INTERVAL '21 days', 'Brain MRI results', NOW(), NOW());

-- Insert Medical Records (if you have a medical records table)
-- Note: Adjust the table name and fields according to your actual medical records model
INSERT INTO medical_records_medicalrecord (patient_id, doctor_id, diagnosis, prescription, notes, created_at, updated_at)
VALUES
    ('55555555-5555-5555-5555-555555555555', '22222222-2222-2222-2222-222222222222', 'Hypertension', 'Lisinopril 10mg', 'Regular checkup', NOW(), NOW()),
    ('66666666-6666-6666-6666-666666666666', '33333333-3333-3333-3333-333333333333', 'Asthma', 'Albuterol inhaler', 'Follow-up', NOW(), NOW()),
    ('77777777-7777-7777-7777-777777777777', '44444444-4444-4444-4444-444444444444', 'Diabetes Type 2', 'Metformin 500mg', 'Initial diagnosis', NOW(), NOW());
</file>

<file path="services/patient_service/patients/management/commands/load_fake_data.py">
from django.core.management.base import BaseCommand
from django.contrib.auth import get_user_model
from patients.models import Patient
from django.utils import timezone
import uuid

User = get_user_model()

class Command(BaseCommand):
    help = 'Loads fake data for testing'

    def handle(self, *args, **kwargs):
        self.stdout.write('Clearing existing data...')
        Patient.objects.all().delete()
        User.objects.all().delete()

        self.stdout.write('Creating users...')
        # Create admin user
        admin = User.objects.create_superuser(
            email='admin@healthcare.com',
            password='admin123',
            role='admin'
        )

        # Create doctors
        doctors = [
            User.objects.create_user(
                email='dr.smith@healthcare.com',
                password='doctor123',
                role='doctor'
            ),
            User.objects.create_user(
                email='dr.johnson@healthcare.com',
                password='doctor123',
                role='doctor'
            ),
            User.objects.create_user(
                email='dr.williams@healthcare.com',
                password='doctor123',
                role='doctor'
            ),
        ]

        # Create patients
        patients = [
            User.objects.create_user(
                email='john.doe@email.com',
                password='patient123',
                role='patient'
            ),
            User.objects.create_user(
                email='jane.smith@email.com',
                password='patient123',
                role='patient'
            ),
            User.objects.create_user(
                email='mike.johnson@email.com',
                password='patient123',
                role='patient'
            ),
            User.objects.create_user(
                email='sarah.williams@email.com',
                password='patient123',
                role='patient'
            ),
            User.objects.create_user(
                email='david.brown@email.com',
                password='patient123',
                role='patient'
            ),
        ]

        self.stdout.write('Creating patient profiles...')
        # Create patient profiles
        Patient.objects.create(
            user=patients[0],
            name='John Doe',
            age=35,
            gender='male',
            phone='+1234567890',
            address='123 Main St, City',
            medical_history='Hypertension, Allergies',
            patient_type='remote',
            preferred_contact_method='email',
            timezone='America/New_York'
        )

        Patient.objects.create(
            user=patients[1],
            name='Jane Smith',
            age=28,
            gender='female',
            phone='+1234567891',
            address='456 Oak Ave, Town',
            medical_history='Asthma',
            patient_type='offline',
            preferred_contact_method='phone',
            timezone='America/Chicago'
        )

        Patient.objects.create(
            user=patients[2],
            name='Mike Johnson',
            age=42,
            gender='male',
            phone='+1234567892',
            address='789 Pine Rd, Village',
            medical_history='Diabetes Type 2',
            patient_type='remote',
            preferred_contact_method='video',
            timezone='America/Los_Angeles'
        )

        Patient.objects.create(
            user=patients[3],
            name='Sarah Williams',
            age=31,
            gender='female',
            phone='+1234567893',
            address='321 Elm St, City',
            medical_history='None',
            patient_type='guest',
            preferred_contact_method='email',
            timezone='America/New_York'
        )

        Patient.objects.create(
            user=patients[4],
            name='David Brown',
            age=45,
            gender='male',
            phone='+1234567894',
            address='654 Maple Dr, Town',
            medical_history='Arthritis',
            patient_type='offline',
            preferred_contact_method='phone',
            timezone='America/Chicago'
        )

        self.stdout.write(self.style.SUCCESS('Successfully loaded fake data'))
</file>

<file path="services/patient_service/patients/apps.py">
from django.apps import AppConfig

class PatientsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'patients'
</file>

<file path="services/patient_service/Dockerfile">
FROM python:3.11.9

ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

WORKDIR /app

COPY requirements.txt /app/
RUN pip install -r requirements.txt
RUN mkdir -p /app/staticfiles

COPY . /app/
</file>

<file path="services/patient_service/manage.py">
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'patient_service.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()
</file>

<file path="services/patient_service/README.md">
# Patient Service

This service manages patient profiles and their medical information for the healthcare system.

## API Endpoints

### Get All Patients
- **URL**: `/api/patients/`
- **Method**: `GET`
- **Response**: List of all patients

### Get Patient by ID
- **URL**: `/api/patients/<uuid:user_id>/`
- **Method**: `GET`
- **Response**: Patient details

### Create New Patient
- **URL**: `/api/patients/`
- **Method**: `POST`
- **Body**:
  ```json
  {
    "user_id": "uuid",
    "name": "string",
    "age": "integer",
    "gender": "string (male/female/other)",
    "phone": "string",
    "email": "string",
    "address": "string",
    "medical_history": "string (optional)"
  }
  ```

### Update Patient Profile
- **URL**: `/api/patients/<uuid:user_id>/`
- **Method**: `PUT`
- **Body**: Same as create, but all fields are optional

## API Documentation
- Swagger UI: `/swagger/`
- ReDoc: `/redoc/`

## Development
1. Build and run the service:
   ```bash
   docker-compose up --build
   ```

2. Access the service at: `http://localhost:8000`
</file>

<file path="services/patient_service/requirements.txt">
Django>=4.2,<5.0
djangorestframework>=3.14.0
mysqlclient>=2.1.0
django-environ>=0.10.0
drf-yasg==1.21.5
pyyaml>=6.0
uritemplate>=4.1.1
django-cors-headers>=4.3.1
djangorestframework-simplejwt>=5.3.0
</file>

<file path=".gitignore">
# Created by https://www.gitignore.io
.idea/

### OSX ###
.DS_Store
.AppleDouble
.LSOverride

# Icon must end with two \r
Icon


# Thumbnails
._*

# Files that might appear on external disk
.Spotlight-V100
.Trashes

# Directories potentially created on remote AFP share
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk


### Python ###
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]

# C extensions
*.so

# Distribution / packaging
.Python
env/
build/
develop-eggs/
dist/
downloads/
eggs/
lib/
lib64/
parts/
sdist/
var/
*.egg-info/
.installed.cfg
*.egg

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.coverage
.cache
nosetests.xml
coverage.xml

# Translations
*.mo
*.pot

# Sphinx documentation
docs/_build/

# PyBuilder
target/


### Django ###
*.log
*.pot
*.pyc
__pycache__/
local_settings.py

.env
db.sqlite3

# Staticfiles
**/staticfiles/

# MySQL / InnoDB files
db/*
</file>

<file path="create_patients_table.sql">
USE patient_db;

CREATE TABLE IF NOT EXISTS patients_patient (
    user_id CHAR(36) PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    age INT NOT NULL,
    gender VARCHAR(10) NOT NULL,
    phone VARCHAR(15) NOT NULL,
    email VARCHAR(255) NOT NULL UNIQUE,
    address TEXT NOT NULL,
    medical_history TEXT,
    created_at DATETIME NOT NULL,
    updated_at DATETIME NOT NULL
); 

INSERT INTO patients_patient (user_id, name, age, gender, phone, email, address, medical_history, created_at, updated_at) VALUES
('1', 'John Doe', 30, 'Male', '1234567890', 'john.doe@example.com', '123 Main St, Anytown, USA', 'No medical history', NOW(), NOW());

INSERT INTO patients_patient (user_id, name, age, gender, phone, email, address, medical_history, created_at, updated_at) VALUES
('2', 'Jane Smith', 25, 'Female', '9876543210', 'jane.smith@example.com', '456 Oak Ave, Anytown, USA', 'No medical history', NOW(), NOW());

INSERT INTO patients_patient (user_id, name, age, gender, phone, email, address, medical_history, created_at, updated_at) VALUES
('3', 'Michael Brown', 40, 'Male', '5551234567', 'michael.brown@example.com', '789 Maple St, Anytown, USA', 'No medical history', NOW(), NOW());

INSERT INTO patients_patient (user_id, name, age, gender, phone, email, address, medical_history, created_at, updated_at) VALUES
('4', 'Emily Davis', 35, 'Female', '5557890123', 'emily.davis@example.com', '101 Pine St, Anytown, USA', 'No medical history', NOW(), NOW());
</file>

<file path="init.sql">
-- Create databases
CREATE DATABASE IF NOT EXISTS admin_db;
CREATE DATABASE IF NOT EXISTS doctor_db;
CREATE DATABASE IF NOT EXISTS patient_db;
CREATE DATABASE IF NOT EXISTS chatbot_db;

-- Create user if not exists and grant privileges
CREATE USER IF NOT EXISTS 'user'@'%' IDENTIFIED BY '123456';
GRANT ALL PRIVILEGES ON admin_db.* TO 'user'@'%';
GRANT ALL PRIVILEGES ON doctor_db.* TO 'user'@'%';
GRANT ALL PRIVILEGES ON patient_db.* TO 'user'@'%';
GRANT ALL PRIVILEGES ON chatbot_db.* TO 'user'@'%';
GRANT ALL PRIVILEGES ON user_db.* TO 'user'@'%';

FLUSH PRIVILEGES;
</file>

<file path="package.json">
{
  "dependencies": {
    "@mui/material": "^5.15.0"
  }
}
</file>

<file path="seed_data.sql">
-- Use the appropriate databases
USE patient_db;
USE doctor_db;

-- Seed data for doctors
INSERT INTO doctors (first_name, last_name, email, phone_number, specialization, license_number, years_of_experience, department, created_at, updated_at)
VALUES
    ('John', 'Smith', 'john.smith@hospital.com', '+1234567890', 'Cardiology', 'MD123456', 10, 'Cardiology', NOW(), NOW()),
    ('Sarah', 'Johnson', 'sarah.johnson@hospital.com', '+1234567891', 'Neurology', 'MD123457', 8, 'Neurology', NOW(), NOW()),
    ('Michael', 'Chen', 'michael.chen@hospital.com', '+1234567892', 'Pediatrics', 'MD123458', 12, 'Pediatrics', NOW(), NOW()),
    ('Emily', 'Davis', 'emily.davis@hospital.com', '+1234567893', 'Orthopedics', 'MD123459', 15, 'Orthopedics', NOW(), NOW()),
    ('David', 'Wilson', 'david.wilson@hospital.com', '+1234567894', 'Dermatology', 'MD123460', 7, 'Dermatology', NOW(), NOW());

-- Seed data for patients
INSERT INTO patients (first_name, last_name, email, phone_number, date_of_birth, gender, address, medical_history, created_at, updated_at)
VALUES
    ('Alice', 'Brown', 'alice.brown@email.com', '+1987654321', '1990-05-15', 'FEMALE', '123 Main St, City', 'No significant medical history', NOW(), NOW()),
    ('Robert', 'Taylor', 'robert.taylor@email.com', '+1987654322', '1985-08-22', 'MALE', '456 Oak Ave, Town', 'Hypertension', NOW(), NOW()),
    ('Maria', 'Garcia', 'maria.garcia@email.com', '+1987654323', '1995-03-10', 'FEMALE', '789 Pine Rd, Village', 'Asthma', NOW(), NOW()),
    ('James', 'Anderson', 'james.anderson@email.com', '+1987654324', '1978-11-30', 'MALE', '321 Elm St, City', 'Type 2 Diabetes', NOW(), NOW()),
    ('Lisa', 'Martinez', 'lisa.martinez@email.com', '+1987654325', '1992-07-18', 'FEMALE', '654 Maple Dr, Town', 'No significant medical history', NOW(), NOW()),
    ('William', 'Thompson', 'william.thompson@email.com', '+1987654326', '1982-04-25', 'MALE', '987 Cedar Ln, Village', 'Arthritis', NOW(), NOW()),
    ('Emma', 'White', 'emma.white@email.com', '+1987654327', '1998-09-12', 'FEMALE', '147 Birch St, City', 'No significant medical history', NOW(), NOW()),
    ('Daniel', 'Lee', 'daniel.lee@email.com', '+1987654328', '1975-12-05', 'MALE', '258 Spruce Ave, Town', 'Heart Disease', NOW(), NOW()),
    ('Sophia', 'Clark', 'sophia.clark@email.com', '+1987654329', '1993-06-28', 'FEMALE', '369 Willow Rd, Village', 'Migraine', NOW(), NOW()),
    ('Matthew', 'Rodriguez', 'matthew.rodriguez@email.com', '+1987654330', '1988-02-14', 'MALE', '741 Ash St, City', 'No significant medical history', NOW(), NOW());
</file>

<file path="frontend/src/components/Layout.tsx">
import React from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import {
  AppBar,
  Box,
  CssBaseline,
  Drawer,
  IconButton,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  Toolbar,
  Typography,
  Button,
  Avatar,
  Tooltip,
  Divider
} from '@mui/material';
import { useDispatch, useSelector } from 'react-redux';
import { RootState } from '../store';
import { logout } from '../store/slices/authSlice';
import MenuIcon from '@mui/icons-material/Menu';
import LogoutIcon from '@mui/icons-material/Logout';
import HomeIcon from '@mui/icons-material/Home';
import CalendarMonthIcon from '@mui/icons-material/CalendarMonth';
import QueryStatsIcon from '@mui/icons-material/QueryStats';
import ChatIcon from '@mui/icons-material/Chat';
import PeopleIcon from '@mui/icons-material/People';
import LocalHospitalIcon from '@mui/icons-material/LocalHospital';

const drawerWidth = 240;

const Layout: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const navigate = useNavigate();
  const location = useLocation();
  const dispatch = useDispatch();
  const { user } = useSelector((state: RootState) => state.auth);
  const [mobileOpen, setMobileOpen] = React.useState(false);

  const handleDrawerToggle = () => {
    setMobileOpen(!mobileOpen);
  };

  const handleLogout = () => {
    dispatch(logout());
    navigate('/login');
  };

  const menuItems = [
    { text: 'Home', path: '/', icon: <HomeIcon /> },
    { text: 'Appointments', path: '/appointments', icon: <CalendarMonthIcon /> },
    { text: 'Prediction', path: '/prediction', icon: <QueryStatsIcon /> },
    { text: 'Patients', path: '/patients', icon: <PeopleIcon /> },
    { text: 'Doctors', path: '/doctors', icon: <LocalHospitalIcon /> },
    { text: 'Chatbot', path: '/chatbot', icon: <ChatIcon /> },
  ];

  const drawer = (
    <Box sx={{ height: '100%', display: 'flex', flexDirection: 'column', background: 'linear-gradient(135deg, #e3f2fd 0%, #fce4ec 100%)' }}>
      <Toolbar sx={{ justifyContent: 'center', py: 3 }}>
        <Avatar sx={{ bgcolor: 'primary.main', width: 48, height: 48, mr: 1 }}>
          <LocalHospitalIcon fontSize="large" />
        </Avatar>
        <Typography variant="h6" fontWeight={700} color="primary.main">
          HealthCare
        </Typography>
      </Toolbar>
      <Divider sx={{ mb: 2 }} />
      <List sx={{ flexGrow: 1 }}>
        {menuItems.map((item) => (
          <ListItem
            key={item.text}
            button
            onClick={() => {
              navigate(item.path);
              setMobileOpen(false);
            }}
            sx={{
              backgroundColor: location.pathname === item.path ? 'primary.light' : 'inherit',
              color: location.pathname === item.path ? 'primary.contrastText' : 'text.primary',
              borderRadius: 2,
              mx: 1,
              my: 0.5,
              transition: 'background 0.2s',
              '&:hover': {
                backgroundColor: 'primary.main',
                color: 'primary.contrastText',
              },
            }}
          >
            <ListItemIcon sx={{ color: 'inherit' }}>{item.icon}</ListItemIcon>
            <ListItemText primary={item.text} />
          </ListItem>
        ))}
      </List>
      <Box sx={{ p: 2, textAlign: 'center' }}>
        <Typography variant="body2" color="text.secondary" gutterBottom>
          {user?.email}
        </Typography>
        <Tooltip title="Logout">
          <Button
            color="error"
            variant="contained"
            startIcon={<LogoutIcon />}
            onClick={handleLogout}
            sx={{ borderRadius: 3, fontWeight: 600 }}
            fullWidth
          >
            Logout
          </Button>
        </Tooltip>
      </Box>
    </Box>
  );

  return (
    <Box sx={{ display: 'flex' }}>
      <CssBaseline />
      <AppBar
        position="fixed"
        sx={{
          width: { sm: `calc(100% - ${drawerWidth}px)` },
          ml: { sm: `${drawerWidth}px` },
          bgcolor: 'background.paper',
          boxShadow: 1,
        }}
      >
        <Toolbar>
          <IconButton
            color="inherit"
            aria-label="open drawer"
            edge="start"
            onClick={handleDrawerToggle}
            sx={{ mr: 2, display: { sm: 'none' } }}
          >
            <MenuIcon />
          </IconButton>
          <Typography variant="h6" noWrap component="div" color="text.primary">
            {menuItems.find(item => item.path === location.pathname)?.text || 'Home'}
          </Typography>
        </Toolbar>
      </AppBar>
      <Box
        component="nav"
        sx={{ width: { sm: drawerWidth }, flexShrink: { sm: 0 } }}
      >
        <Drawer
          variant="temporary"
          open={mobileOpen}
          onClose={handleDrawerToggle}
          ModalProps={{
            keepMounted: true,
          }}
          sx={{
            display: { xs: 'block', sm: 'none' },
            '& .MuiDrawer-paper': { boxSizing: 'border-box', width: drawerWidth },
          }}
        >
          {drawer}
        </Drawer>
        <Drawer
          variant="permanent"
          sx={{
            display: { xs: 'none', sm: 'block' },
            '& .MuiDrawer-paper': { boxSizing: 'border-box', width: drawerWidth },
          }}
          open
        >
          {drawer}
        </Drawer>
      </Box>
      <Box
        component="main"
        sx={{
          flexGrow: 1,
          p: 3,
          width: { sm: `calc(100% - ${drawerWidth}px)` },
          minHeight: '100vh',
          bgcolor: 'background.default',
        }}
      >
        <Toolbar />
        {children}
      </Box>
    </Box>
  );
};

export default Layout;
</file>

<file path="frontend/src/hooks/useAuth.ts">
import { useCallback } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAppDispatch } from './useAppDispatch';
import { useAppSelector } from './useAppSelector';
import { setCredentials, setError, logout } from '../store/slices/authSlice';
import { RootState } from '../store';
import { LoginRequest, AuthResponse } from '../types/auth';
import { authService } from '../services/authService';

export const useAuth = () => {
    const dispatch = useAppDispatch();
    const navigate = useNavigate();
    const { isAuthenticated, loading } = useAppSelector((state: RootState) => state.auth);

    const login = useCallback(async (credentials: LoginRequest) => {
        try {
            const response = await authService.login(credentials);
            dispatch(setCredentials(response));
            navigate('/dashboard');
        } catch (error: any) {
            dispatch(setError(error.response?.data?.error || 'Login failed'));
        }
    }, [dispatch, navigate]);

    const handleLogout = useCallback(() => {
        dispatch(logout());
        navigate('/login');
    }, [dispatch, navigate]);

    return {
        isAuthenticated,
        loading,
        login,
        logout: handleLogout,
    };
};
</file>

<file path="frontend/src/services/userService.ts">
import axios from 'axios';
import { Patient, Doctor, CreatePatientDto, CreateDoctorDto, UpdatePatientDto, UpdateDoctorDto } from '../types/user';

// Use relative URL since we're using the proxy
const API_URL = '/api';

// Configure axios defaults
axios.defaults.withCredentials = true;
axios.defaults.headers.common['Content-Type'] = 'application/json';
axios.defaults.headers.common['Accept'] = 'application/json';

// Patient Services
export const patientService = {
    getAll: async (): Promise<Patient[]> => {
        try {
            const response = await axios.get(`${API_URL}/patients/`);
            return response.data;
        } catch (error) {
            if (axios.isAxiosError(error)) {
                console.error('Error fetching patients:', {
                    status: error.response?.status,
                    statusText: error.response?.statusText,
                    data: error.response?.data,
                    headers: error.response?.headers,
                });
            }
            throw error;
        }
    },

    getById: async (id: string): Promise<Patient> => {
        try {
            const response = await axios.get(`${API_URL}/patients/${id}/`);
            return response.data;
        } catch (error) {
            if (axios.isAxiosError(error)) {
                console.error('Error fetching patient:', {
                    status: error.response?.status,
                    statusText: error.response?.statusText,
                    data: error.response?.data,
                });
            }
            throw error;
        }
    },

    create: async (patient: CreatePatientDto): Promise<Patient> => {
        try {
            const response = await axios.post(`${API_URL}/patients/`, patient);
            return response.data;
        } catch (error) {
            if (axios.isAxiosError(error)) {
                console.error('Error creating patient:', {
                    status: error.response?.status,
                    statusText: error.response?.statusText,
                    data: error.response?.data,
                });
            }
            throw error;
        }
    },

    update: async (id: string, patient: UpdatePatientDto): Promise<Patient> => {
        try {
            const response = await axios.put(`${API_URL}/patients/${id}/`, patient);
            return response.data;
        } catch (error) {
            if (axios.isAxiosError(error)) {
                console.error('Error updating patient:', {
                    status: error.response?.status,
                    statusText: error.response?.statusText,
                    data: error.response?.data,
                });
            }
            throw error;
        }
    },

    delete: async (id: string): Promise<void> => {
        try {
            await axios.delete(`${API_URL}/patients/${id}/`);
        } catch (error) {
            if (axios.isAxiosError(error)) {
                console.error('Error deleting patient:', {
                    status: error.response?.status,
                    statusText: error.response?.statusText,
                    data: error.response?.data,
                });
            }
            throw error;
        }
    }
};

// Doctor Services
export const doctorService = {
    getAll: async (): Promise<Doctor[]> => {
        try {
            const response = await axios.get(`${API_URL}/doctors/`);
            return response.data;
        } catch (error) {
            if (axios.isAxiosError(error)) {
                console.error('Error fetching doctors:', {
                    status: error.response?.status,
                    statusText: error.response?.statusText,
                    data: error.response?.data,
                });
            }
            throw error;
        }
    },

    getById: async (id: string): Promise<Doctor> => {
        try {
            const response = await axios.get(`${API_URL}/doctors/${id}/`);
            return response.data;
        } catch (error) {
            if (axios.isAxiosError(error)) {
                console.error('Error fetching doctor:', {
                    status: error.response?.status,
                    statusText: error.response?.statusText,
                    data: error.response?.data,
                });
            }
            throw error;
        }
    },

    create: async (doctor: CreateDoctorDto): Promise<Doctor> => {
        try {
            console.log('Creating doctor with data:', JSON.stringify(doctor, null, 2));
            const response = await axios.post(`${API_URL}/doctors/`, doctor);
            console.log('Server response:', response.data);
            return response.data;
        } catch (error) {
            if (axios.isAxiosError(error)) {
                console.error('Error creating doctor:', {
                    status: error.response?.status,
                    statusText: error.response?.statusText,
                    data: error.response?.data,
                    headers: error.response?.headers,
                });
            }
            throw error;
        }
    },

    update: async (id: string, doctor: UpdateDoctorDto): Promise<Doctor> => {
        try {
            const response = await axios.put(`${API_URL}/doctors/${id}/`, doctor);
            return response.data;
        } catch (error) {
            if (axios.isAxiosError(error)) {
                console.error('Error updating doctor:', {
                    status: error.response?.status,
                    statusText: error.response?.statusText,
                    data: error.response?.data,
                });
            }
            throw error;
        }
    },

    delete: async (id: string): Promise<void> => {
        try {
            await axios.delete(`${API_URL}/doctors/${id}/`);
        } catch (error) {
            if (axios.isAxiosError(error)) {
                console.error('Error deleting doctor:', {
                    status: error.response?.status,
                    statusText: error.response?.statusText,
                    data: error.response?.data,
                });
            }
            throw error;
        }
    }
};
</file>

<file path="frontend/src/store/slices/authSlice.ts">
import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import { AuthState, User } from '../../types/auth';

const initialState: AuthState = {
    user: null,
    access: localStorage.getItem('access'),
    refresh: localStorage.getItem('refresh'),
    isAuthenticated: !!localStorage.getItem('access'),
    loading: false,
    error: null
};

const authSlice = createSlice({
    name: 'auth',
    initialState,
    reducers: {
        setCredentials: (state, action: PayloadAction<{ user: User; access: string; refresh: string }>) => {
            state.user = action.payload.user;
            state.access = action.payload.access;
            state.refresh = action.payload.refresh;
            state.isAuthenticated = true;
            state.error = null;
        },
        setLoading: (state, action: PayloadAction<boolean>) => {
            state.loading = action.payload;
        },
        setError: (state, action: PayloadAction<string | null>) => {
            state.error = action.payload;
        },
        logout: (state) => {
            state.user = null;
            state.access = null;
            state.refresh = null;
            state.isAuthenticated = false;
            state.error = null;
        }
    }
});

export const { setCredentials, setLoading, setError, logout } = authSlice.actions;
export default authSlice.reducer;
</file>

<file path="frontend/src/types/appointment.ts">
export interface Appointment {
  id: string;
  patient_id: string;
  doctor_id: string;
  date: string;
  time: string;
  status: 'scheduled' | 'completed' | 'cancelled';
  notes?: string;
  service_type: string;
  duration: number;
}

export interface AppointmentResponse {
  status: number;
  data: Appointment | Appointment[];
  message?: string;
}
</file>

<file path="frontend/src/types/user.ts">
export interface Patient {
    id: string;
    user_id: string;
    name: string;
    age: number;
    gender: 'male' | 'female' | 'other';
    phone: string;
    address: string;
    medical_history?: string | null;
    patient_type: 'current' | 'remote' | 'emergency' | 'referral' | 'chronic' | 'preventive';
    preferred_contact_method?: 'phone' | 'email' | 'video' | null;
    timezone?: string | null;
    created_at: string;
    updated_at: string;
}

export interface Doctor {
    id: string;
    user_id: string;
    name?: string;
    specialization: string;
    license_number: string;
    years_of_experience: number;
    education: string;
    certifications?: string | null;
    languages: string;
    schedules?: any[];
    created_at: string;
    updated_at: string;
}

export interface CreatePatientDto {
    name: string;
    age: number;
    gender: 'male' | 'female' | 'other';
    phone: string;
    address: string;
    medical_history?: string;
    patient_type: 'current' | 'remote' | 'emergency' | 'referral' | 'chronic' | 'preventive';
    preferred_contact_method?: 'phone' | 'email' | 'video';
    timezone?: string;
}

export interface CreateDoctorDto {
    name: string;
    specialization: string;
    license_number: string;
    years_of_experience: number;
    education: string;
    certifications?: string;
    languages: string;
}

export interface UpdatePatientDto extends Partial<CreatePatientDto> {}
export interface UpdateDoctorDto extends Partial<CreateDoctorDto> {}
</file>

<file path="frontend/src/App.tsx">
import React from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import { useSelector } from 'react-redux';
import { RootState } from './store';
import Layout from './components/Layout';
import { Login } from './components/auth/Login';
import { Register } from './components/auth/Register';
import Home from './pages/Home';
import Appointments from './pages/Appointments';
import { PatientManagement } from './pages/PatientManagement';
import { DoctorManagement } from './pages/DoctorManagement';
import Chatbot from './pages/Chatbot';

interface ProtectedRouteProps {
    children: React.ReactNode;
}

const ProtectedRoute: React.FC<ProtectedRouteProps> = ({ children }) => {
    const { isAuthenticated } = useSelector((state: RootState) => state.auth);
    
    if (!isAuthenticated) {
        return <Navigate to="/login" />;
    }

    return <Layout>{children}</Layout>;
};

const App: React.FC = () => {
    const { isAuthenticated } = useSelector((state: RootState) => state.auth);

    return (
        <Router>
            <Routes>
                {/* Public routes */}
                <Route 
                    path="/login" 
                    element={isAuthenticated ? <Navigate to="/" /> : <Login />} 
                />
                <Route 
                    path="/register" 
                    element={isAuthenticated ? <Navigate to="/" /> : <Register />} 
                />

                {/* Protected routes */}
                <Route
                    path="/"
                    element={
                        <ProtectedRoute>
                            <Home />
                        </ProtectedRoute>
                    }
                />
                <Route
                    path="/appointments"
                    element={
                        <ProtectedRoute>
                            <Appointments />
                        </ProtectedRoute>
                    }
                />
                <Route
                    path="/patients"
                    element={
                        <ProtectedRoute>
                            <PatientManagement />
                        </ProtectedRoute>
                    }
                />
                <Route
                    path="/doctors"
                    element={
                        <ProtectedRoute>
                            <DoctorManagement />
                        </ProtectedRoute>
                    }
                />
                <Route
                    path="/chatbot"
                    element={
                        <ProtectedRoute>
                            <Chatbot />
                        </ProtectedRoute>
                    }
                />

                {/* Catch all route */}
                <Route path="*" element={<Navigate to="/" />} />
            </Routes>
        </Router>
    );
};

export default App;
</file>

<file path="frontend/src/index.tsx">
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';
import { ThemeProvider, CssBaseline } from '@mui/material';
import theme from './theme';
import { Provider } from 'react-redux';
import { store } from './store';

const root = ReactDOM.createRoot(
  document.getElementById('root') as HTMLElement
);
root.render(
  <React.StrictMode>
    <ThemeProvider theme={theme}>
      <CssBaseline />
      <Provider store={store}>
        <App />
      </Provider>
    </ThemeProvider>
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();
</file>

<file path="services/doctor_service/doctor/models.py">
from django.db import models
from django.contrib.auth.models import AbstractBaseUser, PermissionsMixin
from .managers import UserManager
import uuid

class User(AbstractBaseUser, PermissionsMixin):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    email = models.EmailField(unique=True)
    username = models.CharField(max_length=150, unique=True)
    role = models.CharField(max_length=20, choices=[('patient', 'Patient'), ('doctor', 'Doctor'), ('admin', 'Admin')])
    is_active = models.BooleanField(default=True)
    is_staff = models.BooleanField(default=False)
    date_joined = models.DateTimeField(auto_now_add=True)
    groups = models.ManyToManyField(
        'auth.Group',
        related_name='doctor_user_set',
        blank=True,
        help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',
        verbose_name='groups',
    )
    user_permissions = models.ManyToManyField(
        'auth.Permission',
        related_name='doctor_user_set',
        blank=True,
        help_text='Specific permissions for this user.',
        verbose_name='user permissions',
    )

    objects = UserManager()

    USERNAME_FIELD = 'email'
    REQUIRED_FIELDS = ['username', 'role']

    def get_full_name(self):
        return self.username

    def get_short_name(self):
        return self.username

    def __str__(self):
        return self.username

class Doctor(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    user_id = models.UUIDField(unique=True)  # Reference to user service
    specialization = models.CharField(max_length=100)
    license_number = models.CharField(max_length=50, unique=True)
    years_of_experience = models.IntegerField()
    education = models.TextField()
    certifications = models.TextField(blank=True, null=True)
    languages = models.CharField(max_length=200)  # Comma-separated list of languages
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"Dr. {self.user_id} - {self.specialization}"

class Schedule(models.Model):
    doctor = models.ForeignKey(Doctor, on_delete=models.CASCADE, related_name='schedules')
    day_of_week = models.IntegerField(choices=[
        (0, 'Monday'),
        (1, 'Tuesday'),
        (2, 'Wednesday'),
        (3, 'Thursday'),
        (4, 'Friday'),
        (5, 'Saturday'),
        (6, 'Sunday')
    ])
    start_time = models.TimeField()
    end_time = models.TimeField()
    is_available = models.BooleanField(default=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        unique_together = ('doctor', 'day_of_week')

    def __str__(self):
        return f"{self.doctor} - {self.get_day_of_week_display()} ({self.start_time} - {self.end_time})"
</file>

<file path="services/doctor_service/doctor/serializers.py">
from rest_framework import serializers
from .models import Doctor, Schedule, User
from django.contrib.auth.password_validation import validate_password

class ScheduleSerializer(serializers.ModelSerializer):
    class Meta:
        model = Schedule
        fields = ('id', 'day_of_week', 'start_time', 'end_time', 'is_available', 'created_at', 'updated_at')
        read_only_fields = ('id', 'created_at', 'updated_at')

class DoctorSerializer(serializers.ModelSerializer):
    schedules = ScheduleSerializer(many=True, read_only=True)
    languages = serializers.CharField(required=True)
    name = serializers.SerializerMethodField()
    email = serializers.SerializerMethodField()

    class Meta:
        model = Doctor
        fields = ('id', 'user_id', 'name', 'email', 'specialization', 'license_number', 'years_of_experience',
                 'education', 'certifications', 'languages', 'schedules', 'created_at', 'updated_at')
        read_only_fields = ('id', 'user_id', 'name', 'email', 'created_at', 'updated_at')
        extra_kwargs = {
            'specialization': {'required': True},
            'license_number': {'required': True},
            'years_of_experience': {'required': True, 'min_value': 0},
            'education': {'required': True},
            'languages': {'required': True}
        }

    def get_name(self, obj):
        try:
            user = User.objects.get(id=obj.user_id)
            return user.username
        except User.DoesNotExist:
            return None

    def get_email(self, obj):
        try:
            user = User.objects.get(id=obj.user_id)
            return user.email
        except User.DoesNotExist:
            return None

    def validate_languages(self, value):
        if isinstance(value, list):
            return ', '.join(value)
        return value

class RegisterSerializer(serializers.ModelSerializer):
    password = serializers.CharField(write_only=True)
    specialization = serializers.CharField(required=True)
    license_number = serializers.CharField(required=True)
    years_of_experience = serializers.IntegerField(required=True)
    education = serializers.CharField(required=True)
    languages = serializers.CharField(required=True)

    class Meta:
        model = User
        fields = ('email', 'password', 'username', 'role', 'specialization', 
                 'license_number', 'years_of_experience', 'education', 'languages')
        extra_kwargs = {
            'password': {'write_only': True},
            'role': {'default': 'doctor'}
        }

    def create(self, validated_data):
        user = User.objects.create_user(
            email=validated_data['email'],
            username=validated_data['username'],
            password=validated_data['password'],
            role='doctor'
        )
        return user

class LoginSerializer(serializers.Serializer):
    email = serializers.EmailField()
    password = serializers.CharField(write_only=True)
</file>

<file path="services/doctor_service/doctor/urls.py">
from django.urls import path

from .views import (
    DoctorListCreateView,
    DoctorRetrieveUpdateView,
    ScheduleListCreateView,
    ScheduleRetrieveUpdateView,
)

urlpatterns = [
    path('', DoctorListCreateView.as_view(), name='doctor-list-create'),
    path('profile/', DoctorRetrieveUpdateView.as_view(), name='doctor-profile'),
    path('schedules/', ScheduleListCreateView.as_view(), name='schedule-list-create'),
    path('schedules/<uuid:pk>/', ScheduleRetrieveUpdateView.as_view(), name='schedule-detail'),
]
</file>

<file path="services/doctor_service/doctor/views.py">
from rest_framework import generics, status
from rest_framework.response import Response
from rest_framework.views import APIView
from rest_framework.permissions import AllowAny, IsAuthenticated
from rest_framework_simplejwt.tokens import RefreshToken
from django.contrib.auth import authenticate
import logging
import json
import requests
from django.http import Http404

from .models import Doctor, Schedule
from .serializers import DoctorSerializer, ScheduleSerializer, RegisterSerializer, LoginSerializer

logger = logging.getLogger(__name__)

class RegisterView(generics.CreateAPIView):
    permission_classes = (AllowAny,)
    serializer_class = RegisterSerializer

    def post(self, request, *args, **kwargs):
        try:
            serializer = self.get_serializer(data=request.data)
            serializer.is_valid(raise_exception=True)
            user = serializer.save()
            
            return Response({
                'message': 'Doctor registered successfully',
                'user': {
                    'id': str(user.id),
                    'email': user.email,
                    'role': user.role
                }
            }, status=status.HTTP_201_CREATED)
        except Exception as e:
            logger.error(f"Registration error: {str(e)}")
            return Response(
                {'error': str(e)},
                status=status.HTTP_400_BAD_REQUEST
            )

class LoginView(generics.CreateAPIView):
    permission_classes = (AllowAny,)
    serializer_class = LoginSerializer

    def post(self, request, *args, **kwargs):
        try:
            serializer = self.get_serializer(data=request.data)
            serializer.is_valid(raise_exception=True)
            
            user = authenticate(
                email=serializer.validated_data['email'],
                password=serializer.validated_data['password']
            )
            
            if user and user.role == 'doctor':
                refresh = RefreshToken.for_user(user)
                return Response({
                    'user': {
                        'id': str(user.id),
                        'email': user.email,
                        'role': user.role
                    },
                    'refresh': str(refresh),
                    'access': str(refresh.access_token),
                })
            return Response(
                {'error': 'Invalid credentials or not a doctor'}, 
                status=status.HTTP_401_UNAUTHORIZED
            )
        except Exception as e:
            logger.error(f"Login error: {str(e)}")
            return Response(
                {'error': str(e)},
                status=status.HTTP_400_BAD_REQUEST
            )

class DoctorListCreateView(generics.ListCreateAPIView):
    queryset = Doctor.objects.all()
    serializer_class = DoctorSerializer
    permission_classes = (AllowAny,)

    def perform_create(self, serializer):
        # Simply save the doctor profile with the provided user_id
        serializer.save(user_id=self.request.data['user_id'])

class DoctorRetrieveUpdateView(generics.RetrieveUpdateAPIView):
    queryset = Doctor.objects.all()
    serializer_class = DoctorSerializer
    permission_classes = (IsAuthenticated,)

    def get_object(self):
        # Get user info from user service
        try:
            user_response = requests.get(
                f'http://user_service:8000/api/profile/',
                headers={'Authorization': f'Bearer {self.request.auth}'}
            )
            user_response.raise_for_status()
            user_data = user_response.json()
            
            # Get doctor profile
            return Doctor.objects.get(user_id=user_data['id'])
        except requests.exceptions.RequestException as e:
            logger.error(f"Error getting user info: {str(e)}")
            raise
        except Doctor.DoesNotExist:
            raise Http404("Doctor profile not found")

class ScheduleListCreateView(generics.ListCreateAPIView):
    serializer_class = ScheduleSerializer
    permission_classes = (IsAuthenticated,)

    def get_queryset(self):
        try:
            user_response = requests.get(
                f'http://user_service:8000/api/profile/',
                headers={'Authorization': f'Bearer {self.request.auth}'}
            )
            user_response.raise_for_status()
            user_data = user_response.json()
            
            doctor = Doctor.objects.get(user_id=user_data['id'])
            return Schedule.objects.filter(doctor=doctor)
        except (requests.exceptions.RequestException, Doctor.DoesNotExist) as e:
            logger.error(f"Error getting schedules: {str(e)}")
            raise

    def perform_create(self, serializer):
        try:
            user_response = requests.get(
                f'http://user_service:8000/api/profile/',
                headers={'Authorization': f'Bearer {self.request.auth}'}
            )
            user_response.raise_for_status()
            user_data = user_response.json()
            
            doctor = Doctor.objects.get(user_id=user_data['id'])
            serializer.save(doctor=doctor)
        except (requests.exceptions.RequestException, Doctor.DoesNotExist) as e:
            logger.error(f"Error creating schedule: {str(e)}")
            raise

class ScheduleRetrieveUpdateView(generics.RetrieveUpdateAPIView):
    serializer_class = ScheduleSerializer
    permission_classes = (IsAuthenticated,)

    def get_queryset(self):
        try:
            user_response = requests.get(
                f'http://user_service:8000/api/profile/',
                headers={'Authorization': f'Bearer {self.request.auth}'}
            )
            user_response.raise_for_status()
            user_data = user_response.json()
            
            doctor = Doctor.objects.get(user_id=user_data['id'])
            return Schedule.objects.filter(doctor=doctor)
        except (requests.exceptions.RequestException, Doctor.DoesNotExist) as e:
            logger.error(f"Error getting schedule: {str(e)}")
            raise
</file>

<file path="services/doctor_service/doctor_service/settings.py">
import os
from pathlib import Path
from datetime import timedelta

BASE_DIR = Path(__file__).resolve().parent.parent

SECRET_KEY = 'your-secret-key'
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
ALLOWED_HOSTS = ['*', 'doctor_service', 'doctor_service:8000', 'localhost', '127.0.0.1']

# Custom user model
AUTH_USER_MODEL = 'doctor.User'

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_simplejwt',
    'drf_yasg',
    'corsheaders',
    'doctor.apps.DoctorConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# CORS settings
CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = True

# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'doctor': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

ROOT_URLCONF = 'doctor_service.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'doctor_service.wsgi.application'

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'doctor_db',
        'USER': 'user',
        'PASSWORD': '123456',
        'HOST': 'mysql_db',
        'PORT': '3306',
        'OPTIONS': {
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
            'charset': 'utf8mb4',
        },
    }
}
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 8,
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
]

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# User Service URL
USER_SERVICE_URL = 'http://user_service:8000'

# REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.AllowAny',
    ),
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=1),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,
}
</file>

<file path="services/doctor_service/requirements.txt">
Django>=4.2,<5.0
djangorestframework>=3.14.0
mysqlclient>=2.1.0
django-environ>=0.10.0
drf-yasg==1.21.5
pyyaml>=6.0
uritemplate>=4.1.1
django-cors-headers>=4.3.1
djangorestframework-simplejwt>=5.3.0
</file>

<file path="services/patient_service/patient_service/settings.py">
"""
Django settings for patient-service project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-your-secret-key-here'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

# Allow proxy headers
USE_X_FORWARDED_HOST = True
USE_X_FORWARDED_PORT = True


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'drf_yasg',
    'corsheaders',
    'patients.apps.PatientsConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# CORS settings
CORS_ALLOW_ALL_ORIGINS = True  # Only for development
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
]

ROOT_URLCONF = 'patient_service.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'patient_service.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': os.getenv('DATABASE_NAME', 'patient_db'),
        'USER': os.getenv('DATABASE_USER', 'user'),
        'PASSWORD': os.getenv('DATABASE_PASSWORD', '123456'),
        'HOST': os.getenv('DATABASE_HOST', 'mysql_db'),
        'PORT': os.getenv('DATABASE_PORT', '3306'),
        'OPTIONS': {
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
            'charset': 'utf8mb4',
        },
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'patients.User'
</file>

<file path="services/patient_service/patients/migrations/0001_initial.py">
# Generated by Django 4.2.22 on 2025-06-10 03:37

from django.db import migrations, models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('user_id', models.UUIDField(unique=True)),
                ('name', models.CharField(max_length=100)),
                ('age', models.IntegerField()),
                ('gender', models.CharField(choices=[('male', 'Male'), ('female', 'Female'), ('other', 'Other')], max_length=10)),
                ('phone', models.CharField(max_length=15)),
                ('address', models.TextField()),
                ('medical_history', models.TextField(blank=True, null=True)),
                ('patient_type', models.CharField(choices=[('current', 'Current Patient'), ('remote', 'Remote Patient'), ('emergency', 'Emergency Patient'), ('referral', 'Referred Patient'), ('chronic', 'Chronic Care Patient'), ('preventive', 'Preventive Care Patient')], default='current', max_length=20)),
                ('preferred_contact_method', models.CharField(blank=True, choices=[('phone', 'Phone'), ('email', 'Email'), ('video', 'Video Call')], max_length=20, null=True)),
                ('timezone', models.CharField(blank=True, max_length=50, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('role', models.CharField(choices=[('patient', 'Patient'), ('doctor', 'Doctor'), ('admin', 'Admin')], max_length=10)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
</file>

<file path="services/patient_service/patients/models.py">
from django.db import models
import uuid
from django.contrib.auth.models import AbstractBaseUser, BaseUserManager, PermissionsMixin

class UserManager(BaseUserManager):
    def create_user(self, email, password=None, **extra_fields):
        if not email:
            raise ValueError('Email is required')
        email = self.normalize_email(email)
        user = self.model(email=email, **extra_fields)
        user.set_password(password)
        user.save(using=self._db)
        return user

    def create_superuser(self, email, password=None, **extra_fields):
        extra_fields.setdefault('is_staff', True)
        extra_fields.setdefault('is_superuser', True)
        extra_fields.setdefault('role', 'admin')
        return self.create_user(email, password, **extra_fields)

class User(AbstractBaseUser, PermissionsMixin):
    ROLE_CHOICES = [
        ('patient', 'Patient'),
        ('doctor', 'Doctor'),
        ('admin', 'Admin')
    ]

    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    email = models.EmailField(unique=True)
    role = models.CharField(max_length=10, choices=ROLE_CHOICES)
    is_active = models.BooleanField(default=True)
    is_staff = models.BooleanField(default=False)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    USERNAME_FIELD = 'email'
    REQUIRED_FIELDS = ['role']
    objects = UserManager()

    def __str__(self):
        return f"{self.email} ({self.get_role_display()})"

    def get_full_name(self):
        return self.email

    def get_short_name(self):
        return self.email

class Patient(models.Model):
    PATIENT_TYPES = [
        ('current', 'Current Patient'),
        ('remote', 'Remote Patient'),
        ('emergency', 'Emergency Patient'),
        ('referral', 'Referred Patient'),
        ('chronic', 'Chronic Care Patient'),
        ('preventive', 'Preventive Care Patient')
    ]

    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    user_id = models.UUIDField(unique=True)  # Reference to user service
    name = models.CharField(max_length=100)
    age = models.IntegerField()
    gender = models.CharField(max_length=10, choices=[
        ('male', 'Male'),
        ('female', 'Female'),
        ('other', 'Other')
    ])
    phone = models.CharField(max_length=15)
    address = models.TextField()
    medical_history = models.TextField(blank=True, null=True)
    patient_type = models.CharField(max_length=20, choices=PATIENT_TYPES, default='current')
    # Fields specific to remote patients
    preferred_contact_method = models.CharField(
        max_length=20,
        choices=[
            ('phone', 'Phone'),
            ('email', 'Email'),
            ('video', 'Video Call')
        ],
        null=True,
        blank=True
    )
    timezone = models.CharField(max_length=50, null=True, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"{self.name} - {self.get_patient_type_display()}"
</file>

<file path="services/patient_service/patients/serializers.py">
from rest_framework import serializers
from django.contrib.auth import get_user_model
from .models import Patient
from django.contrib.auth.password_validation import validate_password

User = get_user_model()

class UserSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        fields = ('id', 'email', 'role', 'is_active', 'created_at', 'updated_at')
        read_only_fields = ('id', 'created_at', 'updated_at')

class RegisterSerializer(serializers.ModelSerializer):
    password = serializers.CharField(write_only=True, required=True, validators=[validate_password])
    password2 = serializers.CharField(write_only=True, required=True)
    role = serializers.ChoiceField(choices=[('patient', 'Patient'), ('doctor', 'Doctor')])

    class Meta:
        model = User
        fields = ('email', 'password', 'password2', 'role')

    def validate(self, attrs):
        if attrs['password'] != attrs['password2']:
            raise serializers.ValidationError({"password": "Password fields didn't match."})
        return attrs

    def create(self, validated_data):
        validated_data.pop('password2')
        user = User.objects.create_user(**validated_data)
        return user

class LoginSerializer(serializers.Serializer):
    email = serializers.EmailField(required=True)
    password = serializers.CharField(required=True, write_only=True)

class PatientSerializer(serializers.ModelSerializer):
    user = UserSerializer(read_only=True)
    
    class Meta:
        model = Patient
        fields = ('id', 'user', 'user_id', 'name', 'age', 'gender', 'phone', 'address',
                 'medical_history', 'patient_type', 'preferred_contact_method',
                 'timezone', 'created_at', 'updated_at')
        read_only_fields = ('id', 'created_at', 'updated_at')
        extra_kwargs = {
            'name': {'required': True},
            'age': {'required': True},
            'gender': {'required': True},
            'phone': {'required': True},
            'address': {'required': True},
            'user_id': {'required': True},
            'medical_history': {'required': False},
            'patient_type': {'required': False},
            'preferred_contact_method': {'required': False},
            'timezone': {'required': False}
        }

    def validate_age(self, value):
        if value < 0 or value > 150:
            raise serializers.ValidationError("Age must be between 0 and 150")
        return value

    def validate_phone(self, value):
        if not value.replace('+', '').replace('-', '').replace(' ', '').isdigit():
            raise serializers.ValidationError("Phone number must contain only digits, spaces, hyphens, and plus sign")
        return value
</file>

<file path="services/patient_service/patients/urls.py">
from django.urls import path
from .views import (
    PatientListCreateView,
    PatientRetrieveUpdateView
)

urlpatterns = [
    path('', PatientListCreateView.as_view(), name='patient-list-create'),
    path('profile/', PatientRetrieveUpdateView.as_view(), name='patient-profile'),
]
</file>

<file path="services/patient_service/patients/views.py">
from rest_framework import generics, status
from rest_framework.response import Response
from rest_framework.permissions import AllowAny, IsAuthenticated
from rest_framework_simplejwt.tokens import RefreshToken
from django.contrib.auth import authenticate
from django.http import Http404
from .models import Patient, User
from .serializers import (
    PatientSerializer, 
    UserSerializer, 
    RegisterSerializer, 
    LoginSerializer
)
import requests
import logging

logger = logging.getLogger(__name__)

class RegisterView(generics.CreateAPIView):
    queryset = User.objects.all()
    permission_classes = (AllowAny,)
    serializer_class = RegisterSerializer

    def post(self, request, *args, **kwargs):
        serializer = self.get_serializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        user = serializer.save()
        
        return Response({
            'message': 'User registered successfully',
            'user': UserSerializer(user).data
        }, status=status.HTTP_201_CREATED)

class LoginView(generics.CreateAPIView):
    permission_classes = (AllowAny,)
    serializer_class = LoginSerializer

    def post(self, request, *args, **kwargs):
        serializer = self.get_serializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        
        user = authenticate(
            email=serializer.validated_data['email'],
            password=serializer.validated_data['password']
        )
        
        if user:
            refresh = RefreshToken.for_user(user)
            return Response({
                'user': UserSerializer(user).data,
                'refresh': str(refresh),
                'access': str(refresh.access_token),
            })
        return Response(
            {'error': 'Invalid credentials'}, 
            status=status.HTTP_401_UNAUTHORIZED
        )

class UserProfileView(generics.RetrieveUpdateAPIView):
    permission_classes = (IsAuthenticated,)
    serializer_class = UserSerializer

    def get_object(self):
        return self.request.user

class PatientListCreateView(generics.ListCreateAPIView):
    queryset = Patient.objects.all()
    serializer_class = PatientSerializer
    permission_classes = (AllowAny,)  # Allow creation without auth for registration flow

    def perform_create(self, serializer):
        try:
            # Create patient profile
            serializer.save()
        except Exception as e:
            logger.error(f"Error creating patient profile: {str(e)}")
            raise

class PatientRetrieveUpdateView(generics.RetrieveUpdateAPIView):
    queryset = Patient.objects.all()
    serializer_class = PatientSerializer
    permission_classes = (IsAuthenticated,)

    def get_object(self):
        try:
            # Get patient profile by user_id
            user_id = self.request.data.get('user_id')
            if not user_id:
                raise Http404("User ID is required")
            
            return Patient.objects.get(user_id=user_id)
        except Patient.DoesNotExist:
            raise Http404("Patient profile not found")
</file>

<file path="docker-compose.yml">
version: '3.9'

services:
  mysql_db:
    image: mysql:8.0
    container_name: mysql_db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: user_db
      MYSQL_USER: user
      MYSQL_PASSWORD: 123456
      MYSQL_ALLOW_EMPTY_PASSWORD: "no"
    ports:
      - "3307:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./seed_data.sql:/docker-entrypoint-initdb.d/seed_data.sql
    command: --default-authentication-plugin=mysql_native_password --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-uroot", "-proot"]
      interval: 10s
      retries: 5
      start_period: 30s

  mongodb:
    image: mongo:latest
    container_name: mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      retries: 5
      start_period: 30s

  postgres_db:
    image: postgres:13
    container_name: postgres_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: user_service
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Core Services
  gateway:
    build: ./gateway
    container_name: gateway
    ports:
      - "8000:8000"
    volumes:
      - ./gateway/src:/etc/nginx/conf.d
    depends_on:
      - user_service
      - doctor_service
      - patient-service
      - appointment_service
      - chatbot_service

  user_service:
    build: ./services/user_service
    container_name: user_service
    command: bash -c "python manage.py migrate --noinput && python manage.py runserver 0.0.0.0:8000"
    volumes:
      - ./services/user_service:/app
    ports:
      - "8001:8000"
    environment:
      - POSTGRES_DB=user_service
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_HOST=postgres_db
      - POSTGRES_PORT=5432
    depends_on:
      postgres_db:
        condition: service_healthy

  # Main Healthcare Services
  doctor_service:
    build: ./services/doctor_service
    container_name: doctor_service
    command: bash -c "python manage.py migrate --noinput && python3 manage.py collectstatic --noinput && python manage.py runserver 0.0.0.0:8000"
    volumes:
      - ./services/doctor_service:/app
    ports:
      - "8002:8000"
    environment:
      - DATABASE_HOST=mysql_db
      - DATABASE_PORT=3306
      - DATABASE_NAME=doctor_db
      - DATABASE_USER=user
      - DATABASE_PASSWORD=123456
    depends_on:
      mysql_db:
        condition: service_healthy

  patient-service:
    build: ./services/patient_service
    container_name: patient-service
    command: bash -c "python3 manage.py migrate --noinput && python3 manage.py collectstatic --noinput && python manage.py runserver 0.0.0.0:8000"
    volumes:
      - ./services/patient_service:/app
    ports:
      - "8003:8000"
    environment:
      - DATABASE_HOST=mysql_db
      - DATABASE_PORT=3306
      - DATABASE_NAME=patient_db
      - DATABASE_USER=user
      - DATABASE_PASSWORD=123456
    depends_on:
      mysql_db:
        condition: service_healthy

  appointment_service:
    build: ./services/appointment_service
    container_name: appointment_service
    command: bash -c "python manage.py migrate --noinput && python manage.py collectstatic --noinput && python manage.py runserver 0.0.0.0:8000"
    volumes:
      - ./services/appointment_service:/app
    ports:
      - "8004:8000"
    environment:
      - MONGODB_HOST=mongodb
      - MONGODB_PORT=27017
    depends_on:
      mongodb:
        condition: service_healthy

  laboratory_service:
    build: ./services/laboratory_service
    container_name: laboratory_service
    command: bash -c "python manage.py migrate --noinput && python manage.py runserver 0.0.0.0:8000"
    volumes:
      - ./services/laboratory_service:/app
    ports:
      - "8005:8000"
    depends_on:
      - mysql_db
      - mongodb

  chatbot_service:
    build: ./services/chatbot_service
    container_name: chatbot_service
    command: bash -c "python manage.py migrate --noinput && python manage.py runserver 0.0.0.0:8000"
    volumes:
      - ./services/chatbot_service:/app
    ports:
      - "8007:8000"
    environment:
      - DATABASE_HOST=mysql_db
      - DATABASE_PORT=3306
      - DATABASE_NAME=chatbot_db
      - DATABASE_USER=user
      - DATABASE_PASSWORD=123456
    depends_on:
      mysql_db:
        condition: service_healthy

volumes:
  mysql_data:
  mongodb_data:
  postgres_data:
</file>

</files>
